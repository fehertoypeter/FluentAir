{"version":3,"file":"static/js/536.7c4670e2.chunk.js","mappings":"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","sources":["data/TestPerformanceData.js","components/PerformanceGraph/AssessmentDataCircle.js","components/PerformanceGraph/PerformanceGraph.js","pages/Dashboard/Dashboard.js"],"sourcesContent":["const TestPerformanceData = () => {\r\n  return [\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-12-01\",\r\n      time: \"14:23\",\r\n      score: 85,\r\n      totalQuestions: 20,\r\n      percentage: 85,\r\n      duration: \"25 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-12-01\",\r\n      time: \"09:15\",\r\n      score: 90,\r\n      totalQuestions: 25,\r\n      percentage: 90,\r\n      duration: \"30 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-11-30\",\r\n      time: \"17:40\",\r\n      score: 70,\r\n      totalQuestions: 20,\r\n      percentage: 70,\r\n      duration: \"20 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-11-30\",\r\n      time: \"11:05\",\r\n      score: 60,\r\n      totalQuestions: 15,\r\n      percentage: 80,\r\n      duration: \"15 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-11-29\",\r\n      time: \"13:10\",\r\n      score: 100,\r\n      totalQuestions: 20,\r\n      percentage: 100,\r\n      duration: \"18 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-11-29\",\r\n      time: \"08:30\",\r\n      score: 50,\r\n      totalQuestions: 10,\r\n      percentage: 50,\r\n      duration: \"10 min\",\r\n    },\r\n\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-11-28\",\r\n      time: \"10:10\",\r\n      score: 40,\r\n      totalQuestions: 10,\r\n      percentage: 10,\r\n      duration: \"12 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-11-27\",\r\n      time: \"09:50\",\r\n      score: 95,\r\n      totalQuestions: 20,\r\n      percentage: 95,\r\n      duration: \"28 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-11-26\",\r\n      time: \"18:20\",\r\n      score: 85,\r\n      totalQuestions: 25,\r\n      percentage: 85,\r\n      duration: \"25 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-11-26\",\r\n      time: \"13:15\",\r\n      score: 60,\r\n      totalQuestions: 15,\r\n      percentage: 80,\r\n      duration: \"15 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-11-25\",\r\n      time: \"10:30\",\r\n      score: 100,\r\n      totalQuestions: 20,\r\n      percentage: 100,\r\n      duration: \"20 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-11-25\",\r\n      time: \"08:45\",\r\n      score: 55,\r\n      totalQuestions: 10,\r\n      percentage: 95,\r\n      duration: \"10 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-12-10\",\r\n      time: \"16:00\",\r\n      score: 80,\r\n      totalQuestions: 20,\r\n      percentage: 96,\r\n      duration: \"18 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-12-13\",\r\n      time: \"12:10\",\r\n      score: 65,\r\n      totalQuestions: 15,\r\n      percentage: 97,\r\n      duration: \"15 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-12-15\",\r\n      time: \"14:25\",\r\n      score: 90,\r\n      totalQuestions: 25,\r\n      percentage: 98,\r\n      duration: \"30 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-12-16\",\r\n      time: \"11:55\",\r\n      score: 45,\r\n      totalQuestions: 10,\r\n      percentage: 99,\r\n      duration: \"12 min\",\r\n    },\r\n    {\r\n      type: \"math\",\r\n      date: \"2024-12-17\",\r\n      time: \"17:30\",\r\n      score: 100,\r\n      totalQuestions: 20,\r\n      percentage: 100,\r\n      duration: \"22 min\",\r\n    },\r\n    {\r\n      type: \"physics\",\r\n      date: \"2024-12-22\",\r\n      time: \"09:40\",\r\n      score: 70,\r\n      totalQuestions: 20,\r\n      percentage: 70,\r\n      duration: \"18 min\",\r\n    },\r\n    {\r\n      type: \"physics\",\r\n      date: \"2024-12-20\",\r\n      time: \"14:50\",\r\n      score: 85,\r\n      totalQuestions: 25,\r\n      percentage: 10,\r\n      duration: \"25 min\",\r\n    },\r\n    {\r\n      type: \"physics\",\r\n      date: \"2024-12-25\",\r\n      time: \"14:50\",\r\n      score: 90,\r\n      totalQuestions: 25,\r\n      percentage: 90,\r\n      duration: \"25 min\",\r\n    },\r\n    {\r\n      type: \"english\",\r\n      date: \"2024-12-26\",\r\n      time: \"14:50\",\r\n      score: 2,\r\n      totalQuestions: 25,\r\n      percentage: 25,\r\n      duration: \"25 min\",\r\n    },\r\n  ];\r\n};\r\n\r\nexport default TestPerformanceData;\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport TestPerformanceData from \"../../data/TestPerformanceData\";\r\n\r\nimport \"./AssessmentDataCircle.css\";\r\n\r\nconst AssessmentDataCircle = () => {\r\n  const initialSubjects = useMemo(\r\n    () => [\r\n      \"Numerical\",\r\n      \"Decoding\",\r\n      \"3D\",\r\n      \"Verbal\",\r\n      \"English\",\r\n      \"Memory\",\r\n      \"Sequence\",\r\n      \"Geometry\",\r\n      \"Concentration\",\r\n      \"Math\",\r\n      \"Physics\",\r\n      \"Visual\",\r\n    ],\r\n    []\r\n  ); // Memoize the array, only recompute if it changes\r\n\r\n  const [averages, setAverages] = useState(Array(12).fill(0));\r\n\r\n  useEffect(() => {\r\n    const performanceData = TestPerformanceData();\r\n    const averagesData = initialSubjects.map((subject) => {\r\n      const relevantScores = performanceData\r\n        .filter((data) => data.type.toLowerCase() === subject.toLowerCase())\r\n        .map((data) => data.percentage);\r\n\r\n      if (relevantScores.length === 0) return 0;\r\n      const total = relevantScores.reduce((acc, curr) => acc + curr, 0);\r\n      return Math.round(total / relevantScores.length);\r\n    });\r\n    setAverages(averagesData);\r\n  }, [initialSubjects]); // Now, useMemo guarantees initialSubjects stays stable\r\n\r\n  const createSegmentPath = (startAngle, angle, radius, outerRadius = 200) => {\r\n    const x1 = radius * Math.cos((startAngle * Math.PI) / 180);\r\n    const y1 = radius * Math.sin((startAngle * Math.PI) / 180);\r\n    const x2 = radius * Math.cos(((startAngle + angle) * Math.PI) / 180);\r\n    const y2 = radius * Math.sin(((startAngle + angle) * Math.PI) / 180);\r\n    const largeArcFlag = angle > 180 ? 1 : 0;\r\n    return `M 0,0 L ${x1},${y1} A ${outerRadius},${outerRadius} 0 ${largeArcFlag} 1 ${x2},${y2} Z`;\r\n  };\r\n\r\n  const calculateTextPosition = (startAngle, angle, radius) => {\r\n    const midAngle = startAngle + angle / 2;\r\n    const x = (radius + 30) * Math.cos((midAngle * Math.PI) / 180);\r\n    const y = (radius + 30) * Math.sin((midAngle * Math.PI) / 180);\r\n    return { x, y };\r\n  };\r\n\r\n  const getSegmentColor = (percentage) => {\r\n    if (percentage <= 40) return \"rgb(255, 90, 96)\";\r\n    if (percentage <= 80) return \"rgb(245, 171, 0)\";\r\n    return \"rgb(110, 180, 98)\";\r\n  };\r\n\r\n  const angles = Array(12).fill(30);\r\n\r\n  return (\r\n    <div\r\n      className=\"assessment-data-circle-container\"\r\n      style={{ position: \"relative\", textAlign: \"center\" }}\r\n    >\r\n      <p>All Subjects</p>\r\n      <svg\r\n        width=\"450\"\r\n        height=\"450\"\r\n        viewBox=\"-250 -250 500 580\"\r\n        style={{ margin: \"0 auto\" }}\r\n      >\r\n        {/* Marker vonalak minden 30 foknál */}\r\n        <circle\r\n          cx=\"0\"\r\n          cy=\"0\"\r\n          r=\"200\"\r\n          fill=\"#C0D9E7\"\r\n          stroke=\"#e4e9f7\"\r\n          strokeWidth=\"1\"\r\n        />\r\n        <circle\r\n          cx=\"0\"\r\n          cy=\"0\"\r\n          r=\"160\"\r\n          fill=\"#ABCBDC\"\r\n          stroke=\"#e4e9f7\"\r\n          strokeWidth=\"1\"\r\n        />\r\n        <circle\r\n          cx=\"0\"\r\n          cy=\"0\"\r\n          r=\"80\"\r\n          fill=\"#80B1C4\"\r\n          stroke=\"#e4e9f7\"\r\n          strokeWidth=\"1\"\r\n        />\r\n\r\n        {/* Kiinduló vonalak */}\r\n        {Array.from({ length: 12 }).map((_, index) => {\r\n          const angle = index * 30;\r\n          const x1 = 0;\r\n          const y1 = 0;\r\n          const x2 = 200 * Math.cos((angle * Math.PI) / 180);\r\n          const y2 = 200 * Math.sin((angle * Math.PI) / 180);\r\n          return (\r\n            <line\r\n              key={index}\r\n              x1={x1}\r\n              y1={y1}\r\n              x2={x2}\r\n              y2={y2}\r\n              stroke=\"#e4e9f7\"\r\n              strokeWidth=\"1\"\r\n            />\r\n          );\r\n        })}\r\n\r\n        {\r\n          angles.reduce(\r\n            (acc, angle, index) => {\r\n              const startAngle = acc.startAngle;\r\n              const radius = (averages[index] / 100) * 160; // Inner radius based on percentage\r\n              const outerRadius = 200; // Outer radius of the circle\r\n              const path = (\r\n                <path\r\n                  key={index}\r\n                  d={createSegmentPath(startAngle, angle, radius, outerRadius)}\r\n                  fill={\r\n                    averages[index] === 0\r\n                      ? \"transparent\"\r\n                      : getSegmentColor(averages[index])\r\n                  }\r\n                  stroke=\"white\"\r\n                  strokeWidth=\"1\"\r\n                />\r\n              );\r\n              acc.startAngle += angle;\r\n              acc.paths.push(path);\r\n              return acc;\r\n            },\r\n            { startAngle: 0, paths: [] }\r\n          ).paths\r\n        }\r\n\r\n        {\r\n          angles.reduce(\r\n            (acc, angle, index) => {\r\n              const startAngle = acc.startAngle;\r\n              const radius = (averages[index] / 100) * 200;\r\n              const path = (\r\n                <path\r\n                  key={index}\r\n                  d={createSegmentPath(startAngle, angle, radius)}\r\n                  fill={getSegmentColor(averages[index])}\r\n                  stroke=\"#e4e9f7\"\r\n                  strokeWidth=\"1\"\r\n                />\r\n              );\r\n              acc.startAngle += angle;\r\n              acc.paths.push(path);\r\n              return acc;\r\n            },\r\n            { startAngle: 0, paths: [] }\r\n          ).paths\r\n        }\r\n\r\n        {\r\n          angles.reduce(\r\n            (acc, angle, index) => {\r\n              const startAngle = acc.startAngle;\r\n              const { x, y } = calculateTextPosition(startAngle, angle, 220);\r\n              const text = (\r\n                <text\r\n                  key={index}\r\n                  x={x}\r\n                  y={y}\r\n                  textAnchor=\"middle\"\r\n                  alignmentBaseline=\"middle\"\r\n                  style={{ fontSize: \"12px\", fill: \"#333\" }}\r\n                >\r\n                  {initialSubjects[index]} ({averages[index]}%)\r\n                </text>\r\n              );\r\n              acc.startAngle += angle;\r\n              acc.texts.push(text);\r\n              return acc;\r\n            },\r\n            { startAngle: 0, texts: [] }\r\n          ).texts\r\n        }\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AssessmentDataCircle;\r\n","import React, { useState } from \"react\";\r\nimport \"./PerformanceGraph.css\";\r\nimport TestPerformanceData from \"../../data/TestPerformanceData\";\r\nimport AssessmentDataCircle from \"./AssessmentDataCircle\";\r\n\r\nconst PerformanceGraph = ({ defaultType = \"math\" }) => {\r\n  const [selectedType, setSelectedType] = useState(defaultType);\r\n  const [viewMode, setViewMode] = useState(\"test\"); // \"test\" or \"daily\"\r\n  const [hoveredIndex, setHoveredIndex] = useState(null);\r\n\r\n  const testPerformanceData = TestPerformanceData();\r\n\r\n  const handleTypeChange = (event) => {\r\n    setSelectedType(event.target.value);\r\n  };\r\n\r\n  const handleViewModeChange = (event) => {\r\n    setViewMode(event.target.value);\r\n  };\r\n\r\n  const processDailyData = (data) => {\r\n    const dailyData = {};\r\n\r\n    // Group data by date and calculate daily averages using `percentage`\r\n    data.forEach((test) => {\r\n      const date = new Date(test.date).toISOString().split(\"T\")[0];\r\n      if (!dailyData[date]) {\r\n        dailyData[date] = { totalPercentage: 0, count: 0 };\r\n      }\r\n      dailyData[date].totalPercentage += test.percentage;\r\n      dailyData[date].count += 1;\r\n    });\r\n\r\n    // Generate last 30 days including today\r\n    const today = new Date();\r\n    const last30Days = Array.from({ length: 30 }, (_, i) => {\r\n      const date = new Date(today);\r\n      date.setDate(today.getDate() - i);\r\n      const formattedDate = date.toISOString().split(\"T\")[0];\r\n      const dayData = dailyData[formattedDate];\r\n\r\n      // Calculate average percentage\r\n      const averagePercentage =\r\n        dayData && dayData.count > 0\r\n          ? Math.round(dayData.totalPercentage / dayData.count)\r\n          : 0;\r\n\r\n      // Add formatted month and day for display\r\n      const shortDate = date.toLocaleDateString(\"en-US\", {\r\n        month: \"short\",\r\n        day: \"numeric\",\r\n      });\r\n\r\n      return {\r\n        date: formattedDate,\r\n        shortDate: shortDate, // Add short date format\r\n        percentage: averagePercentage,\r\n        placeholder: !dayData,\r\n      };\r\n    });\r\n\r\n    return last30Days;\r\n  };\r\n\r\n  const filteredData = testPerformanceData\r\n    .filter((test) => test.type === selectedType)\r\n    .sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n  const displayedData =\r\n    viewMode === \"daily\"\r\n      ? processDailyData(filteredData)\r\n      : filteredData.slice(0, 30);\r\n\r\n  // Always generate exactly 30 slots for the graph\r\n  const graphData =\r\n    viewMode === \"daily\"\r\n      ? displayedData\r\n      : Array.from(\r\n          { length: 30 },\r\n          (_, index) =>\r\n            displayedData[index] || { percentage: 0, placeholder: true }\r\n        );\r\n\r\n  const getColorByPercentage = (percentage) => {\r\n    if (percentage <= 40) {\r\n      return \"#FF5A60\"; // Red\r\n    } else if (percentage <= 80) {\r\n      return \"#F5AB00\"; // Yellow\r\n    } else {\r\n      return \"#6EB462\"; // Green\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"desktop-container\">\r\n      <div className=\"selection-container\">\r\n        <p htmlFor=\"type-select\">Select Test Type: </p>\r\n        <select\r\n          id=\"type-select\"\r\n          value={selectedType}\r\n          onChange={handleTypeChange}\r\n        >\r\n          <option value=\"math\">Math</option>\r\n          <option value=\"physics\">Physics</option>\r\n          <option value=\"visual\">Visual</option>\r\n          <option value=\"numerical\">Numerical</option>\r\n          <option value=\"decoding\">Decoding</option>\r\n          <option value=\"3d\">3D</option>\r\n          <option value=\"verbal\">Verbal</option>\r\n          <option value=\"english\">English</option>\r\n          <option value=\"memory\">Memory</option>\r\n          <option value=\"sequence\">Sequence</option>\r\n          <option value=\"geometry\">Geometry</option>\r\n          <option value=\"concentration\">Concentration</option>\r\n        </select>\r\n\r\n        <p htmlFor=\"view-mode-select\">View mode: </p>\r\n        <select\r\n          id=\"view-mode-select\"\r\n          value={viewMode}\r\n          onChange={handleViewModeChange}\r\n        >\r\n          <option value=\"test\">Test-based</option>\r\n          <option value=\"daily\">Daily average</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"performance-graph\">\r\n        <AssessmentDataCircle />\r\n\r\n        <div className=\"graph-main-container\">\r\n          <div className=\"graph-container\">\r\n            {graphData.map((entry, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"bar-container\"\r\n                onMouseEnter={() => setHoveredIndex(index)}\r\n                onMouseLeave={() => setHoveredIndex(null)}\r\n              >\r\n                <div\r\n                  className={`bar ${entry.placeholder ? \"empty\" : \"filled\"}`}\r\n                  style={{\r\n                    height: `${entry.percentage}%`,\r\n                    backgroundColor: entry.placeholder\r\n                      ? \"rgba(173, 216, 230, 0.5)\" // Light blue for empty bars\r\n                      : getColorByPercentage(entry.percentage),\r\n                  }}\r\n                >\r\n                  {hoveredIndex === index && !entry.placeholder && (\r\n                    <div className=\"percentage-tooltip\">\r\n                      {entry.percentage}%\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"x-axis-labels\">\r\n            {graphData.map((entry, index) => {\r\n              const isXAxisLabel =\r\n                viewMode === \"daily\"\r\n                  ? [0, 5, 10, 15, 20, 25, 30].includes(index)\r\n                  : [0, 4, 9, 14, 19, 24, 29].includes(index);\r\n\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className=\"x-axis-label\"\r\n                  style={{ width: `${100 / 30}%` }}\r\n                >\r\n                  {isXAxisLabel &&\r\n                    (viewMode === \"daily\" ? entry.shortDate : index + 1)}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PerformanceGraph;\r\n","import React from \"react\";\r\nimport PerformanceGraph from \"../../components/PerformanceGraph/PerformanceGraph\";\r\n\r\nfunction Dashboard() {\r\n  return (\r\n    <div>\r\n      <PerformanceGraph />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"names":["TestPerformanceData","type","date","time","score","totalQuestions","percentage","duration","AssessmentDataCircle","initialSubjects","useMemo","averages","setAverages","useState","Array","fill","useEffect","performanceData","averagesData","map","subject","relevantScores","filter","data","toLowerCase","length","total","reduce","acc","curr","Math","round","createSegmentPath","startAngle","angle","radius","outerRadius","arguments","undefined","cos","PI","sin","getSegmentColor","angles","_jsxs","className","style","position","textAlign","children","_jsx","width","height","viewBox","margin","cx","cy","r","stroke","strokeWidth","from","_","index","x2","y2","x1","y1","path","d","paths","push","x","y","calculateTextPosition","midAngle","text","textAnchor","alignmentBaseline","fontSize","texts","_ref","defaultType","selectedType","setSelectedType","viewMode","setViewMode","hoveredIndex","setHoveredIndex","filteredData","test","sort","a","b","Date","displayedData","dailyData","forEach","toISOString","split","totalPercentage","count","today","i","setDate","getDate","formattedDate","dayData","averagePercentage","shortDate","toLocaleDateString","month","day","placeholder","processDailyData","slice","graphData","htmlFor","id","value","onChange","event","target","entry","onMouseEnter","onMouseLeave","backgroundColor","isXAxisLabel","includes","PerformanceGraph"],"sourceRoot":""}