{"version":3,"file":"static/js/569.7ec9db65.chunk.js","mappings":"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","sources":["pages/AcousticMemory/ExamFinishPopup.js","components/SettingsPopup/SettingsPopup.js","components/Input/Input.js","components/Switch/Switch.js","tests/NumberPairConcentration/NumberPairConcentration.js","pages/NumberPairConcentration/NumberPairConcentration.js","tests/NumberPairConcentration/NumberPairConcentrationResultPopup.js"],"sourcesContent":["import React from \"react\";\r\nimport { FaFlagCheckered } from \"react-icons/fa\";\r\nimport { FaXmark } from \"react-icons/fa6\";\r\nimport \"./ExamFinishPopup.css\"; // Popup stílusok\r\n\r\nconst ExamFinishPopup = ({ onConfirm, onCancel }) => {\r\n  return (\r\n    <div className=\"exam-finish-popup-overlay\">\r\n      <div className=\"exam-finish-popup\">\r\n        <div className=\"exam-finish-popup-header\">\r\n          <p>Do you want to finish the exam?</p>\r\n        </div>\r\n\r\n        <div className=\"exam-finish-popup-buttons\">\r\n          <button onClick={onConfirm} className=\"confirm-button\">\r\n            <FaFlagCheckered />\r\n            <p>Yes, finish and see the result</p>\r\n          </button>\r\n          <button onClick={onCancel} className=\"cancel-button\">\r\n            <FaXmark />\r\n            <p>No, continue the exam</p>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExamFinishPopup;\r\n","// SettingsPopup.js\r\nimport React, { useEffect } from \"react\";\r\nimport { IoIosCloseCircleOutline } from \"react-icons/io\";\r\nimport \"./SettingsPopup.css\";\r\n\r\nconst SettingsPopup = ({ isOpen, onClose, children }) => {\r\n  const handleOutsideClick = (event) => {\r\n    if (event.target.classList.contains(\"popup-overlay\")) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleEscape = (event) => {\r\n      if (event.key === \"Escape\") {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleEscape);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleEscape);\r\n    };\r\n  }, [onClose]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"popup-overlay\" onClick={handleOutsideClick}>\r\n      <div className=\"popup-content\">\r\n        <IoIosCloseCircleOutline className=\"close-button\" onClick={onClose}>\r\n          &times;\r\n        </IoIosCloseCircleOutline>\r\n        <h2>Settings</h2>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsPopup;\r\n","import React from \"react\";\r\nimport \"./Input.css\"; // Importáljuk a CSS-t\r\n\r\nconst Input = ({ value, onChange, id, placeholder, description }) => {\r\n  return (\r\n    <div className=\"settings-row modified mt30\">\r\n      <div>\r\n        <div className=\"inputBox\">\r\n          <input\r\n            type=\"text\"\r\n            id={id}\r\n            value={value}\r\n            onChange={onChange}\r\n            required\r\n          />\r\n          <span>{placeholder}</span>\r\n        </div>\r\n      </div>\r\n      <p>{description}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport \"./Switch.css\";\r\n\r\nconst Switch = ({ id, description, isChecked, onChange }) => {\r\n  return (\r\n    <div className=\"settings-row\">\r\n      <div className=\"description modified\">\r\n        <p>{description}</p>\r\n      </div>\r\n      <label className=\"switch\">\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={isChecked}\r\n          onChange={(e) => onChange(e.target.checked)} // Értesíti a szülőt a változásról\r\n          id={id}\r\n        />\r\n        <span className=\"slider round\"></span>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Switch;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport SettingsPopup from \"../../components/SettingsPopup/SettingsPopup\";\r\nimport Input from \"../../components/Input/Input\";\r\nimport Switch from \"../../components/Switch/Switch\";\r\nimport { BsGearFill } from \"react-icons/bs\";\r\nimport { FaXmark } from \"react-icons/fa6\";\r\nimport { FaArrowRightLong } from \"react-icons/fa6\";\r\nimport { FaArrowLeftLong } from \"react-icons/fa6\";\r\nimport ResultPopup from \"./NumberPairConcentrationResultPopup\";\r\nimport ExamFinishPopup from \"../../pages/AcousticMemory/ExamFinishPopup\";\r\nimport \"./NumberPairConcentration.css\";\r\n\r\nconst generateRows = () => {\r\n  const rows = [];\r\n  for (let i = 0; i < 10; i++) {\r\n    rows.push(generateRow(1, 9)); // 1-digit numbers\r\n  }\r\n  for (let i = 0; i < 10; i++) {\r\n    rows.push(generateRow(10, 99)); // 2-digit numbers\r\n  }\r\n  for (let i = 0; i < 10; i++) {\r\n    rows.push(generateRow(100, 999)); // 3-digit numbers[]\r\n  }\r\n  return rows;\r\n};\r\n\r\nconst shuffleArray = (array) => {\r\n  return array.sort(() => Math.random() - 0.5);\r\n};\r\n\r\nconst generateRow = (min, max) => {\r\n  const numbers = new Set();\r\n  while (numbers.size < 4) {\r\n    numbers.add(Math.floor(Math.random() * (max - min + 1)) + min);\r\n  }\r\n  const uniqueNumbers = [...numbers];\r\n  const pairNumber =\r\n    uniqueNumbers[Math.floor(Math.random() * uniqueNumbers.length)];\r\n  const row = [...uniqueNumbers, pairNumber]; // Add the pair\r\n  return shuffleArray(row);\r\n};\r\n\r\nconst NumberPairConcentration = () => {\r\n  const testType = \"Number Pair Concentration\";\r\n  const [isNumberResultPopupOpen, setIsNumberResultPopupOpen] = useState(false);\r\n  const [isQuestionPopupVisible, setIsQuestionPopupVisible] = useState(false);\r\n  const [rows, setRows] = useState([]);\r\n  const [selectedNumbers, setSelectedNumbers] = useState(new Set());\r\n  const [timeLeft, setTimeLeft] = useState(180); // 3 minutes\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [isExamActive, setIsExamActive] = useState(false); // Vizsga aktív-e\r\n  const [totalTasks, setTotalTasks] = useState(0);\r\n  const [correctAnswers, setCorrectAnswers] = useState(0);\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [scorePercentage, setScorePercentage] = useState(0);\r\n  const [incorrectAnswers, setIncorrectAnswers] = useState(0);\r\n  const [unansweredQuestions, setUnansweredQuestions] = useState(0);\r\n  const [totalElapsedTime, setTotalElapsedTime] = useState(0);\r\n\r\n  const [examHistory, setExamHistory] = useState([\r\n    {\r\n      date: \"2024-11-15, 15:06:34\",\r\n      testType: \"Number Pair Concentration\",\r\n      correctAnswers: 60,\r\n      incorrectAnswers: 0,\r\n      unansweredQuestions: 0,\r\n      scorePercentage: 100,\r\n      totalTimeSpent: 649,\r\n    },\r\n  ]);\r\n\r\n  //Settings Popup\r\n  const [isPopupOpen, setPopupOpen] = useState(false);\r\n  // Settings Popup Data\r\n  const [settings, setSettings] = useState([\r\n    { id: \"switch1\", description: \"Enable for use Exam mode\", value: false },\r\n    {\r\n      id: \"switch2\",\r\n      description: \"Enable numeric input pad during the session\",\r\n      value: true,\r\n    },\r\n    {\r\n      id: \"switch3\",\r\n      description: \"When enabled, input numbers in reverse order\",\r\n      value: false,\r\n    },\r\n    {\r\n      id: \"numberInput\",\r\n      description: \"How many numbers should be asked\",\r\n      value: \"2\",\r\n    },\r\n    {\r\n      id: \"playbackSpeed\",\r\n      description: \"Playback Speed\",\r\n      value: \"fast\",\r\n    },\r\n  ]);\r\n  const handleSettingChange = (id, newValue) => {\r\n    setSettings((prevSettings) =>\r\n      prevSettings.map((setting) =>\r\n        setting.id === id ? { ...setting, value: newValue } : setting\r\n      )\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    setRows(generateRows());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (gameStarted && timeLeft > 0 && !gameOver) {\r\n      const timer = setInterval(() => setTimeLeft((prev) => prev - 1), 1000);\r\n      return () => clearInterval(timer);\r\n    } else if (timeLeft === 0) {\r\n      endGame();\r\n    }\r\n  });\r\n\r\n  const toggleSelect = (rowIndex, numberIndex) => {\r\n    if (!gameStarted || gameOver) return;\r\n\r\n    const key = `${rowIndex}-${numberIndex}`;\r\n    setSelectedNumbers((prev) => {\r\n      const newSet = new Set(prev);\r\n      if (newSet.has(key)) {\r\n        newSet.delete(key);\r\n      } else {\r\n        newSet.add(key);\r\n      }\r\n      return newSet;\r\n    });\r\n  };\r\n\r\n  const calculateScore = () => {\r\n    let correctAnswers = 0;\r\n    let incorrectAnswers = 0;\r\n    let unansweredQuestions = 0;\r\n\r\n    rows.forEach((row, rowIndex) => {\r\n      const selectedInRow = Array.from(selectedNumbers).filter((key) =>\r\n        key.startsWith(`${rowIndex}-`)\r\n      );\r\n\r\n      if (selectedInRow.length === 0) {\r\n        unansweredQuestions++;\r\n        return;\r\n      }\r\n\r\n      const selectedIndices = selectedInRow.map((key) =>\r\n        parseInt(key.split(\"-\")[1], 10)\r\n      );\r\n\r\n      if (selectedInRow.length === 2) {\r\n        if (row[selectedIndices[0]] === row[selectedIndices[1]]) {\r\n          correctAnswers++;\r\n        } else {\r\n          incorrectAnswers++;\r\n        }\r\n      } else {\r\n        incorrectAnswers++;\r\n      }\r\n    });\r\n    return { correctAnswers, incorrectAnswers, unansweredQuestions };\r\n  };\r\n\r\n  const endGame = () => {\r\n    const { correctAnswers, incorrectAnswers, unansweredQuestions } =\r\n      calculateScore();\r\n    const totalTasksCount = rows.length;\r\n    const timeElapsed = 180 - timeLeft; // idő eltelt idő számítása\r\n    const scorePercentage = Math.round(\r\n      (correctAnswers / totalTasksCount) * 100\r\n    );\r\n\r\n    const examDate = new Date();\r\n    const examResult = {\r\n      date: examDate.toLocaleString(),\r\n      testType: testType,\r\n      correctAnswers: correctAnswers,\r\n      incorrectAnswers: incorrectAnswers,\r\n      unansweredQuestions: unansweredQuestions,\r\n      scorePercentage: scorePercentage,\r\n      totalTimeSpent: timeElapsed, // Használjuk az elapsedTime-t a totalTimeSpent helyett\r\n    };\r\n    setExamHistory((prevHistory) => [...prevHistory, examResult]);\r\n    setTotalElapsedTime(timeElapsed);\r\n    setIncorrectAnswers(incorrectAnswers);\r\n    setUnansweredQuestions(unansweredQuestions);\r\n    setCorrectAnswers(correctAnswers);\r\n    setElapsedTime(timeElapsed);\r\n    setTotalTasks(totalTasksCount);\r\n    setScorePercentage(scorePercentage);\r\n    setGameOver(true);\r\n    setIsExamActive(false);\r\n    setIsNumberResultPopupOpen(true);\r\n    resetGame();\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setRows(generateRows());\r\n    setSelectedNumbers(new Set());\r\n    setTimeLeft(180);\r\n    setGameOver(false);\r\n    setCurrentPage(0);\r\n    setGameStarted(false);\r\n    setIsExamActive(false);\r\n  };\r\n\r\n  const handleTryAgain = () => {\r\n    setGameOver(false);\r\n    setGameStarted(false);\r\n    setCurrentPage(0);\r\n    resetGame();\r\n    setGameStarted(true);\r\n    setIsExamActive(true);\r\n  };\r\n\r\n  const handlePreviousPage = () => {\r\n    if (currentPage > 0) {\r\n      setCurrentPage((prevPage) => prevPage - 1);\r\n    }\r\n  };\r\n\r\n  const handleNextPage = () => {\r\n    if (currentPage < Math.floor(rows.length / 5)) {\r\n      setCurrentPage((prevPage) => prevPage + 1);\r\n    }\r\n  };\r\n\r\n  const handleStartFinishButtonClick = () => {\r\n    if (!gameStarted) {\r\n      setGameStarted(true);\r\n      setIsExamActive(true);\r\n    } else if (gameOver) {\r\n      resetGame();\r\n    } else {\r\n      endGame();\r\n    }\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = seconds % 60;\r\n    return `${minutes}:${remainingSeconds.toString().padStart(2, \"0\")}`;\r\n  };\r\n\r\n  const handleCloseResultPopup = () => {\r\n    setIsNumberResultPopupOpen(false);\r\n  };\r\n\r\n  const handlePopupConfirm = () => {\r\n    setIsQuestionPopupVisible(false);\r\n    endGame();\r\n  };\r\n  const handlePopupCancel = () => {\r\n    setIsQuestionPopupVisible(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      {isQuestionPopupVisible && (\r\n        <ExamFinishPopup\r\n          onConfirm={handlePopupConfirm}\r\n          onCancel={handlePopupCancel}\r\n        />\r\n      )}\r\n      {isNumberResultPopupOpen && (\r\n        <ResultPopup\r\n          examHistory={examHistory}\r\n          elapsedTime={elapsedTime}\r\n          scorePercentage={scorePercentage}\r\n          correctAnswers={correctAnswers}\r\n          incorrectAnswers={incorrectAnswers}\r\n          unansweredQuestions={unansweredQuestions}\r\n          totalTasks={totalTasks}\r\n          totalTimeSpent={totalElapsedTime}\r\n          onClose={handleCloseResultPopup}\r\n        />\r\n      )}\r\n\r\n      <div className=\"container-top-bar\">\r\n        <div className=\"timer\">{formatTime(timeLeft)}</div>\r\n        {isExamActive ? (\r\n          <FaXmark\r\n            className=\"examFinishButton\"\r\n            onClick={() => setIsQuestionPopupVisible(true)}\r\n          />\r\n        ) : (\r\n          <BsGearFill\r\n            className=\"settingsOpenButton\"\r\n            onClick={() => setPopupOpen(true)}\r\n          />\r\n        )}\r\n        <SettingsPopup isOpen={isPopupOpen} onClose={() => setPopupOpen(false)}>\r\n          {settings.map((setting) =>\r\n            setting.id.startsWith(\"switch\") ? (\r\n              <Switch\r\n                key={setting.id}\r\n                id={setting.id}\r\n                description={setting.description}\r\n                isChecked={setting.value}\r\n                onChange={(newValue) =>\r\n                  handleSettingChange(setting.id, newValue)\r\n                }\r\n              />\r\n            ) : (\r\n              <Input\r\n                key={setting.id}\r\n                id={setting.id}\r\n                description={setting.description}\r\n                value={setting.value}\r\n                onChange={(e) =>\r\n                  handleSettingChange(setting.id, e.target.value)\r\n                }\r\n              />\r\n            )\r\n          )}\r\n        </SettingsPopup>\r\n      </div>\r\n\r\n      <div className=\"game-controls\"></div>\r\n      {!gameStarted ? <div className=\"waiting-animation\"></div> : <></>}\r\n      <div className=\"pagination-container\">\r\n        <div\r\n          className=\"pages\"\r\n          style={{\r\n            transform: `translateX(-${currentPage * 100}%)`,\r\n            transition: \"transform 0.2s ease-in-out\",\r\n          }}\r\n        >\r\n          {rows.map((row, index) => (\r\n            <div key={index} className=\"page\">\r\n              <div className=\"rows-container\">\r\n                {rows\r\n                  .slice(currentPage * 5, (currentPage + 1) * 5)\r\n                  .map((row, rowIndex) => (\r\n                    <div key={rowIndex} className=\"row\">\r\n                      {row.map((number, numberIndex) => {\r\n                        const key = `${\r\n                          currentPage * 5 + rowIndex\r\n                        }-${numberIndex}`;\r\n                        const isSelected = selectedNumbers.has(key);\r\n                        return (\r\n                          <React.Fragment key={numberIndex}>\r\n                            <span\r\n                              className={`number ${\r\n                                isSelected ? \"selected\" : \"\"\r\n                              }`}\r\n                              onClick={() =>\r\n                                toggleSelect(\r\n                                  currentPage * 5 + rowIndex,\r\n                                  numberIndex\r\n                                )\r\n                              }\r\n                            >\r\n                              {gameStarted ? number : \"?\"}\r\n                            </span>\r\n                            {numberIndex < row.length - 1 && (\r\n                              <div className=\"number-separator\">'</div>\r\n                            )}\r\n                          </React.Fragment>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"pagination\">\r\n          <button\r\n            onClick={handlePreviousPage}\r\n            disabled={currentPage === 0 || !gameStarted}\r\n            className=\"arrow-button\"\r\n          >\r\n            <FaArrowLeftLong />\r\n          </button>\r\n\r\n          <button\r\n            onClick={handleNextPage}\r\n            disabled={\r\n              currentPage >= Math.floor(rows.length / 5) || !gameStarted\r\n            }\r\n            className=\"arrow-button\"\r\n          >\r\n            <FaArrowRightLong />\r\n          </button>\r\n        </div>\r\n        {gameOver ? (\r\n          <button onClick={handleTryAgain} className=\"start-action-button\">\r\n            Try Again\r\n          </button>\r\n        ) : (\r\n          <button\r\n            onClick={handleStartFinishButtonClick}\r\n            className=\"start-action-button\"\r\n          >\r\n            {gameStarted ? \"Finish\" : \"Start\"}\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberPairConcentration;\r\n","import React from \"react\";\r\nimport NumberPairConcentration from \"../../tests/NumberPairConcentration/NumberPairConcentration\";\r\n\r\nfunction NumberPairConcentrationPage() {\r\n  return (\r\n    <div>\r\n      <NumberPairConcentration />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NumberPairConcentrationPage;\r\n","import React from \"react\";\r\nimport { LuBadgePercent } from \"react-icons/lu\";\r\nimport {\r\n  IoMdCheckmarkCircleOutline,\r\n  IoMdCloseCircleOutline,\r\n} from \"react-icons/io\";\r\nimport { FaRegThumbsDown, FaRegThumbsUp } from \"react-icons/fa\";\r\nimport { IoHourglassOutline } from \"react-icons/io5\";\r\nimport \"./NumberPairConcentrationResultPopup.css\";\r\n\r\nfunction ResultPopup({\r\n  examResults,\r\n  examHistory,\r\n  totalTimeSpent,\r\n  onClose,\r\n  scorePercentage,\r\n  correctAnswers,\r\n  totalTasks,\r\n  incorrectAnswers,\r\n  unansweredQuestions,\r\n}) {\r\n  const totalScore = examHistory.reduce((acc, exam) => {\r\n    const score = (exam.correctAnswers / exam.totalTasks) * 100;\r\n    return acc + score;\r\n  }, 0);\r\n  const averageScore = Math.round(totalScore / examHistory.length);\r\n  const comparison = scorePercentage > averageScore ? \"better\" : \"worse\";\r\n  const comparisonIcon =\r\n    scorePercentage > averageScore ? <FaRegThumbsUp /> : <FaRegThumbsDown />;\r\n  const successfulExams = examHistory.filter(\r\n    (exam) => (exam.correctAnswers / exam.totalTasks) * 100 >= 80\r\n  ).length;\r\n  const unsuccessfulExams = examHistory.length - successfulExams;\r\n  const totalElapsedTime = examHistory.reduce(\r\n    (total, exam) => total + exam.totalTimeSpent,\r\n    0\r\n  );\r\n  const totalTimeInMinutes = totalElapsedTime / 60;\r\n  const hours = Math.floor(totalTimeInMinutes / 60);\r\n  const minutes = Math.floor(totalTimeInMinutes % 60);\r\n\r\n  return (\r\n    <div className=\"exam-results-popup\">\r\n      <div className=\"exam-result-popup-content\">\r\n        <div className=\"latest-exam-result\">\r\n          <div className=\"scoreTextWrapper\">\r\n            <div className=\"scoreText\">\r\n              {correctAnswers}/{totalTasks}\r\n            </div>\r\n          </div>\r\n          <div className=\"custom-container\">\r\n            <div className=\"custom-side-bar\"></div>\r\n            <div className=\"custom-content\">\r\n              <span className=\"custom-date\">2025-01-03</span>\r\n              <h2 className=\"custom-title\">Number concentration</h2>\r\n              <span className=\"custom-description\">Ez egy teszt volt</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"squre-container\">\r\n            <div className=\"result-square\">\r\n              <h3>{scorePercentage}%</h3>\r\n              <p>Exam Percentage</p>\r\n            </div>\r\n            <div className=\"result-square\">\r\n              <h3>{incorrectAnswers}</h3>\r\n              <p>Incorrect Answers</p>\r\n            </div>\r\n            <div className=\"result-square\">\r\n              <h3>{unansweredQuestions}</h3>\r\n              <p>Unfinished tasks</p>\r\n            </div>\r\n            <div className=\"result-square\">\r\n              <h3>{totalTimeSpent}</h3>\r\n              <p>Time</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"allExamsdata\">\r\n          <div className=\"ExamScoresContainer\">\r\n            <div className=\"summaryCard\">\r\n              <LuBadgePercent />\r\n              <p>Average score {averageScore} %</p>\r\n            </div>\r\n            <div className=\"summaryCard\">\r\n              <IoMdCheckmarkCircleOutline />\r\n              <p>{successfulExams} tests passed</p>\r\n            </div>\r\n            <div className=\"summaryCard\">\r\n              <IoMdCloseCircleOutline />\r\n              <p>{unsuccessfulExams} tests failed</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"timeContainer\">\r\n            <div className=\"comparisonContainer\">\r\n              <div className=\"iconWrapper\">{comparisonIcon}</div>\r\n              <div className=\"textWrapper\">\r\n                <p>Your result is: {comparison} than your average.</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"comparisonContainer\">\r\n              <div className=\"iconWrapper\">\r\n                <IoHourglassOutline />\r\n              </div>\r\n              <div className=\"textWrapper\">\r\n                <h3>\r\n                  {hours} h {minutes} m\r\n                </h3>\r\n                <p>Total time spent on exams</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <button onClick={onClose}>Close</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResultPopup;\r\n"],"names":["_ref","onConfirm","onCancel","_jsx","className","children","_jsxs","onClick","FaFlagCheckered","FaXmark","isOpen","onClose","useEffect","handleEscape","event","key","window","addEventListener","removeEventListener","target","classList","contains","IoIosCloseCircleOutline","value","onChange","id","placeholder","description","type","required","isChecked","checked","e","generateRows","rows","i","push","generateRow","min","max","numbers","Set","size","add","Math","floor","random","uniqueNumbers","pairNumber","length","row","sort","NumberPairConcentration","isNumberResultPopupOpen","setIsNumberResultPopupOpen","useState","isQuestionPopupVisible","setIsQuestionPopupVisible","setRows","selectedNumbers","setSelectedNumbers","timeLeft","setTimeLeft","gameOver","setGameOver","currentPage","setCurrentPage","gameStarted","setGameStarted","isExamActive","setIsExamActive","totalTasks","setTotalTasks","correctAnswers","setCorrectAnswers","elapsedTime","setElapsedTime","scorePercentage","setScorePercentage","incorrectAnswers","setIncorrectAnswers","unansweredQuestions","setUnansweredQuestions","totalElapsedTime","setTotalElapsedTime","examHistory","setExamHistory","date","testType","totalTimeSpent","isPopupOpen","setPopupOpen","settings","setSettings","handleSettingChange","newValue","prevSettings","map","setting","timer","setInterval","prev","clearInterval","endGame","calculateScore","forEach","rowIndex","selectedInRow","Array","from","filter","startsWith","selectedIndices","parseInt","split","totalTasksCount","timeElapsed","round","examResult","Date","toLocaleString","prevHistory","resetGame","ExamFinishPopup","handlePopupConfirm","handlePopupCancel","ResultPopup","handleCloseResultPopup","seconds","toString","padStart","BsGearFill","SettingsPopup","Switch","Input","_Fragment","style","transform","transition","index","slice","number","numberIndex","isSelected","has","React","toggleSelect","newSet","delete","handlePreviousPage","prevPage","disabled","FaArrowLeftLong","handleNextPage","FaArrowRightLong","handleTryAgain","handleStartFinishButtonClick","examResults","totalScore","reduce","acc","exam","averageScore","comparison","comparisonIcon","FaRegThumbsUp","FaRegThumbsDown","successfulExams","unsuccessfulExams","totalTimeInMinutes","total","hours","minutes","LuBadgePercent","IoMdCheckmarkCircleOutline","IoMdCloseCircleOutline","IoHourglassOutline"],"sourceRoot":""}