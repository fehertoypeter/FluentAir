{"version":3,"file":"static/js/430.36bcfb5e.chunk.js","mappings":"yJAAO,MAAMA,EAA6B,CACxC,CACEC,KAAM,oBACNC,MAAO,UACPC,MAAO,CAAC,aAAc,aAAc,eAEtC,CACEF,KAAM,mBACNC,MAAO,UACPC,MAAO,KAIEC,EAAgB,CAC3B,aAAc,uCACd,aAAc,sCAGHC,EAAmB,CAC9BC,aAAc,CAAC,aAAc,cAC7BC,cAAe,CAAC,aAAc,eCpBnBC,EAAoB,CAC/B,aAAc,CACZ,CACEC,GAAI,WACJC,OAAQ,WACRC,OAAQ,kCACRC,QAAS,2BACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,CACP,CACET,GAAI,SACJC,OAAQ,OACRC,OAAQ,kCACRC,QAAS,4CACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVE,QAAQ,GAEV,CACEV,GAAI,SACJC,OAAQ,WACRC,OAAQ,kCACRC,QAAS,sCACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVE,QAAQ,IAGZA,QAAQ,GAEV,CACEV,GAAI,WACJC,OAAQ,UACRC,OAAQ,kCACRC,QAAS,2BACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,GACTC,QAAQ,IAGZ,aAAc,CACZ,CACEV,GAAI,WACJC,OAAQ,WACRC,OAAQ,mCACRC,QAAS,sDACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,CACP,CACET,GAAI,SACJC,OAAQ,SACRC,OAAQ,mCACRC,QAAS,mCACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVE,QAAQ,IAGZA,QAAQ,GAEV,CACEV,GAAI,WACJC,OAAQ,YACRC,OAAQ,mCACRC,QAAS,oCACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,GACTC,QAAQ,IAGZ,aAAc,CACZ,CACEV,GAAI,WACJC,OAAQ,YACRC,OAAQ,mCACRC,QAAS,sCACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,CACP,CACET,GAAI,SACJC,OAAQ,UACRC,OAAQ,mCACRC,QAAS,0BACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVE,QAAQ,GAEV,CACEV,GAAI,SACJC,OAAQ,WACRC,OAAQ,mCACRC,QAAS,sBACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVE,QAAQ,IAGZA,QAAQ,GAEV,CACEV,GAAI,WACJC,OAAQ,QACRC,OAAQ,mCACRC,QAAS,4BACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,GACTC,QAAQ,IAGZ,aAAc,CACZ,CACEV,GAAI,YACJC,OAAQ,WACRC,OAAQ,kCACRC,QAAS,2BACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,IAEX,CACET,GAAI,WACJC,OAAQ,YACRC,OAAQ,mCACRC,QAAS,0CACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,CACP,CACET,GAAI,SACJC,OAAQ,YACRC,OAAQ,mCACRC,QAAS,8BACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVE,QAAQ,IAGZA,QAAQ,GAEV,CACEV,GAAI,WACJC,OAAQ,eACRC,OAAQ,mCACRC,QAAS,6BACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,GACTC,QAAQ,IAGZ,aAAc,CACZ,CACEV,GAAI,WACJC,OAAQ,WACRC,OAAQ,mCACRC,QAAS,4BACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,CACP,CACET,GAAI,SACJC,OAAQ,aACRC,OAAQ,mCACRC,QAAS,+BACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVE,QAAQ,IAGZA,QAAQ,GAEV,CACEV,GAAI,YACJC,OAAQ,QACRC,OAAQ,mCACRC,QAAS,iCACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,GACTC,QAAQ,IAGZ,aAAc,CACZ,CACEV,GAAI,YACJC,OAAQ,YACRC,OAAQ,mCACRC,QAAS,oCACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,CACP,CACET,GAAI,SACJC,OAAQ,UACRC,OAAQ,mCACRC,QAAS,0BACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVE,QAAQ,GAEV,CACEV,GAAI,SACJC,OAAQ,QACRC,OAAQ,mCACRC,QAAS,4BACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVE,QAAQ,IAGZA,QAAQ,GAEV,CACEV,GAAI,YACJC,OAAQ,WACRC,OAAQ,mCACRC,QAAS,+CACTC,UAAW,uBACXC,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,GACTC,QAAQ,KC/Nd,EAnEyBC,CAACC,EAAcjB,KACtC,MAAOkB,EAAiBC,IAAsBC,EAAAA,EAAAA,WAAS,IAChDC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,OAC1CG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IACpCK,EAAYC,IAAiBN,EAAAA,EAAAA,UAAS,IAEvCO,GAAkBC,EAAAA,EAAAA,cACrBvB,IACC,IAAK,MAAMwB,KAASZ,EAAc,CAChC,MAAMa,EAAWD,EAAME,UAAUC,MAAMC,GAAMA,EAAE5B,KAAOA,IACtD,GAAIyB,EAAU,OAAOA,CACvB,CACA,OAAO,IAAI,GAEb,CAACb,IAGGiB,GAAkBN,EAAAA,EAAAA,cAAavB,IACnCc,GAAmB,GAEnBgB,YAAW,KACTb,EAAgBjB,GAChBmB,GAAa,EAAM,GAClB,IAAI,GACN,IAWGY,GAAmBR,EAAAA,EAAAA,cAAY,IAC5BS,OAAOC,QAAQtC,GAAeuC,QAAOC,IAA2B,IAAzBnC,EAAIoC,EAAMC,GAASF,EAC/D,MAAMV,EAAWH,EAAgBtB,GACjC,QAAKyB,IAEFW,GAAQA,EAAKE,cAAcC,SAASnB,EAAWkB,gBAC/Cb,EAASzB,IACRyB,EAASzB,GAAGsC,cAAcC,SAASnB,EAAWkB,gBAC/Cb,EAASY,UACRZ,EAASY,SAASC,cAAcC,SAASnB,EAAWkB,eAAgB,KAGzE,CAAC3C,EAAeyB,EAAYE,IAEzBkB,EAAiBxB,EAAeM,EAAgBN,GAAgB,KAChEyB,EAAazB,EAAerB,EAAcqB,GAAgB,KAEhE,MAAO,CACLH,kBACAG,eACAE,YACAE,aACAC,gBACAQ,kBACAa,mBAjCyBA,KACzBvB,GAAa,GACbW,YAAW,KACThB,GAAmB,GACnBG,EAAgB,MAChBE,GAAa,EAAM,GAClB,IAAI,EA4BPG,kBACAqB,cAAeZ,IACfS,iBACAC,aACD,ECJH,EA5DsCG,CACpChC,EACArB,KAEA,MAAOsD,EAA2BC,IAChC/B,EAAAA,EAAAA,WAAS,IACJC,EAAc+B,IAA6BhC,EAAAA,EAAAA,UAAS,OACpDiC,EAAqBC,IAA0BlC,EAAAA,EAAAA,WAAS,IACxDmC,EAAkBC,IAAuBpC,EAAAA,EAAAA,UAAS,MAEnDO,GAAkBC,EAAAA,EAAAA,cACrBvB,IACC,IAAK,MAAMwB,KAASZ,EAAc,CAChC,MAAMa,EAAWD,EAAME,UAAUC,MAAMC,GAAMA,EAAE5B,KAAOA,IACtD,GAAIyB,EAAU,OAAOA,CACvB,CACA,OAAO,IAAI,GAEb,CAACb,IA6BH,MAAO,CACLiC,4BACA7B,eACAgC,sBACAI,2BA9BgC7B,EAAAA,EAAAA,cAAavB,IAC7C8C,GAA6B,GAC7BhB,YAAW,KACTiB,EAA0B/C,GAC1BiD,GAAuB,EAAM,GAC5B,IAAI,GACN,IAyBDI,6BAvBmCA,KACnCJ,GAAuB,GACvBnB,YAAW,KACTgB,GAA6B,GAC7BC,EAA0B,MAC1BE,GAAuB,EAAM,GAC5B,IAAI,EAkBPT,eAfqBxB,EAAeM,EAAgBN,GAAgB,KAgBpEkC,mBACAC,sBACAG,0BAhB+B/B,EAAAA,EAAAA,cAC9BgC,GACQA,EAAW7D,MAAM8D,KAAKxD,GAAOsB,EAAgBtB,KAAKkC,OAAOuB,UAElE,CAACnC,IAaF,E,uBCvDH,MA0FA,EA1F0Ba,IAOnB,IAPoB,qBACzBuB,EAAoB,wBACpBC,EAAuB,0BACvBC,EAAyB,8BACzBC,EAA6B,cAC7BlE,EAAa,2BACbJ,GACD4C,EACC,OACE2B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BC,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,OAAMC,UACnBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAAC,yBACVC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,cAE7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,eACJC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,UAClCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OACEC,UAAU,qBACVG,QAASA,IAAMR,GAAqB,GAAOM,SAAA,EAE3CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,EAAAA,KAACE,EAAAA,EAAMC,QAAO,OAEhBH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,SAAC,kBAE5BF,EAAAA,EAAAA,MAAA,OACEC,UAAU,qBACVG,QAASA,KACPR,GAAqB,GACrBC,GAAwB,EAAK,EAC7BK,SAAA,EAEFC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,qBAAoBC,SACjChC,OAAOC,QAAQtC,GAAe0E,UAEjCJ,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,EAAAA,KAACE,EAAAA,EAAMG,SAAQ,OAEjBL,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,SAAC,sBAE5BF,EAAAA,EAAAA,MAAA,OACEC,UAAU,qBACVG,QAASA,KACPR,GAAqB,GACrBE,GAA0B,EAAK,EAC/BI,SAAA,EAEFC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,EAAAA,KAACE,EAAAA,EAAMI,QAAO,OAEhBN,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,SAAC,wBAE5BF,EAAAA,EAAAA,MAAA,OACEC,UAAU,qBACVG,QAASA,KACPR,GAAqB,GACrBG,GAA8B,EAAK,EACnCG,SAAA,EAEFC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,qBAAoBC,SACjCzE,EAA2B8E,UAE9BJ,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,EAAAA,KAACE,EAAAA,EAAMK,gBAAe,OAExBP,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,SAAC,6BAE5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,mBAAkBC,SAAC,qBACnCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,EAAAA,KAACE,EAAAA,EAAMM,QAAO,OAEhBR,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,SAAC,kCAOtCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOC,SAAA,EACpBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAEb,E,cCrFV,MAAMW,EAAkB,CACtBC,UAAW,CACTC,KAAMT,EAAAA,EAAMG,SACZO,MAAO,+BACPC,YACE,0FAEJC,aAAc,CACZH,KAAMT,EAAAA,EAAMI,QACZM,MAAO,mBACPC,YACE,uEAEJE,iBAAkB,CAChBJ,KAAMT,EAAAA,EAAMc,WACZJ,MAAO,sBACPC,YAAa,6DAEfI,eAAgB,CACdN,KAAMT,EAAAA,EAAMgB,iBACZN,MAAO,0BACPC,YACE,qEAsBN,EAlBmB3C,IAAe,IAAd,KAAEiD,GAAMjD,EAC1B,MACEyC,KAAMS,EAAI,MACVR,EAAK,YACLC,GACEJ,EAAgBU,IAASV,EAAgBC,UAE7C,OACEV,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAACoB,EAAI,KACLpB,EAAAA,EAAAA,KAAA,MAAAD,SAAKa,KACLZ,EAAAA,EAAAA,KAAA,KAAAD,SAAIc,QAEF,E,wBC1CV,MAiCA,EAjCmB3C,IAAmB,IAAlB,SAAEmD,GAAUnD,EAC9B,MAAOoD,EAAaC,IAAgBzE,EAAAA,EAAAA,WAAS,GAE7C,OAAKuE,GAGHxB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,OACEwB,IAAKH,EACLI,IAAI,WACJ3B,UAAU,YACVG,QAASA,IAAMsB,GAAa,KAE7BD,IACCtB,EAAAA,EAAAA,KAAA,OACEF,UAAU,sBACVG,QAASA,IAAMsB,GAAa,GAAOxB,UAEnCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,QACEF,UAAU,2BACVG,QAASA,IAAMsB,GAAa,GAAOxB,SACpC,UAGDC,EAAAA,EAAAA,KAAA,OAAKwB,IAAKH,EAAUI,IAAI,WAAW3B,UAAU,4BAtBjC,IA0Bd,ECWV,EArCyB5B,IAAmC,IAAlC,OAAEwD,EAAM,QAAExF,EAAO,QAAEyF,GAASzD,EAEpD,MAAM0D,EAAgB1F,EAAQqD,KAAI,CAACsC,EAAMC,IACrB,SAAdD,EAAKV,MACAnB,EAAAA,EAAAA,KAAC+B,EAAAA,EAAa,CAAaC,IAAKH,EAAK3F,SAAjB4F,GACJ,SAAdD,EAAKV,MAEZnB,EAAAA,EAAAA,KAAA,KAAeiC,wBAAyB,CAAEC,OAAQL,EAAK3F,UAA/C4F,GAEa,UAAdD,EAAKV,MAAoBU,EAAK3F,SAChC8D,EAAAA,EAAAA,KAACmC,EAAU,CAAad,SAAUQ,EAAK3F,SAAtB4F,GAEnB,OAGT,OACEjC,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAArC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACEF,UAAW,kBAAiB4B,EAAS,OAAS,IAC9CzB,QAAS0B,KAEX9B,EAAAA,EAAAA,MAAA,OAAKC,UAAW,oBAAmB4B,EAAS,OAAS,IAAK3B,SAAA,EACxDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,qBAAqBG,QAAS0B,EAAQ5B,UACtDC,EAAAA,EAAAA,KAACqC,EAAAA,IAAc,UAGnBrC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0BAAyBC,UACtCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,SAAE6B,OAElC5B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAEhB,E,cCjCP,MA6IA,EA7IoB5B,IAAsC,IAArC,OAAEwD,EAAM,WAAEY,EAAU,QAAEX,GAASzD,EAClD,MAAOqE,EAAaC,IAAkB1F,EAAAA,EAAAA,UAAS,KACxC2F,EAAaC,IAAkB5F,EAAAA,EAAAA,UAAS,OACxC6F,EAAYC,IAAiB9F,EAAAA,EAAAA,WAAS,GACvC+F,EAAY,KAElBC,EAAAA,EAAAA,YAAU,KACJpB,IACFc,EAAe9G,EAAc4G,IAAe,IAC5CM,GAAc,GAChB,GACC,CAAClB,EAAQY,IAEZ,MAAMS,EAAiBA,KACM,KAAvBR,EAAYS,cAEPtH,EAAc4G,GAGrB5G,EAAc4G,GAAcC,EAE9BU,QAAQC,IAAI,eAAgBxH,GAC5BgH,EAAe,MACff,GAAS,EAyBLwB,EAAe,CACnBC,SAAU,CACR5F,SAAU,iCACV6F,QAAS,CACP,CACEC,KAAM,gBACNrD,QAAS8C,EACTpC,MAAMX,EAAAA,EAAAA,KAACE,EAAAA,EAAMqD,YAAW,CAACC,KAAM,GAAIC,MAAO,CAAEC,YAAa,OAE3D,CACEJ,KAAM,oBACNrD,QAASA,KACPyC,EAAe,MACff,GAAS,EAEXhB,MAAMX,EAAAA,EAAAA,KAACE,EAAAA,EAAMyD,eAAc,CAACH,KAAM,GAAIC,MAAO,CAAEC,YAAa,QAIlEE,WAAY,CACVpG,SAAU,6CACV6F,QAAS,CACP,CACEC,KAAM,cACNrD,QA9CiB4D,YAChBnI,EAAc4G,GACrBE,EAAe,IACfE,EAAe,MACff,GAAS,EA2CHhB,MAAMX,EAAAA,EAAAA,KAACE,EAAAA,EAAM4D,QAAO,CAACN,KAAM,MAE7B,CACEF,KAAM,aACNrD,QAASA,IAAMyC,EAAe,MAC9B/B,MAAMX,EAAAA,EAAAA,KAACE,EAAAA,EAAMyD,eAAc,CAACH,KAAM,GAAIC,MAAO,CAAEC,YAAa,SAM9DK,IAAiBrI,EAAc4G,GAErC,OACEzC,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAArC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACEF,UAAW,kBAAiB4B,EAAS,OAAS,IAC9CzB,QAlDqB+D,KACrBrB,EACFD,EAAe,YAEff,GACF,KA+CE9B,EAAAA,EAAAA,MAAA,OAAKC,UAAW,2BAA0B4B,EAAS,OAAS,IAAK3B,SAAA,EAC/DF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACHgE,IACC/D,EAAAA,EAAAA,KAAA,OACEF,UAAU,aACV2D,MAAO,CAAEQ,QAAStB,EAAa,GAAM,GACrC1C,QAASA,IAAMyC,EAAe,cAAc3C,UAE5CC,EAAAA,EAAAA,KAACE,EAAAA,EAAM4D,QAAO,UAKpB9D,EAAAA,EAAAA,KAAA,UAAQF,UAAU,qBAAqBG,QAAS0B,EAAQ5B,UACtDC,EAAAA,EAAAA,KAACE,EAAAA,EAAMmC,eAAc,UAGzBrC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACnCC,EAAAA,EAAAA,KAAA,YACEF,UAAU,gBACVoE,MAAO3B,EACP4B,SAlFgBC,IACpBA,EAAEC,OAAOH,MAAM9D,QAAUyC,IAC3BL,EAAe4B,EAAEC,OAAOH,OACxBtB,GAAc,GAChB,EA+EQ0B,YAAY,sCAGhBzE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,CAC1B8C,EAAYN,EAAYnC,OAAO,MAAIyC,MAEtC7C,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,UAClCC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,mBAAmBG,QAAS8C,EAAehD,SAAC,mBAMjE0C,IACCzC,EAAAA,EAAAA,KAACuE,EAAAA,EAAuB,CACtBC,MAAM,EACNC,eAAgBA,IAAM/B,EAAe,MACrClF,SAAU2F,EAAaV,GAAajF,SACpC6F,QAASF,EAAaV,GAAaY,YAGtC,E,cCzIP,MAyLA,EAzL0BnF,IAAsC,IAArC,OAAEwD,EAAM,QAAEC,EAAO,WAAEW,GAAYpE,EACxD,MAAOwG,EAAoBC,IAAyB7H,EAAAA,EAAAA,UAClDxB,IAEKsJ,EAAYC,IAAiB/H,EAAAA,EAAAA,WAAS,IACtCgI,EAAmBC,IAAwBjI,EAAAA,EAAAA,UAAS,KACpDkI,EAAoBC,IAAyBnI,EAAAA,EAAAA,UAAS,WAoE7D,OACE+C,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAArC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACEF,UAAW,kBAAiB4B,EAAS,OAAS,IAC9CzB,QAASA,KACP0B,IACAkD,GAAc,EAAM,KAIxBhF,EAAAA,EAAAA,MAAA,OAAKC,UAAW,iCAAgC4B,EAAS,OAAS,IAAK3B,SAAA,EACrEC,EAAAA,EAAAA,KAACkF,EAAAA,EAAY,KACbrF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0BACJC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,qBAAqBG,QAAS0B,EAAQ5B,UACtDC,EAAAA,EAAAA,KAACE,EAAAA,EAAMmC,eAAc,UAIzBxC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,6BAA4BC,SAAA,EACzCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qCAAoCC,UACjDF,EAAAA,EAAAA,MAAA,UACEC,UAAU,2BACVG,QAASA,IAAM4E,GAAeD,GAAY7E,SAAA,EAE1CC,EAAAA,EAAAA,KAACE,EAAAA,EAAMiF,aAAY,CAAC3B,KAAM,MAC1BxD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gCAIPF,EAAAA,EAAAA,MAAA,OACEC,UAAW,uBAAsB8E,EAAa,aAAe,IAAK7E,SAAA,EAElEC,EAAAA,EAAAA,KAAA,SACEmB,KAAK,OACLmD,YAAY,wBACZJ,MAAOY,EACPX,SAAWC,GAAMW,EAAqBX,EAAEC,OAAOH,UAEjDrE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,mBACPC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,SAlDrB,CACnB,UACA,UACA,UACA,UACA,UACA,WA6C0BR,KAAK/D,IACjBwE,EAAAA,EAAAA,KAAA,UAEEF,UAAU,eACVG,QAASA,IA3DAzE,KACzByJ,EAAsBzJ,EAAM,EA0DG4J,CAAkB5J,GACjCiI,MAAO,CACL4B,gBACEL,IAAuBxJ,EAAQA,EAAQ,SACzCuE,UAEFC,EAAAA,EAAAA,KAACE,EAAAA,EAAMoF,WAAU,CACf9J,MAAOwJ,IAAuBxJ,EAAQ,QAAUA,EAChDgI,KAAM,MAVHhI,WAgBbwE,EAAAA,EAAAA,KAAA,UACEF,UAAU,yBACVG,QA/HiBsF,KAC3B,GAAIT,EAAkB9B,OAAQ,CAO5B,GANyB0B,EAAmBc,MACzClG,GACCA,EAAW/D,KAAK8C,gBAChByG,EAAkB9B,OAAO3E,gBAU3B,YANAoH,OAAOC,iBACL,8EACA,IACA,UACA,SAKJ,MAAMC,EAAgB,CACpBpK,KAAMuJ,EACNtJ,MAAOwJ,EACPvJ,MAAO,IAETH,EAA2BsK,KAAKD,GAChChB,EAAsB,IAAIrJ,IAC1ByJ,EAAqB,IACrBE,EAAsB,WACtBJ,GAAc,EAChB,GAmGwC9E,SAC/B,wBAKHC,EAAAA,EAAAA,KAAA,OAAKF,UAAW,oBAAmB8E,EAAa,aAAe,IAAK7E,SACjE2E,EAAmBnF,KAAI,CAACD,EAAYwC,KACnCjC,EAAAA,EAAAA,MAAA,OAEEC,UAAU,kBACV2D,MACE,CACE,EAGJxD,QAASA,IA/GmB6B,KACxC,MAAM+D,EAAqBnB,EAAmBnF,KAAI,CAACD,EAAYwG,KAC7D,GAAIA,IAAMhE,EAAO,CACf,MAAMiE,EAAiBzG,EAAW7D,MAAM6C,SAASgE,GACjD,MAAO,IACFhD,EACH7D,MAAOsK,EACHzG,EAAW7D,MAAMwC,QAAQlC,GAAOA,IAAOuG,IACvC,IAAIhD,EAAW7D,MAAO6G,GAE9B,CACA,OAAOhD,CAAU,IAGnBhE,EAA2B8E,OAAS,EACpC9E,EAA2BsK,QAAQC,GACnClB,EAAsBkB,EAAmB,EA+FdG,CAAiClE,GAAO/B,SAAA,EAEvDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,CACvCT,EAAW7D,MAAM6C,SAASgE,IACzBtC,EAAAA,EAAAA,KAACE,EAAAA,EAAM+F,eAAc,CACnBzC,KAAM,GACNC,MAAO,CAAEjI,MAAO8D,EAAW9D,UAG7BwE,EAAAA,EAAAA,KAACE,EAAAA,EAAMc,WAAU,CACfwC,KAAM,GACNC,MAAO,CAAEjI,MAAO8D,EAAW9D,UAG/BwE,EAAAA,EAAAA,KAAA,KAAGF,UAAU,uBAAsBC,SAAET,EAAW/D,QAChDsE,EAAAA,EAAAA,MAAA,KAAGC,UAAU,eAAcC,SAAA,CAAC,IAAET,EAAW7D,MAAM2E,OAAO,WAExDJ,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BAA4BC,SACxCT,EAAW7D,MAAM6C,SAASgE,IACzBtC,EAAAA,EAAAA,KAACE,EAAAA,EAAMgG,sBAAqB,CAAC1C,KAAM,MAEnCxD,EAAAA,EAAAA,KAACE,EAAAA,EAAMiG,sBAAqB,CAAC3C,KAAM,SA5BlC1B,eAoCd,E,wBC3LA,MAAMsE,EAAmBjK,IAC9B,MAAMkK,EAAM,IAAIC,KACVC,EAAc,IAAID,KAAKnK,GACvBqK,EAAgBC,KAAKC,OAAOL,EAAME,GAAe,KACjDI,EAAgBF,KAAKC,MAAMF,EAAgB,IAC3CI,EAAcH,KAAKC,MAAMC,EAAgB,IACzCE,EAAaJ,KAAKC,MAAME,EAAc,IAE5C,OAAIJ,EAAgB,GACX,WACEG,EAAgB,GAClB,GAAGA,WAAuBA,EAAgB,EAAI,IAAM,SAClDC,EAAc,GAChB,GAAGA,SAAmBA,EAAc,EAAI,IAAM,SAC5CC,EAAa,IACfN,EAAYO,mBAAmB,QAAS,CAC7CC,MAAO,QACPC,IAAK,YAGAT,EAAYO,mBAAmB,QAAS,CAC7CG,KAAM,UACNF,MAAO,QACPC,IAAK,WAET,ECjBWE,EAAchJ,IAWpB,IAXqB,SAC1BiJ,EAAQ,QACRC,EAAO,OACPC,EAAM,UACNC,EAAS,SACTC,EAAQ,OACRC,EAAM,iBACNC,EAAgB,cAChBC,EAAa,iBACbC,EAAgB,SAChBC,GACD1J,EACC,MAAO2J,EAAsBC,IAA2BhL,EAAAA,EAAAA,UAAS,OAC1DiL,EAAoBC,IAAyBlL,EAAAA,EAAAA,UAAS,OACtDmL,EAAkBC,IAAuBpL,EAAAA,EAAAA,UAAS,CAAC,IACnDqL,EAAiBC,IAAsBtL,EAAAA,EAAAA,UAAS,CAAC,IACjDuL,EAAWC,IAAgBxL,EAAAA,EAAAA,WAAS,GAErCyL,GAAcC,EAAAA,EAAAA,QAAO,CAAC,GACtBC,GAAYD,EAAAA,EAAAA,QAAO,CAAC,GACpBE,GAAcF,EAAAA,EAAAA,QAAO,OAE3B1F,EAAAA,EAAAA,YAAU,KACJ4F,EAAYC,UACdD,EAAYC,QAAQlF,MAAMmF,OAAS,OACnCF,EAAYC,QAAQlF,MAAMmF,OAAS,GAAGF,EAAYC,QAAQE,iBAC5D,GACC,CAACnB,IAEJ,MAsDMoB,EAAeA,CAACxF,EAAMyF,IACtBzF,EAAKlD,OAAS2I,EACTzF,EAAK0F,MAAM,EAAGD,GAAa,MAE7BzF,EAGH2F,EAAkBA,CAACC,EAAWhN,KAC9BmM,GACFc,EAAe1B,GAEjBa,GAAa,GACbd,EAAO0B,EAAWhN,EAAQ,EAGtBiN,EAAiB,SACrBD,GAIAtB,EAASsB,EAHFE,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,IAAAA,UAAA,GACQA,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,MAGlBd,GAAa,EACf,EAEMgB,EAAoB,SACxBJ,GAIA3B,EAAS2B,EAHFE,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,IAAAA,UAAA,GACQA,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAGpB,EAEMG,EAAeA,KACnBjB,GAAa,GACbX,EAAiB,IACjBH,EAAO,KAAM,GAAG,EAGlB,OACExH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBAAwBC,SACpCoH,EAAS5H,KAAKiK,IAAa,IAADC,EACzB,MAAMC,EAAoBzB,EAAiBuB,EAAQzN,IAC7C4N,EAAcD,EAChBF,EAAQtN,QACR4M,EAAaU,EAAQtN,QAAS,KAElC,OACE2D,EAAAA,EAAAA,MAAA,OAAsBC,UAAU,eAAcC,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,UAC7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EAC1CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,OACEwB,IAAKgI,EAAQvN,OACbwF,IAAK+H,EAAQxN,OACb8D,UAAU,oBAEZD,EAAAA,EAAAA,MAAA,MAAIC,UAAU,iBAAgBC,SAAA,CAC3ByJ,EAAQxN,OACRwN,EAAQ/M,SACPuD,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAC,qBAIrCC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,oBAAmBC,SAChCqG,EAAgBoD,EAAQrN,gBAG5BsL,IAAqB+B,EAAQzN,IAC5BiE,EAAAA,EAAAA,KAAA,YACE4J,IAAKlB,EACL5I,UAAU,wBACVoE,MAAOwD,EACPvD,SAAWC,GAAMuD,EAAiBvD,EAAEC,OAAOH,UAG7ClE,EAAAA,EAAAA,KAAA,KACE4J,IAAMC,GAAQtB,EAAYI,QAAQa,EAAQzN,IAAM8N,EAChD/J,UAAW,iBACT4J,EAAoB,WAAa,IAChC3J,SAEF4J,KAIL9J,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC7ByJ,EAAQtN,QAAQkE,OAAS,MACxBJ,EAAAA,EAAAA,KAAA,UACEF,UAAU,mBACVG,QAASA,IAlIFiJ,KAC3B,MAAMY,EAAiBvB,EAAYI,QAAQO,GACtCY,IAED7B,EAAiBiB,IACnBY,EAAeC,UAAUC,OAAO,YAChC9B,GAAqB+B,IAAI,IACpBA,EACH,CAACf,IAAY,QAGfY,EAAeC,UAAUG,IAAI,YAC7BhC,GAAqB+B,IAAI,IACpBA,EACH,CAACf,IAAY,OAEjB,EAkHmCiB,CAAoBX,EAAQzN,IAAIgE,SAE9C2J,EAAoB,YAAc,eAGvC7J,EAAAA,EAAAA,MAAA,UACEC,UAAU,wBACVG,QAASA,IAAMoH,EAAOmC,EAAQzN,IAAIgE,SAAA,CAEjCyJ,EAAQlN,OACP0D,EAAAA,EAAAA,KAACE,EAAAA,EAAMkK,mBAAkB,CAACtK,UAAU,oBAEpCE,EAAAA,EAAAA,KAACE,EAAAA,EAAMmK,eAAc,CAACvK,UAAU,oBAElCE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,sBAAqBC,SAClCyJ,EAAQpN,YAGbyD,EAAAA,EAAAA,MAAA,UACEC,UAAU,wBACVG,QAASA,IAAMqH,EAAUkC,EAAQzN,IAAIgE,SAAA,CAEpCyJ,EAAQjN,UACPyD,EAAAA,EAAAA,KAACE,EAAAA,EAAMoK,qBAAoB,CAACxK,UAAU,oBAEtCE,EAAAA,EAAAA,KAACE,EAAAA,EAAMqK,iBAAgB,CAACzK,UAAU,oBAEpCE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,sBAAqBC,SAClCyJ,EAAQnN,eAGbwD,EAAAA,EAAAA,MAAA,UACEC,UAAU,uBACVG,QAASA,IAAMmH,EAAQoC,EAAQzN,IAAIgE,SAAA,EAEnCC,EAAAA,EAAAA,KAACE,EAAAA,EAAMsK,QAAO,CAAC1K,UAAU,oBACzBE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,sBAAqBC,SAAC,cAExCF,EAAAA,EAAAA,MAAA,OACEC,UAAW,aACT+H,IAAyB2B,EAAQzN,GAAK,WAAa,IAClDgE,SAAA,EAEHC,EAAAA,EAAAA,KAAA,UACEF,UAAU,yBACVG,QAASA,KAAMwK,OA9LPvB,EA8L4BM,EAAQzN,GA7LhE+L,GAAyBmC,GAAUA,IAASf,EAAY,KAAOA,IAC/DlB,EAAsB,MACtBM,GAAa,QACbiB,IAJ4BL,KA8LwC,EAChD,gBAAerB,IAAyB2B,EAAQzN,GAChD,gBAAe,4BAA4ByN,EAAQzN,KAAKgE,UAExDC,EAAAA,EAAAA,KAACE,EAAAA,EAAMwK,wBAAuB,CAAC5K,UAAU,cAE1C+H,IAAyB2B,EAAQzN,KAChC8D,EAAAA,EAAAA,MAAA,OACE9D,GAAI,4BAA4ByN,EAAQzN,KACxC+D,UAAW,6BACT+H,IAAyB2B,EAAQzN,GAC7B,WACA,IACHgE,SAAA,EAEHC,EAAAA,EAAAA,KAAA,UACEF,UAAU,sBACVG,QAASA,IACPoI,EACIc,EAAeK,EAAQzN,IACvBkN,EAAgBO,EAAQzN,GAAIyN,EAAQtN,SACzC6D,SAEAsI,GACCrI,EAAAA,EAAAA,KAAC2K,EAAAA,IAAmB,KAEpB3K,EAAAA,EAAAA,KAACE,EAAAA,EAAM0K,gBAAe,OAG1B5K,EAAAA,EAAAA,KAAA,UACEF,UAAU,wBACVG,QAASA,IACPoI,EACIkB,IACAD,EAAkBE,EAAQzN,IAC/BgE,SAEAsI,GACCrI,EAAAA,EAAAA,KAAC6K,EAAAA,IAAc,KAEf7K,EAAAA,EAAAA,KAACE,EAAAA,EAAM4K,eAAc,sBAUvB,QADVrB,EACLD,EAAQhN,eAAO,IAAAiN,OAAA,EAAfA,EAAiBlK,KAAKwL,IACrB,MAAMC,EAAW,GAAGxB,EAAQzN,MAAMgP,EAAMhP,KAClCkP,EAAkB9C,EAAgB6C,GAClCE,EAAYD,EACdF,EAAM7O,QACN4M,EAAaiC,EAAM7O,QAAS,KAEhC,OACE8D,EAAAA,EAAAA,KAAA,OAAoBF,UAAU,aAAYC,UACxCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,UAC7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EAC1CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,OACEwB,IAAKuJ,EAAM9O,OACXwF,IAAKsJ,EAAM/O,OACX8D,UAAU,oBAEZD,EAAAA,EAAAA,MAAA,MAAIC,UAAU,iBAAgBC,SAAA,CAC3BgL,EAAM/O,OACN+O,EAAMtO,SACLuD,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAC,qBAIrCC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,oBAAmBC,SAChCqG,EAAgB2E,EAAM5O,gBAG1BsL,IAAqBsD,EAAMhP,IAC1BiE,EAAAA,EAAAA,KAAA,YACE4J,IAAKlB,EACL5I,UAAU,wBACVoE,MAAOwD,EACPvD,SAAWC,GAAMuD,EAAiBvD,EAAEC,OAAOH,UAG7ClE,EAAAA,EAAAA,KAAA,KACE4J,IAAMC,GAAQpB,EAAUE,QAAQqC,GAAYnB,EAC5C/J,UAAW,eACTmL,EAAkB,WAAa,IAC9BlL,SAEFmL,KAILrL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC7BgL,EAAM7O,QAAQkE,OAAS,MACtBJ,EAAAA,EAAAA,KAAA,UACEF,UAAU,mBACVG,QAASA,IAjQTkL,EAACC,EAASC,KAClC,MAAML,EAAW,GAAGK,KAAmBD,IACjCE,EAAe7C,EAAUE,QAAQqC,GACnCM,IACEnD,EAAgB6C,IAClBM,EAAavB,UAAUC,OAAO,YAC9B5B,GAAoB6B,IAAI,IACnBA,EACH,CAACe,IAAW,QAGdM,EAAavB,UAAUG,IAAI,YAC3B9B,GAAoB6B,IAAI,IACnBA,EACH,CAACe,IAAW,OAGlB,EAiP0BG,CAAkBJ,EAAMhP,GAAIyN,EAAQzN,IACrCgE,SAEAkL,EAAkB,YAAc,eAGrCpL,EAAAA,EAAAA,MAAA,UACEC,UAAU,wBACVG,QAASA,IAAMoH,EAAOmC,EAAQzN,IAAI,EAAMgP,EAAMhP,IAAIgE,SAAA,CAEjDgL,EAAMzO,OACL0D,EAAAA,EAAAA,KAACE,EAAAA,EAAMkK,mBAAkB,KAEzBpK,EAAAA,EAAAA,KAACE,EAAAA,EAAMmK,eAAc,KAEvBrK,EAAAA,EAAAA,KAAA,QAAMF,UAAU,sBAAqBC,SAClCgL,EAAM3O,YAGXyD,EAAAA,EAAAA,MAAA,UACEC,UAAU,wBACVG,QAASA,IAAMqH,EAAUkC,EAAQzN,IAAI,EAAMgP,EAAMhP,IAAIgE,SAAA,CAEpDgL,EAAMxO,UACLyD,EAAAA,EAAAA,KAACE,EAAAA,EAAMoK,qBAAoB,KAE3BtK,EAAAA,EAAAA,KAACE,EAAAA,EAAMqK,iBAAgB,KAEzBvK,EAAAA,EAAAA,KAAA,QAAMF,UAAU,sBAAqBC,SAClCgL,EAAM1O,eAGXwD,EAAAA,EAAAA,MAAA,UACEC,UAAU,uBACVG,QAASA,IAAMmH,EAAQoC,EAAQzN,IAAIgE,SAAA,EAEnCC,EAAAA,EAAAA,KAACE,EAAAA,EAAMsK,QAAO,KACdxK,EAAAA,EAAAA,KAAA,QAAMF,UAAU,sBAAqBC,SAAC,cAExCF,EAAAA,EAAAA,MAAA,OACEC,UAAW,aACTiI,IAAuBiD,EAAW,WAAa,IAC9CjL,SAAA,EAEHC,EAAAA,EAAAA,KAAA,UACEF,UAAU,yBACVG,QAASA,IA3URsL,EAACH,EAASC,KACnC,MAAML,EAAW,GAAGK,KAAmBD,IACvCpD,GAAuBiC,GAAUA,IAASe,EAAW,KAAOA,IAC5DlD,EAAwB,MACxBQ,GAAa,GACbiB,GAAc,EAuUYgC,CAAmBR,EAAMhP,GAAIyN,EAAQzN,IAEvC,gBAAegM,IAAuBiD,EACtC,gBAAe,0BAA0BA,IAAWjL,UAEpDC,EAAAA,EAAAA,KAACE,EAAAA,EAAMwK,wBAAuB,CAAC5K,UAAU,cAE1CiI,IAAuBiD,IACtBnL,EAAAA,EAAAA,MAAA,OACE9D,GAAI,0BAA0BiP,IAC9BlL,UAAW,6BACTiI,IAAuBiD,EACnB,WACA,IACHjL,SAAA,EAEHC,EAAAA,EAAAA,KAAA,UACEF,UAAU,sBACVG,QAASA,IACPoI,EACIc,EAAe4B,EAAMhP,IAAI,EAAMyN,EAAQzN,IACvCkN,EAAgB8B,EAAMhP,GAAIgP,EAAM7O,SACrC6D,SAEAsI,GACCrI,EAAAA,EAAAA,KAAC2K,EAAAA,IAAmB,KAEpB3K,EAAAA,EAAAA,KAACE,EAAAA,EAAM0K,gBAAe,OAG1B5K,EAAAA,EAAAA,KAAA,UACEF,UAAU,wBACVG,QAASA,IACPoI,EACIkB,IACAD,EACEyB,EAAMhP,IACN,EACAyN,EAAQzN,IAEfgE,SAEAsI,GACCrI,EAAAA,EAAAA,KAAC6K,EAAAA,IAAc,KAEf7K,EAAAA,EAAAA,KAACE,EAAAA,EAAM4K,eAAc,qBAxI7BC,EAAMhP,GAiJV,MApSFyN,EAAQzN,GAuSZ,KAGN,E,cC7aH,MAwTP,EAxT8BmC,IAMvB,IANwB,OAC7BwD,EAAM,QACNC,EAAO,WACPW,EAAU,iBACVkJ,EAAgB,oBAChBC,GACDvN,EACC,MAAOwN,EAAYC,IAAiB7O,EAAAA,EAAAA,WAAS,IACtC8O,EAAYC,IAAiB/O,EAAAA,EAAAA,UAAS,KACtCgP,EAAYC,IAAiBjP,EAAAA,EAAAA,UAAS,OACtC2K,EAAkBuE,IAAuBlP,EAAAA,EAAAA,UAAS,OAClD4K,EAAeC,IAAoB7K,EAAAA,EAAAA,UAAS,IAE7CmP,EAAuBA,KAC3BN,GAAe1B,IAAUA,IACzB8B,EAAc,KAAK,EA4Mf5E,EAAWrL,EAAkBwG,IAAe,GAElD,OACEzC,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAArC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACEF,UAAW,kBAAiB4B,EAAS,OAAS,IAC9CzB,QAAS0B,KAEX9B,EAAAA,EAAAA,MAAA,OAAKC,UAAW,8BAA6B4B,EAAS,OAAS,IAAK3B,SAAA,EAClEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,wBAAuBC,SAAA,CAAC,aAEnCoH,EAAS+E,QACR,CAACC,EAAO3C,IAAY2C,EAAQ3C,EAAQhN,QAAQ4D,QAC5C,GACE+G,EAAS/G,OAAO,QAGtBJ,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0BAAyBC,SACrCoH,EAAS5H,KAAI,CAAC6M,EAAWtK,KACxB9B,EAAAA,EAAAA,KAAA,OAEEwB,IAAK4K,EAAUnQ,OACfwF,IAAK2K,EAAUpQ,OACf8D,UAAU,yBACV2D,MAAO,CAAE4I,OAAQlF,EAAS/G,OAAS0B,GACnClB,MAAOwL,EAAUpQ,QALZoQ,EAAUrQ,YAUvBiE,EAAAA,EAAAA,KAAA,OACEF,UAAW,0BACT4L,EAAa,WAAa,aACzB3L,UAEHC,EAAAA,EAAAA,KAACkH,EAAW,CACVC,SAAUA,EACVC,QAnKW8B,IACnB6C,EAAc7C,GACdyC,GAAc,EAAK,EAkKXtE,OA5HS,SAAC6B,GAAgD,IAArCoD,EAAOlD,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,IAAAA,UAAA,GAAUgC,EAAOhC,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,KACxD,MAAMmD,EAAkB,IAAKzQ,GACxByQ,EAAgBjK,KACnBiK,EAAgBjK,GAAc,IAEhC,MAAM6E,EAAWoF,EAAgBjK,GAE3BkK,EAAehD,IACnB,MAAMiD,EAAejD,EAAQpN,OAASoN,EAAQlN,OAAS,EAAI,GACrDoQ,EAAkBlD,EAAQjN,SAC5BiN,EAAQnN,SAAW,EACnBmN,EAAQnN,SACZ,MAAO,IACFmN,EACHpN,MAAOqQ,EACPpQ,SAAUqQ,EACVpQ,OAAQkN,EAAQlN,MAChBC,UAAU,EACX,EAIDgQ,EAAgBjK,GADdgK,EAC4BnF,EAAS5H,KAAKoN,GACtCA,EAAE5Q,KAAOmN,EACJ,IACFyD,EACHnQ,QAASmQ,EAAEnQ,QAAQ+C,KAAKqN,GACtBA,EAAE7Q,KAAOqP,EAAUoB,EAAYI,GAAKA,KAInCD,IAGqBxF,EAAS5H,KAAKoN,GAC1CA,EAAE5Q,KAAOmN,EAAYsD,EAAYG,GAAKA,IAK1C7Q,EAAkBwG,GAAciK,EAAgBjK,GAChDmJ,EAAoB,IAAKc,GAC3B,EAmFUjF,UAjFY,SAAC4B,GAAgD,IAArCoD,EAAOlD,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,IAAAA,UAAA,GAAUgC,EAAOhC,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAC3D,MAAMmD,EAAkB,IAAKzQ,GACxByQ,EAAgBjK,KACnBiK,EAAgBjK,GAAc,IAEhC,MAAM6E,EAAWoF,EAAgBjK,GAE3BuK,EAAkBrD,IACtB,MAAMkD,EAAkBlD,EAAQnN,UAAYmN,EAAQjN,UAAY,EAAI,GAC9DkQ,EAAejD,EAAQlN,MAAQkN,EAAQpN,MAAQ,EAAIoN,EAAQpN,MACjE,MAAO,IACFoN,EACHnN,SAAUqQ,EACVtQ,MAAOqQ,EACPlQ,UAAWiN,EAAQjN,SACnBD,OAAO,EACR,EAIDiQ,EAAgBjK,GADdgK,EAC4BnF,EAAS5H,KAAKoN,GACtCA,EAAE5Q,KAAOmN,EACJ,IACFyD,EACHnQ,QAASmQ,EAAEnQ,QAAQ+C,KAAKqN,GACtBA,EAAE7Q,KAAOqP,EAAUyB,EAAeD,GAAKA,KAItCD,IAGqBxF,EAAS5H,KAAKoN,GAC1CA,EAAE5Q,KAAOmN,EAAY2D,EAAeF,GAAKA,IAI7C7Q,EAAkBwG,GAAciK,EAAgBjK,GAChDmJ,EAAoB,IAAKc,GAC3B,EA2CUhF,SA9LY,SACpB2B,GAGI,IAFJoD,EAAOlD,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,IAAAA,UAAA,GACPiC,EAAejC,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAGhBtN,EAAkBwG,GADhBgK,EAC8BxQ,EAAkBwG,GAAY/C,KAAKoN,GAC7DA,EAAE5Q,KAAOsP,EACJ,IACFsB,EACHnQ,QAASmQ,EAAEnQ,QAAQyB,QAAQ2O,GAAMA,EAAE7Q,KAAOmN,KAGvCyD,IAGuB7Q,EAAkBwG,GAAYrE,QAC3D0O,GAAMA,EAAE5Q,KAAOmN,IAIpBuC,EAAoB,IAAK3P,GAC3B,EAyKU0L,OAlKSsF,CAAC5D,EAAWhN,KAC7B8P,EAAoB9C,GACpBvB,EAAiBzL,EAAQ,EAiKjBuL,iBAAkBA,EAClBC,cAAeA,EACfC,iBAAkBA,EAClBC,SAjKO,SAACsB,GAAwD,IAA7CoD,EAAOlD,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,IAAAA,UAAA,GAAUiC,EAAejC,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAC9D,MAAM2D,EAAiBvD,IAAO,IACzBA,EACHtN,QAASwL,EACTjL,QAAQ,IAIRX,EAAkBwG,GADhBgK,EAC8BxQ,EAAkBwG,GAAY/C,KAAKoN,GAC7DA,EAAE5Q,KAAOsP,EACJ,IACFsB,EACHnQ,QAASmQ,EAAEnQ,QAAQ+C,KAAKqN,GACtBA,EAAE7Q,KAAOmN,EAAY6D,EAAcH,GAAKA,KAIvCD,IAGuB7Q,EAAkBwG,GAAY/C,KAAKoN,GACjEA,EAAE5Q,KAAOmN,EAAY6D,EAAcJ,GAAKA,IAI5ClB,EAAoB,IAAK3P,IACzBkQ,EAAoB,MACpBrE,EAAiB,GACnB,OAwIM9H,EAAAA,EAAAA,MAAA,OACEC,UAAW,2BACT4L,EAAa,WAAa,aACzB3L,SAAA,EAEHF,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAArC,SAAA,EACEC,EAAAA,EAAAA,KAAA,YACEF,UAAU,wBACVwE,YACEwH,EAAa,mBAAqB,qBAEpCkB,KAAM,EACN9I,MAAO0H,EACPzH,SAvQiBC,IAC3ByH,EAAczH,EAAEC,OAAOH,MAAM,IAwQpBwH,IACC1L,EAAAA,EAAAA,KAAA,UAAQF,UAAU,uBAAuBG,QAtQjCgN,KAClB,GAA0B,KAAtBrB,EAAW5I,OAEb,YADAkK,MAAM,0CAIR,MAAM1D,EAAU,CACdzN,IAAIoR,EAAAA,EAAAA,KACJnR,OAAQ,WACRC,OAAQ,kCACRC,QAAS0P,EACTzP,WAAW,IAAImK,MAAO8G,cACtBhR,MAAO,EACPC,SAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAS,GACTC,QAAQ,GAIRX,EAAkBwG,GADhBwJ,EAC8BhQ,EAAkBwG,GAAY/C,KAAKoN,GAC7DA,EAAE5Q,KAAO+P,EACJ,IACFa,EACHnQ,QAAS,IACJmQ,EAAEnQ,QACL,IACKgN,EACHzN,IAAIoR,EAAAA,EAAAA,QAKLR,IAGuB,IAC1B7Q,EAAkBwG,IAAe,GACrCkH,GAIJqC,EAAc,IACdF,GAAc,GACdI,EAAc,KAAK,EAyNqDhM,SAC3D+L,EAAa,aAAe,iBAGhCJ,IACC1L,EAAAA,EAAAA,KAAA,UACEF,UAAU,6BACVG,QAASgM,EAAqBlM,UAE9BC,EAAAA,EAAAA,KAACE,EAAAA,EAAMyD,eAAc,UAKzB+H,IACA1L,EAAAA,EAAAA,KAAA,UACEF,UAAU,uBACVG,QAASgM,EAAqBlM,SAC/B,4BAMN,ECrJP,EA1JuB7B,IAMhB,IAADmP,EAAA,IANkB,SACtB7P,EAAQ,cACR9B,EAAa,2BACbJ,EAA0B,iBAC1BkQ,EAAgB,oBAChBC,GACDvN,EACC,MAAOoP,EAAmBC,IAAsBzQ,EAAAA,EAAAA,WAAS,IAClD0Q,EAAsBC,IAAyB3Q,EAAAA,EAAAA,WAAS,IACxD4Q,EAAyBC,IAA4B7Q,EAAAA,EAAAA,WAAS,IAC9DwE,EAAaC,IAAgBzE,EAAAA,EAAAA,WAAS,GAEvC8Q,EAA4BlS,EAAc8B,EAASzB,IACnD8R,EAAWD,EACb1N,EAAAA,EAAM4N,aACN5N,EAAAA,EAAM6N,aAEJC,EACJ1S,EAA2BkK,MAAMlG,GAC/BA,EAAW7D,MAAM6C,SAASd,EAASzB,MAEjCkS,EAAiBD,EACnB9N,EAAAA,EAAM+F,eACN/F,EAAAA,EAAMc,WAEJkN,GAC0B,QAA9Bb,EAAAvR,EAAkB0B,EAASzB,WAAG,IAAAsR,OAAA,EAA9BA,EAAgCjN,QAAS,EACrC+N,EAAcD,EAChBhO,EAAAA,EAAMkO,SACNlO,EAAAA,EAAMmO,SAEV,OACExO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,KAAAD,SAAIvC,EAASzB,MACbiE,EAAAA,EAAAA,KAAA,KAAAD,SAAIvC,EAASY,eAEf4B,EAAAA,EAAAA,KAAA,MAAAD,SAAKvC,EAASA,WACbA,EAAS8Q,WACRtO,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAa,CAACC,IAAKxE,EAAS8Q,aAGhC9Q,EAAS+Q,QAASvO,EAAAA,EAAAA,KAACmC,EAAU,CAACd,SAAU7D,EAAS+Q,SAClDvO,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAmBC,SAC/BvC,EAASgR,QAAQjP,KAAI,CAACkP,EAAQ3M,KAC7B9B,EAAAA,EAAAA,KAAA,OACEF,UAAU,iBAEV2D,MAAO,CACL4B,gBACEoJ,IAAWjR,EAASkR,OAChB,wBACA,0BACNC,aAAc,MACdC,WAAY,4CACZ7O,SAEDvC,EAAS8Q,UAAWtO,EAAAA,EAAAA,KAAC+B,EAAAA,EAAa,CAACC,IAAKyM,IAAaA,GAVjD3M,QAeXjC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAACiO,EAAc,CACbnO,UAAU,OACV0D,KAAM,GACNC,MAAO,CACLjI,MAAOwS,EACH,2BACA,QACJtK,YAAa,GACbmL,UAAWb,EACP,uCACA,OACJY,WACE,qEAEJ3O,QAASA,IAAM0N,GAAyB,MAE1C3N,EAAAA,EAAAA,KAAC8O,EAAiB,CAChBpN,OAAQgM,EACR/L,QAASA,IAAMgM,GAAyB,GACxCrL,WAAY9E,EAASzB,MAGvBiE,EAAAA,EAAAA,KAAC6N,EAAQ,CACP/N,UAAU,OACV0D,KAAM,GACNC,MAAO,CACLjI,MAAOoS,EACH,2BACA,QACJlK,YAAa,GACbmL,UAAWjB,EACP,uCACA,OACJgB,WACE,qEAEJ3O,QAASA,IAAMsN,GAAmB,MAEpCvN,EAAAA,EAAAA,KAAC+O,EAAW,CACVrN,OAAQ4L,EACR3L,QAASA,IAAM4L,GAAmB,GAClCjL,WAAY9E,EAASzB,GACrBiT,SAAUjR,OAAOkR,KAAKvT,MAGxBsE,EAAAA,EAAAA,KAACmO,EAAW,CACVrO,UAAU,OACV0D,KAAM,GACNC,MAAO,CACLC,YAAa,GACblI,MAAO0S,EACH,2BACA,QACJW,UAAWX,EACP,uCACA,OACJU,WACE,qEAEJ3O,QAASA,IAAMwN,GAAsB,MAEvCzN,EAAAA,EAAAA,KAACkP,EAAc,CACbxN,OAAQ8L,EACR7L,QAASA,IAAM8L,GAAsB,GACrCnL,WAAY9E,EAASzB,GACrByP,iBAAkBA,EAClBC,oBAAqBA,QAIzB5L,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,UACEC,UAAU,qBACVG,QAASA,IAAMsB,GAAa,GAAMxB,SAAA,EAElCC,EAAAA,EAAAA,KAACE,EAAAA,EAAMiP,gBAAe,CAAC3L,KAAM,KAAM,kBAGrCxD,EAAAA,EAAAA,KAACoP,EAAgB,CACf1N,OAAQJ,EACRpF,QAASsB,EAAS6R,YAClB1N,QAASA,IAAMJ,GAAa,aAI9B,ECzDV,EAnG8BrD,IAiBvB,IAjBwB,gBAC7BtB,EAAe,qBACf6C,EAAoB,uBACpB6P,EAAsB,WACtBnS,EAAU,cACVC,EAAa,cACbsB,EAAa,gBACbrB,EAAe,gBACfO,EAAe,eACfW,EAAc,WACdC,EAAU,mBACVC,EAAkB,UAClBxB,EAAS,cACTvB,EAAa,2BACbJ,EAA0B,iBAC1BkQ,EAAgB,oBAChBC,GACDvN,EACC,OACE2B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,EAAAA,KAAA,OACEF,UAAW,yBAAwBlD,EAAkB,WAAa,IAAKmD,UAEvEC,EAAAA,EAAAA,KAACE,EAAAA,EAAMqP,oBAAmB,CACxBzP,UAAU,4CACVG,QAASA,KACPR,GAAqB,GACrB6P,GAAuB,EAAM,OAInCzP,EAAAA,EAAAA,MAAA,OAAKC,UAAW,WAAUlD,EAAkB,WAAa,IAAKmD,SAAA,EAC5DF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iCAAgCC,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kDACHC,EAAAA,EAAAA,KAAA,SACEmB,KAAK,OACLmD,YAAY,kBACZJ,MAAO/G,EACPgH,SAAWC,GAAMhH,EAAcgH,EAAEC,OAAOH,aAG5ClE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,SACL,IAAzBrB,EAAc0B,QACbJ,EAAAA,EAAAA,KAACwP,EAAU,CAACrO,KAAK,eAEjBnB,EAAAA,EAAAA,KAACyP,EAAAA,EAAO,CACNC,eAAgB,EAChB5P,UAAU,kBACV6P,gBAAgB,yBAAwB5P,SAEvCrB,EAAca,KAAIqQ,IAAiB,IAAf7T,EAAIoC,GAAKyR,EAC5B,MAAMpS,EAAWH,EAAgBtB,GACjC,IAAKyB,EAAU,OAAO,KACtB,MAAMqS,EACJ1R,EAAKiC,OAAS,IAAM,GAAGjC,EAAK6K,MAAM,EAAG,UAAY7K,EACnD,OACE0B,EAAAA,EAAAA,MAAA,OAEEC,UAAU,oBACVG,QAASA,IAAMrC,EAAgB7B,GAAIgE,SAAA,EAEnCC,EAAAA,EAAAA,KAAA,MAAAD,SAAKvC,EAASY,YACd4B,EAAAA,EAAAA,KAAA,MAAAD,SAAK8P,KACL7P,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,KAAA,KAAAD,SAAIvC,EAASzB,SAPVA,EASD,WAOjBa,GAAmB2B,GAAkBC,IACpCwB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oCAAmCC,UAChDC,EAAAA,EAAAA,KAACE,EAAAA,EAAMqP,oBAAmB,CACxBzP,UAAU,4CACVG,QAASA,IAAMxB,QAIpB7B,GAAmB2B,GAAkBC,IACpCwB,EAAAA,EAAAA,KAAA,OACEF,UAAW,mBAAkB7C,EAAY,YAAc,YAAa8C,UAEpEC,EAAAA,EAAAA,KAAC8P,EAAc,CACbtS,SAAUe,EACV7C,cAAeA,EACfJ,2BAA4BA,EAC5BkQ,iBAAkBA,EAClBC,oBAAqBA,QAIvB,ECoBV,EAnHoCvN,IAe7B,IAf8B,qBACnCuB,EAAoB,8BACpBG,EAA6B,gBAC7BhD,EAAe,2BACftB,EAA0B,oBAC1B4D,EAAmB,iBACnBD,EAAgB,yBAChBI,EAAwB,gBACxBzB,EAAe,eACfW,EAAc,mBACdE,EAAkB,UAClBxB,EAAS,cACTvB,EAAa,iBACb8P,EAAgB,oBAChBC,GACDvN,EACC,MAAO6R,EAA0BC,IAA6BlT,EAAAA,EAAAA,WAAS,IAChEmT,EAAsBtL,IAAyB7H,EAAAA,EAAAA,WAAS,GAE/D,OACE+C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0CAAyCC,SAAA,EACtDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACnCC,EAAAA,EAAAA,KAACE,EAAAA,EAAMqP,oBAAmB,CACxBzP,UAAU,4CACVG,QAASA,KACPR,GAAqB,GACrBG,GAA8B,GAC9BoQ,GAA0B,EAAM,OAItCnQ,EAAAA,EAAAA,MAAA,OACEC,UAAW,qBACTiQ,EAA2B,SAAW,MACnCE,EAA+C,GAAxB,wBAA6BlQ,SAAA,EAEzDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qCAAoCC,SAAA,EACjDC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACmC,IAAtCzE,EAA2B8E,QAC1BJ,EAAAA,EAAAA,KAACwP,EAAU,CAACrO,KAAK,qBAEjB7F,EAA2BiE,KAAI,CAACD,EAAYwC,KAC1C9B,EAAAA,EAAAA,KAAA,OAEEF,UAAU,kBACVG,QAASA,KACPf,EAAoBI,GACpB0Q,GAA0B,EAAK,EAC/BjQ,UAEFF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACxCC,EAAAA,EAAAA,KAACE,EAAAA,EAAM+F,eAAc,CACnBzC,KAAM,GACNC,MAAO,CAAEjI,MAAO8D,EAAW9D,UAE7BwE,EAAAA,EAAAA,KAAA,KAAGF,UAAU,uBAAsBC,SAAET,EAAW/D,QAChDsE,EAAAA,EAAAA,MAAA,KAAGC,UAAU,eAAcC,SAAA,CAAC,IAAET,EAAW7D,MAAM2E,OAAO,WAbnD0B,SAmBb9B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBAAwBC,SACpCd,EACuD,IAAtDI,EAAyBJ,GAAkBmB,QACzCJ,EAAAA,EAAAA,KAACwP,EAAU,CAACrO,KAAK,mBAEjB9B,EAAyBJ,GAAkBM,KAAK/B,IAC9CqC,EAAAA,EAAAA,MAAA,OAEEC,UAAU,0BACVG,QAASA,KACPrC,EAAgBJ,EAASzB,IACzB4I,GAAsB,EAAM,EAC5B5E,SAAA,EAEFC,EAAAA,EAAAA,KAAA,MAAAD,SAAKvC,EAASA,YACdqC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,KAAAD,SAAIvC,EAASzB,MACbiE,EAAAA,EAAAA,KAAA,KAAAD,SAAIvC,EAASY,gBAVVZ,EAASzB,MAelB,UAGPa,GAAmB2B,IAClByB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0CAAyCC,UACtDC,EAAAA,EAAAA,KAACE,EAAAA,EAAMqP,oBAAmB,CACxBzP,UAAU,4CACVG,QAASA,KACPxB,IACAkG,GAAsB,EAAK,MAKlC/H,GAAmB2B,IAClByB,EAAAA,EAAAA,KAAA,OACEF,UAAW,mBAAkB7C,EAAY,YAAc,YAAa8C,UAEpEC,EAAAA,EAAAA,KAAC8P,EAAc,CACbtS,SAAUe,EACV7C,cAAeA,EACfJ,2BAA4BA,EAC5BkQ,iBAAkBA,EAClBC,oBAAqBA,QAIvB,E,yCC/GVyE,IAAAA,OAAaC,KAEb,MAkMA,EAlMgCjS,IAIzB,IAJ0B,kBAC/BpC,EAAiB,qBACjB2D,EAAoB,0BACpBE,GACDzB,EACC,MAAOkS,EAASC,IAAcvT,EAAAA,EAAAA,WAAS,IAChCwT,EAAiBC,IAAsBzT,EAAAA,EAAAA,UAAS,KAChD0Q,EAAsBC,IAAyB3Q,EAAAA,EAAAA,WAAS,IACxD0T,EAA8BC,IACnC3T,EAAAA,EAAAA,UAAS,OACJ0O,EAAkBC,IAAuB3O,EAAAA,EAAAA,UAAShB,GAEnD4U,EAAc3S,OAAOkR,KAAKnT,GAC7B6U,SAASrO,GACDxG,EAAkBwG,GAAYqO,SAASnH,GAQrC,CAPqB,IAAKA,EAASlH,aAAYnB,KAAM,cAChCqI,EAAQhN,QAAQ+C,KAAKwL,IAAK,IACjDA,EACHzI,aACAnB,KAAM,QACNkK,gBAAiB7B,EAAQzN,YAK9B6U,MAAK,CAACC,EAAGC,IAAM,IAAIxK,KAAKwK,EAAE3U,WAAa,IAAImK,KAAKuK,EAAE1U,aAE/C4U,EAAaL,EAAYzS,QAAQ4D,GAAyB,aAAhBA,EAAK7F,SAE/CgV,EAAoBZ,EACtBM,EAAY1H,MAAM,EAAGsH,GACrBS,EAAW/H,MAAM,EAAGsH,GA2FxB,OACEzQ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sCAAqCC,SAAA,EAClDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACnCC,EAAAA,EAAAA,KAACE,EAAAA,EAAMqP,oBAAmB,CACxBzP,UAAU,4CACVG,QAASA,KACPR,GAAqB,GACrBE,GAA0B,EAAM,OAItCE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EAC1CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,UAAQC,QAASA,IAAMoQ,GAAW,GAAMtQ,SAAC,eACzCC,EAAAA,EAAAA,KAAA,UAAQC,QAASA,IAAMoQ,GAAW,GAAOtQ,SAAC,gBAE3CiR,EAAkBzR,KAAKsC,IACtB7B,EAAAA,EAAAA,KAAA,OAEEF,UAAU,wBACVG,QAASA,KACPwN,GAAsB,GACtBgD,EAAgC,CAC9B1U,GAAI8F,EAAKS,YACT,EACFvC,UAEFF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,OACEwB,IAAKK,EAAK5F,OACVwF,IAAKI,EAAK7F,OACV8D,UAAU,oBAEZD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAK8B,EAAK7F,OAAO,SACjBgE,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAK3F,iBAGb8D,EAAAA,EAAAA,KAAA,KAAGF,UAAU,oBAAmBC,SAC7BmQ,IAAMrO,EAAK1F,WAAW8U,gBAtBtBpP,EAAK9F,OA2BZqU,EAAUM,EAAYtQ,OAAS2Q,EAAW3Q,QAC1CkQ,IACAtQ,EAAAA,EAAAA,KAAA,UAAQC,QAzIKiR,KACrBX,GAAoBtG,GAASA,EAAO,IAAG,EAwIEnK,UAAU,mBAAkBC,SAAC,kBAKlEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,SAC7ByN,GAAwBgD,IACvBxQ,EAAAA,EAAAA,KAACkP,EAAc,CACbxN,OAAQ8L,EACR7L,QAASA,IAAM8L,GAAsB,GACrCnL,WAAYkO,EAA6BzU,GACzCyP,iBAAkBA,EAClBC,oBAAqBA,EACrBpE,OAlJO,SAAC6B,GAAgD,IAArCoD,EAAOlD,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,IAAAA,UAAA,GAAUgC,EAAOhC,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,KACxD,MAAM9G,EAAyC,OAA5BkO,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BzU,GACjD,IAAKuG,EAAY,OAEjB,MAAMiK,EAAkB,IAAKzQ,GACvBqL,EAAWoF,EAAgBjK,IAAe,GAE1CkK,EAAehD,IAAO,IACvBA,EACHpN,MAAOoN,EAAQpN,OAASoN,EAAQlN,OAAS,EAAI,GAC7CD,SAAUmN,EAAQjN,SAAWiN,EAAQnN,SAAW,EAAImN,EAAQnN,SAC5DC,OAAQkN,EAAQlN,MAChBC,UAAU,IAGZgQ,EAAgBjK,GAAc6E,EAAS5H,KAAKoN,GAC1CL,GAAWK,EAAE5Q,KAAOmN,EAChB,IACKyD,EACHnQ,QAASmQ,EAAEnQ,QAAQ+C,KAAKqN,GACtBA,EAAE7Q,KAAOqP,EAAUoB,EAAYI,GAAKA,KAGxCD,EAAE5Q,KAAOmN,EACTsD,EAAYG,GACZA,IAGNlB,EAAoB,IAAKc,GAC3B,EAsHYjF,UApHU,SAAC4B,GAAgD,IAArCoD,EAAOlD,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,IAAAA,UAAA,GAAUgC,EAAOhC,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAC3D,MAAM9G,EAAyC,OAA5BkO,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BzU,GACjD,IAAKuG,EAAY,OAEjB,MAAMiK,EAAkB,IAAKzQ,GACvBqL,EAAWoF,EAAgBjK,IAAe,GAE1CuK,EAAkBrD,IAAO,IAC1BA,EACHnN,SAAUmN,EAAQnN,UAAYmN,EAAQjN,UAAY,EAAI,GACtDH,MAAOoN,EAAQlN,MAAQkN,EAAQpN,MAAQ,EAAIoN,EAAQpN,MACnDG,UAAWiN,EAAQjN,SACnBD,OAAO,IAGTiQ,EAAgBjK,GAAc6E,EAAS5H,KAAKoN,GAC1CL,GAAWK,EAAE5Q,KAAOmN,EAChB,IACKyD,EACHnQ,QAASmQ,EAAEnQ,QAAQ+C,KAAKqN,GACtBA,EAAE7Q,KAAOqP,EAAUyB,EAAeD,GAAKA,KAG3CD,EAAE5Q,KAAOmN,EACT2D,EAAeF,GACfA,IAGNlB,EAAoB,IAAKc,GAC3B,EAwFYhF,SAtFU,SACpB2B,GAGI,IAFJoD,EAAOlD,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,IAAAA,UAAA,GACPiC,EAAejC,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAElB,MAAM9G,EAAyC,OAA5BkO,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BzU,GAC5CuG,IAGHxG,EAAkBwG,GADhBgK,EAC8BxQ,EAAkBwG,GAAY/C,KAAKoN,GACjEA,EAAE5Q,KAAOsP,EACL,IAAKsB,EAAGnQ,QAASmQ,EAAEnQ,QAAQyB,QAAQ2O,GAAMA,EAAE7Q,KAAOmN,KAClDyD,IAG0B7Q,EAAkBwG,GAAYrE,QAC3D0O,GAAMA,EAAE5Q,KAAOmN,IAIpBuC,EAAoB,IAAK3P,IAC3B,WAsEQ,ECnCV,GAzJqBqV,EAAAA,EAAAA,aACnB,CAAAjT,EAUE0L,KACI,IAVJ,mBACEwH,EAAkB,aAClBC,EAAY,OACZC,EAAM,QACNC,EAAO,QACPC,EAAO,SACPC,EAAQ,UACRC,GACDxT,EAGD,MAAOyT,EAAeC,IAAoB9U,EAAAA,EAAAA,UAASsU,IAC5CS,EAAWC,IAAgBhV,EAAAA,EAAAA,WAAS,IACpCiV,EAAUC,IAAelV,EAAAA,EAAAA,WAAS,GACnCmV,GAAgBzJ,EAAAA,EAAAA,QAAO,MACvB0J,GAAmB1J,EAAAA,EAAAA,QAAO4I,IAEhCe,EAAAA,EAAAA,qBAAoBvI,GAAK,MACvBwI,aACAC,YACAC,aACAC,cACAC,aACAC,iBAAkBA,IAAMP,EAAiBvJ,YAG3C,MAAM6J,EAAaA,KACjBZ,EAAiBR,GACjBc,EAAiBvJ,QAAUyI,EAC3BU,GAAa,GACbE,GAAY,GACRC,EAActJ,UAChB+J,cAAcT,EAActJ,SAC5BsJ,EAActJ,QAAU,KAC1B,GAGF7F,EAAAA,EAAAA,YAAU,KACJ+O,IACFI,EAActJ,QAAUgK,aAAY,KAClCf,GAAkB3H,IAChB,GAAIA,EAAO,EAAG,CACZ,MAAM2I,EAAU3I,EAAO,EAEvB,OADAiI,EAAiBvJ,QAAUiK,EACpBA,CACT,CAGE,OAFAF,cAAcT,EAActJ,SAC5BmJ,GAAa,GACN,CACT,GACA,GACD,MAGE,KACDG,EAActJ,UAChB+J,cAAcT,EAActJ,SAC5BsJ,EAActJ,QAAU,KAC1B,IAED,CAACkJ,KAEJ/O,EAAAA,EAAAA,YAAU,KACc,IAAlB6O,GAAwBE,GACtBH,GAAWA,EAAU,EAC3B,GACC,CAACC,EAAeE,EAAWH,KAE9B5O,EAAAA,EAAAA,YAAU,KACJuO,GACFA,EAAaM,EACf,GACC,CAACA,EAAeN,IAEnB,MAAMe,EAAaA,KACjBN,GAAa,GACbE,GAAY,GACRT,GAASA,GAAS,EAGlBe,EAAaA,KACbL,EAActJ,UAChB+J,cAAcT,EAActJ,SAC5BsJ,EAActJ,QAAU,MAE1BmJ,GAAa,GACbE,GAAY,GACRR,GAASA,GAAS,EAGlBe,EAAcA,KAClBH,IACIX,GAAUA,GAAU,EAGpBY,EAAYA,KACZJ,EAActJ,UAChB+J,cAAcT,EAActJ,SAC5BsJ,EAActJ,QAAU,MAE1BmJ,GAAa,GACbE,GAAY,GAEU,IAAlBL,GAAuBD,EACzBA,EAAUC,GACDL,GACTA,EAAOY,EAAiBvJ,QAC1B,EAGF,OACE9I,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,EAAAA,KAACE,EAAAA,EAAM2S,mBAAkB,KACzBhT,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,CACzB0G,KAAKC,MAAMiL,EAAgB,IAAI,KAC9BA,EAAgB,IAAImB,WAAWC,SAAS,EAAG,YAIjDlT,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,UACEC,QAASmS,EACTY,SAAUnB,GAA+B,IAAlBF,EAAoB5R,SAC5C,WAGDC,EAAAA,EAAAA,KAAA,UAAQC,QAASqS,EAAYU,UAAWnB,GAAaE,EAAShS,SAAC,WAG/DC,EAAAA,EAAAA,KAAA,UACEC,QAASsS,EACTS,UAAWjB,GAA8B,IAAlBJ,EAAoB5R,SAC5C,YAGDC,EAAAA,EAAAA,KAAA,UAAQC,QAASoS,EAAWW,UAAWnB,IAAcE,EAAShS,SAAC,UAG/DC,EAAAA,EAAAA,KAAA,UACEC,QAASuS,EACTQ,SAAUnB,GAAaF,IAAkBP,EAAmBrR,SAC7D,eAIC,I,cCzJZ,MAAMkT,EAAgB,CACpBC,cAAe,GACfC,iBAAkB,CAAC,OAAQ,SAAU,QAErCC,OAAQ,CAAC,eACTC,WAAW,EACXC,UAAW,GACXC,oBAAoB,EACpBC,uBAAuB,EACvBC,qBAAqB,EACrBC,yBAAyB,EACzBC,iBAAkB,eA+QpB,EA5QsBC,KACpB,MAAOC,EAAYC,IAAiBhX,EAAAA,EAAAA,UAASmW,IACtCc,EAAkBC,IAAuBlX,EAAAA,EAAAA,UAAS,KAClDmX,EAAuBC,IAA4BpX,EAAAA,EAAAA,UAAS,IAC5DqX,EAAkBC,IAAuBtX,EAAAA,EAAAA,UAAS,KAClDuX,EAAmBC,IAAwBxX,EAAAA,EAAAA,UAAS,KACpDyX,EAAkBC,IAAuB1X,EAAAA,EAAAA,UAAS,QAClD2X,EAA2BC,IAChC5X,EAAAA,EAAAA,WAAS,IACJ6X,EAAuBC,IAA4B9X,EAAAA,EAAAA,UAAS,IAGnEgG,EAAAA,EAAAA,YAAU,KACc+R,MACpB,MAAM,aAAEjZ,EAAY,cAAEC,GAAkBF,EACxCyY,EAAoBxY,GAAgB,IACpC0Y,EAAqBzY,GAAiB,IACtCoH,QAAQC,IAAI,sBAAuBtH,GACnCqH,QAAQC,IAAI,uBAAwBrH,EAAc,EAGpDgZ,EAAe,GACd,IAEH,MAAMC,GAAkBxX,EAAAA,EAAAA,cAAY,KAClC,IAAIyX,EAAoB,GACxBpY,EAAAA,EAAaqY,SAASC,IAChBpB,EAAWT,OAAO9U,SAAS2W,EAAU1X,QACvC0X,EAAUxX,UAAUuX,SAASxX,KAEzBqW,EAAWV,iBAAiB7U,SAASd,EAAS0X,aACxB,QAArBX,GACC/W,EAASY,WAAamW,GAExBQ,EAAkBnP,KAAKpI,EACzB,GAEJ,IAIEqW,EAAWL,wBACbuB,EAAoBA,EAAkB9W,QAAQT,GAC5C2W,EAAiB7V,SAASd,EAASzB,OAInC8X,EAAWN,qBACbwB,EAAoBA,EAAkB9W,QACnCT,IAAc6W,EAAkB/V,SAASd,EAASzB,OAInD8X,EAAWJ,sBACbsB,EAAoBA,EAAkBnE,MAAK,IAAMnK,KAAK0O,SAAW,MAGnEP,EAAyBG,EAAkB3U,QAC3C2U,EAAoBA,EAAkB/L,MAAM,EAAG6K,EAAWX,eAC1Dc,EAAoBe,GACpBb,EAAyBa,EAAkB3U,OAAO,GACjD,CACDyT,EAAWV,iBACXU,EAAWX,cACXW,EAAWJ,oBACXI,EAAWT,OACXS,EAAWL,sBACXK,EAAWN,mBACXY,EACAE,EACAE,KAGFzR,EAAAA,EAAAA,YAAU,KACRgS,GAAiB,GAChB,CAACjB,EAAYU,EAAkBO,KAElChS,EAAAA,EAAAA,YAAU,KACRgS,GAAiB,GAChB,CAACjB,EAAYU,EAAkBO,KAElChS,EAAAA,EAAAA,YAAU,KACRgS,GAAiB,GAChB,CAACjB,EAAYiB,KAKhBhS,EAAAA,EAAAA,YAAU,KAGN+Q,EAAWV,iBAAiB7U,SAAS,SACrCuV,EAAWV,iBAAiB7U,SAAS,WACrCuV,EAAWV,iBAAiB7U,SAAS,QAErCoW,GAA6B,GAE7BA,GAA6B,EAC/B,GACC,CAACb,EAAWV,mBAyIf,MAAO,CACLF,gBACAtW,aAAY,IACZkX,aACAE,mBACAE,wBACAE,mBACAE,oBACAC,uBACAF,sBACAgB,oBA7H2BC,IAC3B,MAAMC,EAAgBD,EAAMhR,OAAOH,MACnC4P,GAAeyB,IAAU,IACpBA,EACHnC,OAAQ,CAACkC,OAEXR,GAAiB,EAwHjBU,eAlKqBA,KACrB1B,EAAcb,EAAc,EAkK5BwC,iBAtHuBA,KACvB3B,GAAeyB,IAAU,IACpBA,EACHhC,oBAAqBgC,EAAWhC,sBAC/B,EAmHHmC,0BAhHgCA,KAChC5B,GAAeyB,IAAU,IACpBA,EACH/B,uBAAwB+B,EAAW/B,yBAClC,EA6GHmC,gCA1GsCA,KACtC7B,GAAeyB,IAAU,IACpBA,EACH9B,qBAAsB8B,EAAW9B,uBAChC,EAuGHmC,iBApGwBV,IACpBT,GAEFX,GAAeyB,IAAU,IACpBA,EACHpC,iBAAkB,CAAC+B,OAErBR,GAA6B,IAG7BZ,GAAeyB,IACb,IAAIM,EAAgBN,EAAWpC,iBAAiB7U,SAAS4W,GACrDK,EAAWpC,iBAAiBlV,QAAQ6X,GAAUA,IAAUZ,IACxD,IAAIK,EAAWpC,iBAAkB+B,GAMrC,OAJ6B,IAAzBW,EAAczV,SAChByV,EAAgB,CAAC,SAGZ,IAAKN,EAAYpC,iBAAkB0C,EAAe,GAE7D,EAgFAE,sBA9E4BA,KAG1BjC,EAFEW,EAEac,IAAU,IACpBA,EACHpC,iBAAkB,CAAC,UAINoC,IAAU,IACpBA,EACHpC,iBAAkB,CAAC,OAAQ,SAAU,WAGzCuB,GAA8BzK,IAAUA,GAAK,EAiE7C+L,0BA/DiCX,IACjC,MAAMY,EAAQC,SAASb,EAAMhR,OAAOH,MAAO,IAC3C4P,GAAeyB,IAAU,IACpBA,EACHrC,cAAeiD,MAAMF,GAAS,GAAKA,KAClC,EA2DHG,wBAxD8BA,OACzBvC,EAAWX,eAAiBW,EAAWX,cAAgB,KAC1DzN,OAAOC,iBACL,2CACA,IACA,UACA,SAEFoO,GAAeyB,IAAU,IACpBA,EACHrC,cAAe,OAEnB,EA6CAmD,gBApJsBA,KACtBvC,GAAeyB,IAAU,IACpBA,EACHlC,WAAYkC,EAAWlC,aACtB,EAiJHiD,sBA3C6BjB,IAC7B,MAAMnR,EAAQmR,EAAMhR,OAAOH,MAC3B4P,GAAeyB,IAAU,IACpBA,EACHjC,UAAqB,KAAVpP,EAAe,GAAKgS,SAAShS,EAAO,OAC9C,EAuCHqS,oBApC0BA,OACrB1C,EAAWP,WAAaO,EAAWP,WAAa,KACnD7N,OAAOC,iBACL,2CACA,IACA,UACA,SAEFoO,GAAeyB,IAAU,IACpBA,EACHjC,UAAW,OAEf,EAyBAkD,8BAhJoCA,KACpC1C,GAAeyB,IAAU,IACpBA,EACH7B,yBAA0B6B,EAAW7B,2BACpC,EA6IH+C,6BA/JoCC,IACpC5C,GAAeyB,IAAU,IACpBA,EACH5B,iBAAkB+C,KACjB,EA4JH5B,kBACAP,mBACAC,sBACAC,4BACAE,wBACD,E,wBCtRH,MAoKA,EApKqBzW,IASd,IATe,UACpByY,EAAS,cACTC,EAAa,iBACb7C,EAAgB,YAChB8C,EAAW,qBACXC,EAAoB,mBACpBC,EAAkB,WAClBlD,EAAU,WACVmD,GACD9Y,EACC,MAAO+Y,EAAeC,IAAoBpa,EAAAA,EAAAA,WAAS,GAM7Cqa,EAAqBA,CAACrV,EAAOsV,EAAYC,IAEzCL,GAA8C,gBAAhCnD,EAAWF,iBACpB7R,IAAUgV,EACb,6BACAM,EACAC,EACE,wBACA,uBACF,8BACqC,eAAhCxD,EAAWF,iBACb7R,IAAUgV,EACb,6BACAM,EACA,qBACA,8BAEGtV,IAAUgV,EACb,6BACA,8BAIFQ,EAAeA,CAACxV,EAAOsV,EAAYC,IACnCL,GAA8C,gBAAhCnD,EAAWF,iBACpB7R,IAAUgV,EACb,+BACAM,EACAC,EACE,kBACA,iBACF,iCACKxD,EAAWF,iBACb7R,IAAUgV,EACb,+BACA,iCAQR,OACEjX,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAArC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACEF,UAAW,kBAAiB6W,EAAY,OAAS,IACjD1W,QAAS2W,KAEX5W,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0BAAyBC,UACtCF,EAAAA,EAAAA,MAAA,OAAKC,UAAW,kBAAiB6W,EAAY,OAAS,IAAK5W,SAAA,EACzDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,eAAeG,QAAS2W,EAAc7W,UACtDC,EAAAA,EAAAA,KAACqC,EAAAA,IAAc,OAEjBrC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,UAAQC,QA5DCsX,KACjBL,GAAkBjN,IAAUA,GAAK,EA2DInK,UAAU,qBAAoBC,SACxDkX,GAAgBjX,EAAAA,EAAAA,KAACwX,EAAAA,IAAU,KAAMxX,EAAAA,EAAAA,KAACyX,EAAAA,IAAmB,UAG1DzX,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kCAAiCC,SAC7CkX,GACCjX,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAuBC,SACnCgU,EAAiBxU,KAAI,CAAC/B,EAAUsE,KAC/B,MAAM4V,EAAab,EAAYnZ,MAC5BmT,GAAMA,EAAEvO,aAAe9E,EAASzB,KAE7Bqb,OAA4B/N,IAAfqO,EACbL,EACJD,GAAcM,EAAWhJ,SAAWlR,EAASkR,OAE/C,OACE1O,EAAAA,EAAAA,KAAA,OAEEC,QAASA,IAAM8W,EAAmBjV,GAClC2B,MAAO,CACLkU,MAAO,OACP/O,OAAQ,OACRvD,gBAAiB8R,EACfrV,EACAsV,EACAC,GAEF7b,MAAO8b,EAAaxV,EAAOsV,EAAYC,GACvCO,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,UACRpJ,aAAc,OACd5O,SAED+B,EAAQ,GAlBJA,EAmBD,OAKZ9B,EAAAA,EAAAA,KAAA,OACEyD,MAAO,CACLmU,QAAS,OACTI,cAAe,SACfC,IAAK,QACLlY,SAEDgU,EAAiBxU,KAAI,CAAC/B,EAAUsE,KAC/B,MAAMoW,EACJ1a,EAASA,UAAY,6BACjBka,EAAab,EAAYnZ,MAC5BmT,GAAMA,EAAEvO,aAAe9E,EAASzB,KAE7Bqb,OAA4B/N,IAAfqO,EACbL,EACJD,GAAcM,EAAWhJ,SAAWlR,EAASkR,OAE/C,OACE1O,EAAAA,EAAAA,KAAA,OACEF,UAAU,gBAEVG,QAASA,IAAM8W,EAAmBjV,GAClC2B,MAAO,CACL0U,QAAS,OACT9S,gBAAiB8R,EACfrV,EACAsV,EACAC,GAEF7b,MAAO8b,EAAaxV,EAAOsV,EAAYC,GACvCU,OAAQ,UACRpJ,aAAc,MACdyJ,UAAW,OACXC,aAAc,uBACdtY,SAEDmY,EAAa9X,OAAS,IACnB8X,EAAaI,UAAU,EAAG,KAAO,MACjCJ,GAlBCpW,EAmBD,eAQnB,E,+BCjIP,MAwzCA,EAxzCgB5D,IAAwB,IAAvB,cAAEqa,GAAera,EAChC,MAAM,cACJ+U,EAAa,aACbtW,EAAY,WACZkX,EAAU,iBACVE,EAAgB,iBAChBI,EAAgB,kBAChBE,EAAiB,qBACjBC,EAAoB,oBACpBF,EAAmB,oBACnBgB,EAAmB,eACnBI,EAAc,iBACdC,EAAgB,0BAChBC,EAAyB,gCACzBC,EAA+B,iBAC/BC,EAAgB,sBAChBG,EAAqB,0BACrBC,EAAyB,wBACzBI,EAAuB,gBACvBC,EAAe,sBACfC,EAAqB,oBACrBC,EAAmB,8BACnBC,EAA6B,6BAC7BC,EAA4B,gBAC5B3B,EAAe,iBACfP,EAAgB,oBAChBC,EAAmB,0BACnBC,EAAyB,sBACzBE,GACEf,KACE,gBACJhX,EAAe,UACfK,EAAS,WACTE,GAAU,cACVC,GAAa,gBACbQ,GAAe,mBACfa,GAAkB,cAClBC,GAAa,eACbH,GAAc,WACdC,GAAU,gBACVnB,IACEX,EAAiBC,EAAcjB,IAC7B,iBAAEuD,GAAgB,oBAAEC,GAAmB,yBAAEG,IAC7CV,EAA8BhC,EAAcrB,IAGvCkd,GAAUC,KAAe3b,EAAAA,EAAAA,WAAS,IAElCwQ,GAAmBC,KAAsBzQ,EAAAA,EAAAA,WAAS,IAClD0Q,GAAsBC,KAAyB3Q,EAAAA,EAAAA,WAAS,IACxD4b,GAAkBC,KAAuB7b,EAAAA,EAAAA,WAAS,IAClD4Q,GAAyBC,KAA4B7Q,EAAAA,EAAAA,WAAS,IAC9DwE,GAAaC,KAAgBzE,EAAAA,EAAAA,WAAS,IACtC8b,GAAoBC,KAAuB/b,EAAAA,EAAAA,WAAS,IACpD2F,GAAaC,KAAkB5F,EAAAA,EAAAA,UAAS,MAEzCgc,IAAkBtQ,EAAAA,EAAAA,QAAO,OACxBuQ,GAAoBC,KAAyBlc,EAAAA,EAAAA,UAAS,OACtDsU,GAAoB6H,KAAyBnc,EAAAA,EAAAA,UAC3B,GAAvB+W,EAAWP,YAGN4F,GAAmBC,KAAwBrc,EAAAA,EAAAA,UAAS,KACpDga,GAAsBsC,KAA2Btc,EAAAA,EAAAA,UAAS,IAC1Duc,GAAwBC,KAA6Bxc,EAAAA,EAAAA,UAAS,IAC9D+Z,GAAa0C,KAAkBzc,EAAAA,EAAAA,UAAS,KACxC0O,GAAkBC,KAAuB3O,EAAAA,EAAAA,UAAS,CAAC,IACnD0c,GAAgBC,KAAqB3c,EAAAA,EAAAA,UAAS,IAC9C4c,GAAqBC,KAA0B7c,EAAAA,EAAAA,UAAS,IACxD8c,GAA4BC,KACjC/c,EAAAA,EAAAA,UAAS,IAGJgd,GAAmBra,KAAwB3C,EAAAA,EAAAA,WAAS,IACpDid,GAAqBzK,KAA0BxS,EAAAA,EAAAA,WAAS,IACxDkd,GAA4Bpa,KACjC9C,EAAAA,EAAAA,WAAS,IACJmd,GAAwBta,KAA6B7C,EAAAA,EAAAA,WAAS,IAC9Dod,GAAaC,KAAkBrd,EAAAA,EAAAA,WAAS,IACxCsd,GAAcC,KAAmBvd,EAAAA,EAAAA,WAAS,IAC1Cka,GAAYsD,KAAiBxd,EAAAA,EAAAA,WAAS,IACtCyd,GAAUC,KAAe1d,EAAAA,EAAAA,UAAS,OAClC2d,GAAgBC,KAAqB5d,EAAAA,EAAAA,UAAS,OAC9Csa,GAAYuD,KAAiB7d,EAAAA,EAAAA,WAAS,GAGvCqG,GAAe,CACnByX,WAAY,CACVpd,SAAU,kCACV6F,QAAS,CACP,CACEC,KAAM,iCACNrD,QAASA,IAAM4a,IAAoB,GACnCla,MAAMX,EAAAA,EAAAA,KAACE,EAAAA,EAAM4a,gBAAe,CAACtX,KAAM,MAErC,CACEF,KAAM,yBACNrD,QAASA,KACPyC,GAAe,MACXoW,GAAgBnQ,SAClBmQ,GAAgBnQ,QAAQ4J,aAC1B,EAEF5R,MACEX,EAAAA,EAAAA,KAACE,EAAAA,EAAMyD,eAAc,CACnBH,KAAM,GACNC,MAAO,CACLC,YAAa,SAUrBqX,GAAmBA,KACvB,MAAMC,EAAW,CACfC,eAAe,IAAI3U,MAAO8G,cAC1BoM,kBACA0B,eAAgBnH,EAAiB3T,OACjC+a,gBAAiB1U,KAAK2U,MACnB5B,GAAiBzF,EAAiB3T,OAAU,KAE/CsZ,uBACAE,8BACAyB,eAAgBtC,GAChB3H,sBACAyF,eACAtZ,MAAOsW,EAAWT,QAEpB+F,IAAsBmC,GAAc,IAAIA,EAAWN,KACnD/X,QAAQC,IAAI,YAAa8X,EAAS,EAE9BO,GAAyBA,KAC7B,MAAMC,EAAkB,IAAIrH,GAE5B0C,GAAY7B,SAAS0C,IACnB,MAAMla,EAAWuW,EAAiBrW,MAC/BC,GAAMA,EAAE5B,KAAO2b,EAAWpV,aAI7B,GAFkBoV,EAAWhJ,SAAWlR,EAASkR,OAElC,CAEb,MAAM5M,EAAQ0Z,EAAgBC,QAAQje,EAASzB,KAChC,IAAX+F,GACF0Z,EAAgBE,OAAO5Z,EAAO,EAElC,MAEO0Z,EAAgBld,SAASd,EAASzB,KACrCyf,EAAgB5V,KAAKpI,EAASzB,GAElC,IAIFqY,EAAoBoH,EAAgB5K,MAAK,CAACC,EAAGC,IAAMD,EAAE8K,cAAc7K,KAAI,EAEnE8K,GAA0BA,KAC9B,MAAMC,EAAmB,IAAIxH,GAE7BN,EAAiBiB,SAASxX,IAEJqZ,GAAYrR,MAC7BkJ,GAAWA,EAAOpM,aAAe9E,EAASzB,OAIzB8f,EAAiBvd,SAASd,EAASzB,KACrD8f,EAAiBjW,KAAKpI,EAASzB,GACjC,IAIF8f,EAAiBjL,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IAGpCwD,EAAqBuH,EAAiB,EAIlCC,GAAkB/H,EAAiB+C,IACnCiF,GACH1C,GAAyBtF,EAAiB3T,OAAU,IACjD4b,GAA2C,IAAzBlF,GAClBmF,GAAiBnF,KAAyB/C,EAAiB3T,OAAS,EACpE8b,IAA0BzB,GAC1BQ,IAAgB,IAAI3U,MAAO8G,cAC3B+N,GAAkB1U,KAAK2U,MAC1B5B,GAAiBzF,EAAiB3T,OAAU,KAEzCib,GAAiBtC,GAEjBoD,GACJhB,GAFmB,IAGjBnb,EAAAA,EAAAA,KAACE,EAAAA,EAAMkc,cAAa,KAEpBpc,EAAAA,EAAAA,KAACE,EAAAA,EAAMmc,gBAAe,IAEpBC,GAAanB,GAPE,GAO+B,SAAW,SAG/DrY,EAAAA,EAAAA,YAAU,KACR,MAAMyZ,EAAeA,KACnB9D,GAAYhT,OAAO+W,YAAc,IAAI,EAIvC,OAFAD,IACA9W,OAAOgX,iBAAiB,SAAUF,GAC3B,KACL9W,OAAOiX,oBAAoB,SAAUH,EAAa,CACnD,GACA,KAEHzZ,EAAAA,EAAAA,YAAU,KACRmW,GAA6C,GAAvBpF,EAAWP,UAAe,GAC/C,CAACO,EAAWP,aACfxQ,EAAAA,EAAAA,YAAU,KACJ+Q,EAAW8I,aAAe9I,EAAW+I,sBACvC3Z,QAAQ4Z,MACN,yGAEFhJ,EAAW+I,qBAAsB,EACnC,GACC,CAAC/I,KACJ/Q,EAAAA,EAAAA,YAAU,KACJoX,KACFpF,IACIjB,EAAWR,WAAayF,GAAgBnQ,SAC1CmQ,GAAgBnQ,QAAQyJ,aAE5B,GACC,CAAC8H,GAAarG,EAAWR,UAAWyB,KACvChS,EAAAA,EAAAA,YAAU,KACRG,QAAQC,IAAI,mCAAqCiR,GACjDlR,QAAQC,IAAI,oCAAsCmR,GAClDpR,QAAQC,IAAI,mCAAoCxH,EAAc,GAC7D,CAACyY,EAAkBE,IAEtB,MAAMyI,GAAe,IAChB,IAAIC,IAAIpgB,EAAa4C,KAAKyd,GAAYA,EAAQzf,UAE7C0f,GAAkB,IACnB,IAAIF,IACLpgB,EACGsB,QAAQgX,GAAcpB,EAAWT,OAAO9U,SAAS2W,EAAU1X,SAC3DoT,SAASsE,GACRA,EAAUxX,UAAU8B,KAAK/B,GAAaA,EAASY,eAIjD8e,GAA6B,CACjC,CACEC,MAAO,4BACPphB,GAAI,YACJmI,MAAO,cAET,CACEiZ,MAAO,2BACPphB,GAAI,aACJmI,MAAO,eAET,CACEiZ,MAAO,+BACPphB,GAAI,YACJmI,MAAO,eAKLkZ,IAAyB9f,EAAAA,EAAAA,cAAY,KACzC,GAAIwb,GAAgBnQ,QAAS,CAC3B,MAAM0U,EAAgBvE,GAAgBnQ,QAAQ8J,mBAC9CxP,QAAQC,IAAI,kBAAmBma,GAC/B,MAAMC,EAAclM,GAAqBiM,EACzCrE,GAAsBsE,GACtBra,QAAQC,IAAI,wBAAyBoa,GACrCjD,IAAgB,EAClB,IACC,CAACjJ,KACEmM,IAAmBjgB,EAAAA,EAAAA,cACtB+f,IACCG,KACAva,QAAQC,IAAI,8BACZ,MAAMoa,EAAclM,GAAqBiM,EACzCrE,GAAsBsE,GACtBra,QAAQC,IAAI,wBAAyBoa,GACrCjD,IAAgB,EAAK,GAEvB,CAACjJ,KAEGqM,IAAmBngB,EAAAA,EAAAA,cAAasV,IACpB,IAAZA,GAAiBkG,GAAgBnQ,SACnCmQ,GAAgBnQ,QAAQ0J,WAC1B,GACC,IAGGuE,GAAgBA,KACpB+B,IAAqB1O,IAAUA,GAAK,EAIhCyT,GAAsBjD,IAC1B,GAAIrD,GACF,OAGF,GACEP,GAAYrR,MACTqL,GAAMA,EAAEvO,aAAeyR,EAAiB+C,IAAsB/a,KAGjE,OAGF,MAAM+f,EAAkB/H,EAAiB+C,IACnCO,EAAYoD,IAAmBqB,EAAgBpN,OAG/CiP,EAAqB,IACtB9G,GACH,CAAEvU,WAAYwZ,EAAgB/f,GAAI2S,OAAQ+L,IAE5ClB,GAAeoE,GAGf,MAAMC,EAAoBvG,EAAYmC,GAAiB,EAAIA,GAC3DC,GAAkBmE,GAGlB,MAAMC,EAAyBF,EAAmB1f,QAAQyZ,IACxD,MAAMla,EAAWuW,EAAiBrW,MAC/BC,GAAMA,EAAE5B,KAAO2b,EAAWpV,aAE7B,OAAOoV,EAAWhJ,SAAWlR,EAASkR,MAAM,IAC3CtO,OAGHuZ,GAAuBkE,GAGvB,MAAMC,EACJ/J,EAAiB3T,OAASwd,EAAoBC,EAGhDhE,GAA8BiE,GAG9BxE,GAA0BD,GAAyB,GAGnDmB,GAAY,CACVnD,YACAoD,iBACAsD,cAAejC,EAAgBpN,SAIjCiM,IAAc,EAAK,EAmBfqD,GAAqBA,KACrBlH,GAAuB/C,EAAiB3T,OAAS,EACnD2W,GAAmBD,GAAuB,GAE1CuD,IAAgB,EAClB,EAEItD,GAAsBjV,IAC1BsX,GAAwBtX,GACxB6Y,IAAc,GAEd,MAAMjD,EAAab,GAAYnZ,MAC5BmT,GAAMA,EAAEvO,aAAeyR,EAAiBjS,GAAO/F,KAGlD,GAAI2b,EAAY,CACd,MAAMoE,EAAkB/H,EAAiBjS,GACzC0Y,GAAY,CACVnD,UAAWK,EAAWhJ,SAAWoN,EAAgBpN,OACjD+L,eAAgB/C,EAAWhJ,OAC3BqP,cAAejC,EAAgBpN,SAEjCgM,GAAkBhD,EAAWhJ,OAC/B,MACE8L,GAAY,MACZE,GAAkB,KACpB,EAIIuD,GAAkBA,KACtB1F,GAAc,GACdtV,QAAQC,IAAI,kBACZD,QAAQC,IAAI,sBAAuBxH,GACnCuH,QAAQC,IAAI,gCAAkCiR,GAC9ClR,QAAQC,IAAI,iCAAmCmR,GAC/C8F,IAAe,GACfrF,GAAiB,EAEboJ,GAAkBA,KACtB3F,GAAc,GACd4B,IAAe,GACfE,IAAgB,GAChBjB,GAAwB,GACxBG,GAAe,IACfE,GAAkB,GAClBe,GAAY,MACZlB,GAA0B,GAC1BX,IAAoB,GACpB+B,GAAkB,MAClBC,IAAc,EAAM,EAoBhBE,GAAuBsD,IACvBA,IACFX,KACAJ,KACA7B,KACAK,KACAvB,IAAgB,GAChBU,KACAxC,GAAc,GACdtV,QAAQC,IAAI,oBAEdR,IAAe,EAAM,EAEjB8a,GAAgBA,KACpBjQ,IAAmB,GACnBE,IAAsB,GACtBkL,IAAoB,GACpBhL,IAAyB,GACzBpM,IAAa,EAAM,EAEf6c,GAA2BA,IACxBrK,EAAiBvO,MACrBhI,IACEqZ,GAAYrR,MAAMkJ,GAAWA,EAAOpM,aAAe9E,EAASzB,OAInE,GAAI+d,GACF,OACE9Z,EAAAA,EAAAA,KAAAoC,EAAAA,SAAA,CAAArC,UACEC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACqe,EAAiB,CAChB5e,qBAAsBA,GACtBC,wBAAyB4P,GACzB3P,0BAA2BA,GAC3BC,8BAA+BA,GAC/BlE,cAAeA,EACfJ,2BAA4BA,QAMtC,GAAI2e,GACF,OACEja,EAAAA,EAAAA,KAACse,EAAuB,CACtBxiB,kBAAmBA,EACnB2D,qBAAsBA,GACtBE,0BAA2BA,KAIjC,GAAIoa,GACF,OACE/Z,EAAAA,EAAAA,KAACue,EAAqB,CACpB3hB,gBAAiBA,EACjB6C,qBAAsBA,GACtB6P,uBAAwBA,GACxBnS,WAAYA,GACZC,cAAeA,GACfsB,cAAeA,GACfrB,gBAAiBA,GACjBO,gBAAiBA,GACjBW,eAAgBA,GAChBC,WAAYA,GACZC,mBAAoBA,GACpBxB,UAAWA,EACXvB,cAAeA,EACfJ,2BAA4BA,EAC5BkQ,iBAAkBA,GAClBC,oBAAqBA,KAI3B,GAAIuO,GACF,OACEha,EAAAA,EAAAA,KAACwe,EAA2B,CAC1B/e,qBAAsBA,GACtBG,8BAA+BA,GAC/BhD,gBAAiBA,EACjBtB,2BAA4BA,EAC5B4D,oBAAqBA,GACrBD,iBAAkBA,GAClBI,yBAA0BA,GAC1BzB,gBAAiBA,GACjBW,eAAgBA,GAChBE,mBAAoBA,GACpBxB,UAAWA,EACXvB,cAAeA,EACf8P,iBAAkBA,GAClBC,oBAAqBA,KAI3B,GAAI2O,GACF,OACEpa,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACxCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,CAAEob,GAAgB,UAE9Ctb,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBACfD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,cAAaC,SAAEkb,MAC/Bjb,EAAAA,EAAAA,KAAA,MAAIF,UAAU,eAAcC,SAAE8T,EAAWT,UAEzCpT,EAAAA,EAAAA,KAAA,QAAMF,UAAU,qBAAoBC,SAAC,8BAI3CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAClCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAACE,EAAAA,EAAMue,2BAA0B,KACjCze,EAAAA,EAAAA,KAAA,KAAAD,SAAIyZ,SAEN3Z,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAACE,EAAAA,EAAMwe,uBAAsB,KAC7B1e,EAAAA,EAAAA,KAAA,KAAAD,SAAI2Z,SAEN7Z,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAACE,EAAAA,EAAMye,QAAO,KACd3e,EAAAA,EAAAA,KAAA,KAAAD,SAAI6Z,YAGR/Z,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,SAAEoc,MAC9Bnc,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,mBAAiBuc,GAAW,+BAGnCzc,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UAC1BC,EAAAA,EAAAA,KAACE,EAAAA,EAAM2S,mBAAkB,OAE3BhT,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAK,GAAG0G,KAAKC,MAAM2U,GAAiB,QAClCA,GAAiB,SAEnBrb,EAAAA,EAAAA,KAAA,KAAAD,SAAG,0CAKXF,EAAAA,EAAAA,MAAA,UACEI,QAASA,KACPoa,IAAgB,GAChBC,IAAc,GACdlB,GAAwB,GACxBb,GAAc,EAAK,EACnBxY,SAAA,EAEFC,EAAAA,EAAAA,KAACE,EAAAA,EAAM0e,gBAAe,IAAG,0CAG7B5e,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAC9BF,EAAAA,EAAAA,MAAA,UAAQC,UAAU,oBAAoBG,QAASie,GAAgBne,SAAA,EAC7DC,EAAAA,EAAAA,KAACE,EAAAA,EAAM2e,eAAc,CAACrb,KAAM,MAC5BxD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gCAQjB,IAAKma,GACH,OACEra,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACnCC,EAAAA,EAAAA,KAACE,EAAAA,EAAMqP,oBAAmB,CACxBzP,UAAU,4CACVG,QAASA,IAAMR,IAAqB,QAGxCO,EAAAA,EAAAA,KAACkF,EAAAA,EAAY,KACbrF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBACJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCC,SAAA,EAChDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,QAAOC,SAAC,cACrBC,EAAAA,EAAAA,KAAA,UACEjE,GAAG,WACHR,KAAK,WACL4I,SAAWC,IACTgR,EAAoBhR,GACpBoQ,EAAoB,MAAM,EAE5BsK,aAAc7L,EAAcG,OAAO,GAAGrT,SAErC+c,GAAavd,KAAI,CAAChC,EAAOuE,KACxB9B,EAAAA,EAAAA,KAAA,UAAoBkE,MAAO3G,EAAMwC,SAC9BxC,GADUuE,WAOnBjC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,QAAOC,SAAC,eACrBF,EAAAA,EAAAA,MAAA,UACE9D,GAAG,YACHR,KAAK,YACL4I,SAAWC,GAAMoQ,EAAoBpQ,EAAEC,OAAOH,OAC9CA,MAAOqQ,EAAiBxU,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQkE,MAAM,MAAKnE,SAAC,QACnBkd,GAAgB1d,KAAI,CAACnB,EAAU0D,KAC9B9B,EAAAA,EAAAA,KAAA,UAAoBkE,MAAO9F,EAAS2B,SACjC3B,GADU0D,eAOrBjC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,UACEI,QAASwV,EACT3V,UAAW,kBACT+T,EAAWN,mBAAqB,UAAY,IAC3CxT,SAAA,CAEF8T,EAAWN,oBACVvT,EAAAA,EAAAA,KAACE,EAAAA,EAAM6e,cAAa,CAACvb,KAAM,MAE3BxD,EAAAA,EAAAA,KAACE,EAAAA,EAAM8e,SAAQ,CAACxb,KAAM,MAExBxD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wBAGLF,EAAAA,EAAAA,MAAA,UACEI,QAASyV,EACT5V,UAAW,kBACT+T,EAAWL,sBAAwB,UAAY,IAC9CzT,SAAA,EAEF8T,EAAWL,uBACVxT,EAAAA,EAAAA,KAACE,EAAAA,EAAM+e,oBAAmB,CAACzb,KAAM,OAInCxD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4BAGPF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,QAAOC,SAAC,oCACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,UACEC,QAAS8V,EACTjW,UAAW,6BACT2U,EAA4B,UAAY,IACvC1U,SACJ,SAGDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UACEC,QAASA,IAAM2V,EAAiB,QAChC9V,UAAW,kBACT+T,EAAWV,iBAAiB7U,SAAS,QACjC,UACA,IACHyB,SACJ,UAGDC,EAAAA,EAAAA,KAAA,UACEC,QAASA,IAAM2V,EAAiB,UAChC9V,UAAW,kBACT+T,EAAWV,iBAAiB7U,SAAS,UACjC,UACA,IACHyB,SACJ,YAGDC,EAAAA,EAAAA,KAAA,UACEC,QAASA,IAAM2V,EAAiB,QAChC9V,UAAW,kBACT+T,EAAWV,iBAAiB7U,SAAS,QACjC,UACA,IACHyB,SACJ,mBAMPF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4BACHC,EAAAA,EAAAA,KAAA,SACEmB,KAAK,SACLpF,GAAG,SACH+D,UAAU,uBACVoE,MAAO2P,EAAWX,cAClB/O,SAAU6R,EACVkJ,OAAQ9I,KAEVpW,EAAAA,EAAAA,KAAA,KAAGF,UAAU,4BAA2BC,SAAC,cACzCC,EAAAA,EAAAA,KAAA,KAAAD,SAAI4U,QAEN3U,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,UAC7BF,EAAAA,EAAAA,MAAA,UACEI,QAAS0V,EACT7V,UAAW,kBACT+T,EAAWJ,oBAAsB,UAAY,IAC5C1T,SAAA,CAEF8T,EAAWJ,qBACVzT,EAAAA,EAAAA,KAACE,EAAAA,EAAMif,eAAc,CAAC3b,KAAM,MAE5BxD,EAAAA,EAAAA,KAACE,EAAAA,EAAMkf,uBAAsB,CAAC5b,KAAM,MAEtCxD,EAAAA,EAAAA,KAAA,KAAAD,SACG8T,EAAWJ,oBACR,2BACA,kCAKVzT,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,MAAA,UACE9D,GAAG,gBACHkE,QAASuV,EACT1V,UAAU,gBAAeC,SAAA,EAEzBC,EAAAA,EAAAA,KAACE,EAAAA,EAAMmf,UAAS,CAAC7b,KAAM,MACvBxD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6BAITF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0BACJC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,QAAOC,SAAC,8CACrBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBAAwBC,SACpCmd,GAA2B3d,KAAKkP,IAC/B5O,EAAAA,EAAAA,MAAA,OAAqBC,UAAU,aAAYC,SAAA,EACzCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,SAAQC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,SACEmB,KAAK,WACLme,QAASzL,EAAWF,mBAAqBlF,EAAOvK,MAChDC,SAAUA,IACRsS,EAA6BhI,EAAOvK,UAGxClE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,uBAGpBE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAE0O,EAAO0O,UAb/B1O,EAAO1S,SAiBrBiE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0BAAyBC,UACtCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,SAAQC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,SACEmB,KAAK,WACLme,QAASzL,EAAWH,wBACpBvP,SAAUqS,KAEZxW,EAAAA,EAAAA,KAAA,QAAMF,UAAU,uBAGpBE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAC,mDAKnCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,SAAQC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,SACEmB,KAAK,WACLme,QAASzL,EAAWR,UACpBlP,SAAUkS,KAEZrW,EAAAA,EAAAA,KAAA,QAAMF,UAAU,uBAGpBE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAC,kBAIhC8T,EAAWR,YACVxT,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gBACHC,EAAAA,EAAAA,KAAA,SACEmB,KAAK,SACLpF,GAAG,SACH+D,UAAU,uBACVoE,MAAO2P,EAAWP,UAClBnP,SAAUmS,EACV4I,OAAQ3I,KAEVvW,EAAAA,EAAAA,KAAA,KAAAD,SAAG,cAGF,QAITC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACnCF,EAAAA,EAAAA,MAAA,UAAQC,UAAU,oBAAoBG,QAASge,GAAgBle,SAAA,EAC7DC,EAAAA,EAAAA,KAACE,EAAAA,EAAM2e,eAAc,CAACrb,KAAM,MAC5BxD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gCAOf,GAAgC,IAA5BgU,EAAiB3T,OACnB,OAAOJ,EAAAA,EAAAA,KAAA,OAAAD,SAAK,yBAEd,MAAMmO,QAC6D7E,IAAjEvN,EAAkBiY,EAAiB+C,IAAsB/a,IAErD6R,GACJlS,EAAcqY,EAAiB+C,IAAsB/a,IAEjDoS,GAAcD,GAChBhO,EAAAA,EAAMkO,SACNlO,EAAAA,EAAMmO,SAEJR,GAAWD,GACb1N,EAAAA,EAAM4N,aACN5N,EAAAA,EAAM6N,aAEJC,GACJ1S,EAA2BkK,MAAMlG,GAC/BA,EAAW7D,MAAM6C,SAASwd,GAAgB/f,MAGxCkS,GAAiBD,GACnB9N,EAAAA,EAAM+F,eACN/F,EAAAA,EAAMc,WAEV,OACEnB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,KAACuf,EAAY,CACX5I,UAAW+B,GACX9B,cAAeA,GACf7C,iBAAkBA,EAClB8C,YAAaA,GACbC,qBAAsBA,GACtBC,mBAAoBA,GACpBlD,WAAYA,EACZmD,WAAYA,KAEbvU,KACCzC,EAAAA,EAAAA,KAACuE,EAAAA,EAAuB,CACtBC,MAAM,EACNC,eAAgBA,KACd/B,GAAe,MACXoW,GAAgBnQ,SAClBmQ,GAAgBnQ,QAAQ4J,aAC1B,EAEF/U,SAAU2F,GAAaV,IAAajF,SACpC6F,QAASF,GAAaV,IAAaY,WAGvCxD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAACE,EAAAA,EAAMyD,eAAc,CACnB7D,UAAU,wBACVG,QAASA,KACH+W,IACFqD,IAAgB,GAChBC,IAAc,GACd/B,GAAc,KAEd7V,GAAe,cACXoW,GAAgBnQ,SAClBmQ,GAAgBnQ,QAAQ2J,aAE5B,EAEF9O,KAAM,MAERxD,EAAAA,EAAAA,KAAA,UAAQC,QAAS2W,GAAe9W,UAAU,gBAAeC,UACvDC,EAAAA,EAAAA,KAACE,EAAAA,EAAMsf,UAAS,UAGpB3f,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBiX,IAAcnD,EAAWR,YACzBrT,EAAAA,EAAAA,KAACyf,EAAY,CACX7V,IAAKkP,GACL1H,mBAAoBA,GACpBC,aAAcoM,GACdnM,OAAQ8L,GACR1L,UAAW6L,MAIfvd,EAAAA,EAAAA,KAAA,YAAUkE,MAAO6X,GAAoB2D,IAAI,SAEzC1f,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CACGsZ,GAAuB,MAAItF,EAAiB3T,gBAInDP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gCAA+BC,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,MAAAD,SAAK+b,GAAgBte,WACpBse,GAAgBxN,WACftO,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAa,CAACC,IAAK8Z,GAAgBxN,aAGvCwN,GAAgBvN,QACfvO,EAAAA,EAAAA,KAACmC,EAAU,CAACd,SAAUya,GAAgBvN,SAExCvO,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAmBC,SAC/B+b,GAAgBtN,QAAQjP,KAAI,CAACkP,EAAQ3M,KACpC,MAAMuV,EAAYkD,IAAY9L,IAAW8L,GAASwD,cAC5C4B,EAAalF,KAAmBhM,EAChCmR,EAAUrF,IAAYoF,IAAetI,EAE3C,OACErX,EAAAA,EAAAA,KAAA,OACEF,UAAU,iBAEV2D,MAAO,CACLsU,OACEX,IACAP,GAAYrR,MACTqL,GACCA,EAAEvO,aACFyR,EAAiB+C,IAAsB/a,MAE3Cib,IACgC,eAAhCnD,EAAWF,iBACP,cACA,UACNtO,gBAAiB2R,GACbH,GAAYrR,MACTqL,GACCA,EAAEvO,aACFyR,EAAiB+C,IAAsB/a,KAEzC0S,IAAWqN,GAAgBpN,OACzB,wBACAiR,EACA,sBACA,0BACF,0BAC8B,eAAhC9L,EAAWF,iBACXgM,EACE,kCACA,0BAC8B,eAAhC9L,EAAWF,iBACXlF,IAAWqN,GAAgBpN,OACzB,wBACA,0BACF2I,EACA,wBACAuI,EACA,sBACAD,IAAevI,GACf,kCACA,0BACJzI,aAAc,MACdC,WAAY,4CAEd3O,QAASA,KAEJmX,IACAP,GAAYrR,MACVqL,GAAMA,EAAEvO,aAAewZ,GAAgB/f,MAEzCib,IAC+B,eAAhCnD,EAAWF,mBAEX+G,GAAkBjM,GACdoF,EAAWH,yBACbgK,GAAmBjP,GAEvB,EACA1O,SAED+b,GAAgBxN,UACftO,EAAAA,EAAAA,KAAC+B,EAAAA,EAAa,CAACC,IAAKyM,IAEpBA,GA9DG3M,EAgED,UAMdjC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACxByY,IACCxY,EAAAA,EAAAA,KAACE,EAAAA,EAAM2f,eAAc,CACnB/f,UAAU,OACV0D,KAAM,GACNC,MAAO,CACLjI,MACEwS,IACAJ,GACI,2BACA,QACNlK,YAAa,GACbmL,UACEb,IACAJ,GACI,uCACA,OACNgB,WACE,qEAEJ3O,QAASA,KACP4Y,IAAqB5O,IAAUA,GAAK,KAIxCpK,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAArC,SAAA,EACEC,EAAAA,EAAAA,KAACiO,GAAc,CACbnO,UAAU,OACV0D,KAAM,GACNC,MAAO,CACLjI,MAAOwS,GACH,2BACA,QACJtK,YAAa,GACbmL,UAAWb,GACP,uCACA,OACJY,WACE,qEAEJ3O,QAASA,IAAM0N,IAAyB,MAE1C3N,EAAAA,EAAAA,KAAC8O,EAAiB,CAChBpN,OAAQgM,GACR/L,QAASA,IAAMgM,IAAyB,GACxCrL,WAAYyR,EAAiB+C,IAAsB/a,MAGrDiE,EAAAA,EAAAA,KAAC6N,GAAQ,CACP/N,UAAU,OACV0D,KAAM,GACNC,MAAO,CACLjI,MAAOoS,GACH,2BACA,QACJlK,YAAa,GACbmL,UAAWjB,GACP,uCACA,OACJgB,WACE,qEAEJ3O,QAASA,IAAMsN,IAAmB,MAEpCvN,EAAAA,EAAAA,KAAC+O,EAAW,CACVrN,OAAQ4L,GACR3L,QAASA,IAAM4L,IAAmB,GAClCjL,WAAYyR,EAAiB+C,IAAsB/a,GACnDiT,SAAUjR,OAAOkR,KAAKvT,MAExBsE,EAAAA,EAAAA,KAACmO,GAAW,CACVrO,UAAU,OACV0D,KAAM,GACNC,MAAO,CACLC,YAAa,GACblI,MAAO0S,GACH,2BACA,QACJW,UAAWX,GACP,uCACA,OACJU,WACE,qEAEJ3O,QAASA,IAAMwN,IAAsB,MAEvCzN,EAAAA,EAAAA,KAACkP,EAAc,CACbxN,OAAQ8L,GACR7L,QAASA,IAAM8L,IAAsB,GACrCnL,WAAYyR,EAAiB+C,IAAsB/a,GACnDyP,iBAAkBA,GAClBC,oBAAqBA,QAM1B+M,KACC3Y,EAAAA,EAAAA,MAAA,OACEC,UAAW,yBACT8Y,GAAqB,OAAS,IAC7B7Y,SAAA,EAEHC,EAAAA,EAAAA,KAAA,OACEF,UAAW,uCACT8Y,GAAqB,OAAS,IAEhC3Y,QAASA,KACP4Y,IAAoB,EAAM,KAG9BhZ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAACiO,GAAc,CACbnO,UAAU,OACV0D,KAAM,GACNC,MAAO,CACLjI,MAAOwS,GACH,2BACA,QACJtK,YAAa,GACbmL,UAAWb,GACP,uCACA,OACJY,WAAY,yCAEd3O,QAASA,IAAM0N,IAAyB,MAE1C3N,EAAAA,EAAAA,KAAC8O,EAAiB,CAChBpN,OAAQgM,GACR/L,QAASA,IAAMgM,IAAyB,GACxCrL,WAAYyR,EAAiB+C,IAAsB/a,SAGvD8D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAC6N,GAAQ,CACP/N,UAAU,OACV0D,KAAM,GACNC,MAAO,CACLjI,MAAOoS,GACH,2BACA,QACJlK,YAAa,GACbmL,UAAWjB,GACP,uCACA,OACJgB,WACE,qEAEJ3O,QAASA,IAAMsN,IAAmB,MAEpCvN,EAAAA,EAAAA,KAAC+O,EAAW,CACVrN,OAAQ4L,GACR3L,QAASA,IAAM4L,IAAmB,GAClCjL,WAAYyR,EAAiB+C,IAAsB/a,GACnDiT,SAAUjR,OAAOkR,KAAKvT,SAG1BsE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,UACzBC,EAAAA,EAAAA,KAACE,EAAAA,EAAMI,QAAO,CACZR,UAAU,OACV0D,KAAM,GACNC,MAAO,CAAEC,YAAa,eAOhC7D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAACE,EAAAA,EAAM4f,eAAc,CACnBhgB,UAAU,cACVG,QAASA,IACPmX,QAn1BNN,GAAuB,EACzBC,GAAmBD,GAAuB,GAE1CuD,IAAgB,SARdvD,GAAuB,GACzBC,GAAmBD,GAAuB,IAy1BpC9D,SAAUgJ,GACVxY,KAAM,MAGR3D,EAAAA,EAAAA,MAAA,QAAMC,UAAU,SAAQC,SAAA,CACrB+W,GAAuB,EAAE,MAAI/C,EAAiB3T,WAEjDJ,EAAAA,EAAAA,KAACE,EAAAA,EAAM6f,kBAAiB,CACtBjgB,UAAU,aACVG,QAASA,IACPmX,GAAa4G,UAz2BnBlH,GAAuB/C,EAAiB3T,OAAS,GACnD2W,GAAmBD,GAAuB,IA02BpC9D,SAAUiJ,GACVzY,KAAM,SAIV3D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BiX,IACgC,eAAhCnD,EAAWF,kBACsB,eAAhCE,EAAWF,kBACVkD,GAAYrR,MACTkJ,GACCA,EAAOpM,aACPyR,EAAiB+C,IAAsB/a,QAE7C8D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BC,SAAA,EAC3CF,EAAAA,EAAAA,MAAA,UACEC,UAAU,qBACVG,QAASA,IAAMsB,IAAa,GAAMxB,SAAA,EAElCC,EAAAA,EAAAA,KAACE,EAAAA,EAAMiP,gBAAe,CAAC3L,KAAMgV,GAAW,GAAK,MAC3CA,IAAY,kBAGhBxY,EAAAA,EAAAA,KAACoP,EAAgB,CACf1N,OAAQJ,GACRpF,QAAS6X,EAAiB+C,IAAsBzH,YAChD1N,QAASA,IAAMJ,IAAa,SAKlCvB,EAAAA,EAAAA,KAAA,UACEF,UAAU,gBACVG,QAASA,KACF+W,KAE+B,eAAhCnD,EAAWF,kBACXyD,GAEI6E,GA70BdmC,MACFtF,GAAgBnQ,QAAQ2J,aACxB5P,GAAe,gBAEf8a,KACAJ,KACA7B,KACAK,KACAvB,IAAgB,GAChBU,KACAxC,GAAc,GACdtV,QAAQC,IAAI,mBACZD,QAAQC,IAAI,yBAA0BxH,GACtCuH,QAAQC,IAAI,mCAAqCiR,GACjDlR,QAAQC,IAAI,oCAAsCmR,IAk0BpC2J,KAGFN,GAAmBjD,IAEvB,EAEFzH,SACEgE,IACiC,eAAhCnD,EAAWF,kBACVuI,GACHnc,SAEAyY,GACCxB,IACEhX,EAAAA,EAAAA,KAACE,EAAAA,EAAM2e,eAAc,IACa,eAAhChL,EAAWF,kBAAqCyD,GAClD6E,IACEjc,EAAAA,EAAAA,KAACE,EAAAA,EAAM4a,gBAAe,CAACtX,KAAM,MAE7BxD,EAAAA,EAAAA,KAACE,EAAAA,EAAM8f,iBAAgB,CAACxc,KAAM,KAE9BqT,GAAYrR,MACXkJ,GACCA,EAAOpM,aACPyR,EAAiB+C,IAAsB/a,MAE3CiE,EAAAA,EAAAA,KAACE,EAAAA,EAAM8f,iBAAgB,CAACxc,KAAM,KAE9B,IAEAwT,GACF,gBACkC,eAAhCnD,EAAWF,kBAAqCyD,GAClD6E,GACE,SAEA,OAEApF,GAAYrR,MACXkJ,GACCA,EAAOpM,aACPyR,EAAiB+C,IAAsB/a,KAE3C,OAEA,0BAKJ,EC90CV,EARiBmC,IAAwB,IAAvB,cAAEqa,GAAera,EACjC,OACE8B,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACigB,EAAI,CAAC1H,cAAeA,KACjB,C,+ECFV,MAsEA,EAtEqBrT,KACnB,MAAOgb,EAAUC,IAAerjB,EAAAA,EAAAA,UAAS,IAyCzC,OAFA2I,OAAOC,iBArCa,SAClB0a,EACAC,GAGI,IAFJ7kB,EAAK4N,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,UACRkX,EAASlX,UAAAhJ,OAAA,QAAAiJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,QAGZ,MAAMmX,EAAa,CACjBxkB,GAAIuK,KAAKD,MACT/C,KAAM8c,EACNI,SAAS,EACThlB,MAAOA,EACP8kB,UAAWA,GAIbH,GAAaM,GAAiB,IAAIA,EAAcF,KAGhD1iB,YAAW,KACTsiB,GAAaM,GACXA,EAAalhB,KAAKmhB,GAChBA,EAAQ3kB,KAAOwkB,EAAWxkB,GACtB,IAAK2kB,EAASF,SAAS,GACvBE,MAIR7iB,YAAW,KACTsiB,GAAaM,GACXA,EAAaxiB,QAAQyiB,GAAYA,EAAQ3kB,KAAOwkB,EAAWxkB,MAC5D,GACA,IAAI,GACNskB,EACL,GAMErgB,EAAAA,EAAAA,KAAA,OAAAD,UAEEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,SAC7BmgB,EAAS3gB,KAAKmhB,IACb7gB,EAAAA,EAAAA,MAAA,OAEEC,UAAW,kBACT4gB,EAAQF,QAAU,eAAiB,eAErC/c,MAAO,CAAE4B,gBAAiBqb,EAAQllB,MAAOA,MAAOklB,EAAQJ,WAAavgB,SAAA,EAErEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBAAoBC,UACjCC,EAAAA,EAAAA,KAAC2gB,EAAAA,IAA0B,OAG7B3gB,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gBAAeC,SAAE2gB,EAAQpd,WAXnCod,EAAQ3kB,SAgBf,C","sources":["data/userLocalDatabase.js","data/usersCommentsBank.js","tests/Quiz/hooks/useNoteDashboard.js","tests/Quiz/hooks/usePrivateCollectionDashboard.js","tests/Quiz/Dashboard/practiceDashboard.js","components/EmptyState/EmptyState.js","tests/Quiz/ImageModal/ImageModal.js","tests/Quiz/ExplanationModal.js","tests/Quiz/privateNote.js","tests/Quiz/privateCollections.js","utils/formatTimeStamp.js","tests/Quiz/CommentSection/CommentList.js","tests/Quiz/CommentSection/CommentSection.js","tests/Quiz/QuestionViewer.js","tests/Quiz/Dashboard/privateNotesDashboard.js","tests/Quiz/Dashboard/privateCollectionsDashboard.js","tests/Quiz/Dashboard/publicCommentsDashboard.js","components/EternalTimer/EternalTimer.js","tests/Quiz/hooks/useQuizConfig.js","tests/Quiz/QuestionList.js","tests/Quiz/QuizApp.js","pages/QuizZone/QuizZone.js","components/MessagePopup/MessagePopup.js"],"sourcesContent":["export const userPrivateCollectionsBank = [\r\n  {\r\n    name: \"Jasmin Collection\",\r\n    color: \"#FF4D4D\",\r\n    items: [\"question-1\", \"question-3\", \"question-4\"],\r\n  },\r\n  {\r\n    name: \"Tricky questions\",\r\n    color: \"#FF4D4D\",\r\n    items: [],\r\n  },\r\n];\r\n\r\nexport const userNotesBank = {\r\n  \"question-1\": \"This is a sample Note for question-1\",\r\n  \"question-2\": \"Another sample note for question-2\",\r\n};\r\n\r\nexport const userQuestionData = {\r\n  wrongAnswers: [\"question-1\", \"question-2\"],\r\n  seenQuestions: [\"question-1\", \"question-4\"],\r\n};\r\n\r\nexport const userPreviousTests = [];\r\n","export const usersCommentsBank = {\r\n  \"question-1\": [\r\n    {\r\n      id: \"comment1\",\r\n      author: \"Péter\",\r\n      avatar: \"https://i.pravatar.cc/150?img=3\",\r\n      content: \"Ez egy példa komment.\",\r\n      timestamp: \"2023-10-01T12:00:00Z\",\r\n      likes: 5,\r\n      dislikes: 1,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [\r\n        {\r\n          id: \"reply1\",\r\n          author: \"Anna\",\r\n          avatar: \"https://i.pravatar.cc/150?img=5\",\r\n          content: \"Ez egy válasz Péter kommentjére.\",\r\n          timestamp: \"2023-10-01T12:30:00Z\",\r\n          likes: 2,\r\n          dislikes: 0,\r\n          liked: false,\r\n          disliked: false,\r\n          edited: false,\r\n        },\r\n        {\r\n          id: \"reply2\",\r\n          author: \"János\",\r\n          avatar: \"https://i.pravatar.cc/150?img=7\",\r\n          content: \"Én is hozzátennék valamit!\",\r\n          timestamp: \"2023-10-01T13:00:00Z\",\r\n          likes: 1,\r\n          dislikes: 0,\r\n          liked: false,\r\n          disliked: false,\r\n          edited: false,\r\n        },\r\n      ],\r\n      edited: false,\r\n    },\r\n    {\r\n      id: \"comment2\",\r\n      author: \"Katalin\",\r\n      avatar: \"https://i.pravatar.cc/150?img=9\",\r\n      content: \"Ez egy másik komment.\",\r\n      timestamp: \"2023-10-02T10:00:00Z\",\r\n      likes: 3,\r\n      dislikes: 0,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [],\r\n      edited: false,\r\n    },\r\n  ],\r\n  \"question-2\": [\r\n    {\r\n      id: \"comment3\",\r\n      author: \"Gábor\",\r\n      avatar: \"https://i.pravatar.cc/150?img=11\",\r\n      content: \"Ez egy másik kérdéshez tartozó komment.\",\r\n      timestamp: \"2023-10-03T14:00:00Z\",\r\n      likes: 0,\r\n      dislikes: 0,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [\r\n        {\r\n          id: \"reply3\",\r\n          author: \"Eszter\",\r\n          avatar: \"https://i.pravatar.cc/150?img=13\",\r\n          content: \"Érdekes hozzászólás!\",\r\n          timestamp: \"2023-10-03T14:30:00Z\",\r\n          likes: 1,\r\n          dislikes: 0,\r\n          liked: false,\r\n          disliked: false,\r\n          edited: false,\r\n        },\r\n      ],\r\n      edited: false,\r\n    },\r\n    {\r\n      id: \"comment4\",\r\n      author: \"Zsófia\",\r\n      avatar: \"https://i.pravatar.cc/150?img=15\",\r\n      content: \"Nagyon tetszik ez a kérdés!\",\r\n      timestamp: \"2023-10-03T15:00:00Z\",\r\n      likes: 2,\r\n      dislikes: 0,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [],\r\n      edited: false,\r\n    },\r\n  ],\r\n  \"question-3\": [\r\n    {\r\n      id: \"comment5\",\r\n      author: \"Balázs\",\r\n      avatar: \"https://i.pravatar.cc/150?img=17\",\r\n      content: \"Mi a véleményetek erről?\",\r\n      timestamp: \"2023-10-04T09:00:00Z\",\r\n      likes: 4,\r\n      dislikes: 1,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [\r\n        {\r\n          id: \"reply4\",\r\n          author: \"Dóra\",\r\n          avatar: \"https://i.pravatar.cc/150?img=19\",\r\n          content: \"Szerintem nagyon jó!\",\r\n          timestamp: \"2023-10-04T09:30:00Z\",\r\n          likes: 3,\r\n          dislikes: 0,\r\n          liked: false,\r\n          disliked: false,\r\n          edited: false,\r\n        },\r\n        {\r\n          id: \"reply5\",\r\n          author: \"Tamás\",\r\n          avatar: \"https://i.pravatar.cc/150?img=21\",\r\n          content: \"Nem értek egyet.\",\r\n          timestamp: \"2023-10-04T10:00:00Z\",\r\n          likes: 0,\r\n          dislikes: 1,\r\n          liked: false,\r\n          disliked: false,\r\n          edited: false,\r\n        },\r\n      ],\r\n      edited: false,\r\n    },\r\n    {\r\n      id: \"comment6\",\r\n      author: \"Erika\",\r\n      avatar: \"https://i.pravatar.cc/150?img=23\",\r\n      content: \"Én is így gondolom.\",\r\n      timestamp: \"2023-10-04T11:00:00Z\",\r\n      likes: 2,\r\n      dislikes: 0,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [],\r\n      edited: false,\r\n    },\r\n  ],\r\n  \"question-4\": [\r\n    {\r\n      id: \"comment99\",\r\n      author: \"Péter\",\r\n      avatar: \"https://i.pravatar.cc/150?img=3\",\r\n      content: \"Ez egy példa komment.\",\r\n      timestamp: \"2023-10-01T12:00:00Z\",\r\n      likes: 5,\r\n      dislikes: 1,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [],\r\n    },\r\n    {\r\n      id: \"comment7\",\r\n      author: \"István\",\r\n      avatar: \"https://i.pravatar.cc/150?img=25\",\r\n      content: \"Ez egy nagyon hasznos információ.\",\r\n      timestamp: \"2023-10-05T08:00:00Z\",\r\n      likes: 6,\r\n      dislikes: 0,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [\r\n        {\r\n          id: \"reply6\",\r\n          author: \"Krisztina\",\r\n          avatar: \"https://i.pravatar.cc/150?img=27\",\r\n          content: \"Köszönöm a tippet!\",\r\n          timestamp: \"2023-10-05T08:30:00Z\",\r\n          likes: 1,\r\n          dislikes: 0,\r\n          liked: false,\r\n          disliked: false,\r\n          edited: false,\r\n        },\r\n      ],\r\n      edited: false,\r\n    },\r\n    {\r\n      id: \"comment8\",\r\n      author: \"László\",\r\n      avatar: \"https://i.pravatar.cc/150?img=29\",\r\n      content: \"Én is ezt tapasztaltam.\",\r\n      timestamp: \"2023-10-05T09:00:00Z\",\r\n      likes: 3,\r\n      dislikes: 0,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [],\r\n      edited: false,\r\n    },\r\n  ],\r\n  \"question-5\": [\r\n    {\r\n      id: \"comment9\",\r\n      author: \"Mária\",\r\n      avatar: \"https://i.pravatar.cc/150?img=31\",\r\n      content: \"Valaki segítene nekem?\",\r\n      timestamp: \"2023-10-06T10:00:00Z\",\r\n      likes: 1,\r\n      dislikes: 0,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [\r\n        {\r\n          id: \"reply7\",\r\n          author: \"Gergő\",\r\n          avatar: \"https://i.pravatar.cc/150?img=33\",\r\n          content: \"Persze, miben segíthetek?\",\r\n          timestamp: \"2023-10-06T10:30:00Z\",\r\n          likes: 1,\r\n          dislikes: 0,\r\n          liked: false,\r\n          disliked: false,\r\n          edited: false,\r\n        },\r\n      ],\r\n      edited: false,\r\n    },\r\n    {\r\n      id: \"comment10\",\r\n      author: \"Judit\",\r\n      avatar: \"https://i.pravatar.cc/150?img=35\",\r\n      content: \"Én is keresem a választ.\",\r\n      timestamp: \"2023-10-06T11:00:00Z\",\r\n      likes: 0,\r\n      dislikes: 0,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [],\r\n      edited: false,\r\n    },\r\n  ],\r\n  \"question-6\": [\r\n    {\r\n      id: \"comment11\",\r\n      author: \"Róbert\",\r\n      avatar: \"https://i.pravatar.cc/150?img=37\",\r\n      content: \"Ez egy nagyon érdekes téma.\",\r\n      timestamp: \"2023-10-07T12:00:00Z\",\r\n      likes: 7,\r\n      dislikes: 0,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [\r\n        {\r\n          id: \"reply8\",\r\n          author: \"Szilvia\",\r\n          avatar: \"https://i.pravatar.cc/150?img=39\",\r\n          content: \"Teljesen egyetértek!\",\r\n          timestamp: \"2023-10-07T12:30:00Z\",\r\n          likes: 2,\r\n          dislikes: 0,\r\n          liked: false,\r\n          disliked: false,\r\n          edited: false,\r\n        },\r\n        {\r\n          id: \"reply9\",\r\n          author: \"Bence\",\r\n          avatar: \"https://i.pravatar.cc/150?img=41\",\r\n          content: \"Én is így gondolom.\",\r\n          timestamp: \"2023-10-07T13:00:00Z\",\r\n          likes: 1,\r\n          dislikes: 0,\r\n          liked: false,\r\n          disliked: false,\r\n          edited: false,\r\n        },\r\n      ],\r\n      edited: false,\r\n    },\r\n    {\r\n      id: \"comment12\",\r\n      author: \"Anikó\",\r\n      avatar: \"https://i.pravatar.cc/150?img=43\",\r\n      content: \"Köszönöm a részletes választ!\",\r\n      timestamp: \"2023-10-07T14:00:00Z\",\r\n      likes: 4,\r\n      dislikes: 0,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [],\r\n      edited: false,\r\n    },\r\n  ],\r\n};\r\n","import { useState, useCallback } from \"react\";\r\n\r\nconst useNoteDashboard = (mainTestBank, userNotesBank) => {\r\n  const [isDetailVisible, setIsDetailVisible] = useState(false);\r\n  const [activeCardId, setActiveCardId] = useState(null);\r\n  const [isClosing, setIsClosing] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const getQuestionById = useCallback(\r\n    (id) => {\r\n      for (const topic of mainTestBank) {\r\n        const question = topic.questions.find((q) => q.id === id);\r\n        if (question) return question;\r\n      }\r\n      return null; // Ha nem található kérdés, null-t adunk vissza\r\n    },\r\n    [mainTestBank]\r\n  );\r\n\r\n  const handleCardClick = useCallback((id) => {\r\n    setIsDetailVisible(true);\r\n\r\n    setTimeout(() => {\r\n      setActiveCardId(id);\r\n      setIsClosing(false);\r\n    }, 200);\r\n  }, []);\r\n\r\n  const handleCloseDetails = () => {\r\n    setIsClosing(true);\r\n    setTimeout(() => {\r\n      setIsDetailVisible(false);\r\n      setActiveCardId(null);\r\n      setIsClosing(false);\r\n    }, 200);\r\n  };\r\n\r\n  const getFilteredNotes = useCallback(() => {\r\n    return Object.entries(userNotesBank).filter(([id, note, subtopic]) => {\r\n      const question = getQuestionById(id);\r\n      if (!question) return false; // Ha nincs kérdés, kihagyjuk\r\n      return (\r\n        (note && note.toLowerCase().includes(searchTerm.toLowerCase())) || // Ellenőrizzük, hogy a note nem undefined\r\n        (question.id &&\r\n          question.id.toLowerCase().includes(searchTerm.toLowerCase())) || // Ellenőrizzük, hogy az id nem undefined\r\n        (question.subtopic &&\r\n          question.subtopic.toLowerCase().includes(searchTerm.toLowerCase())) // Ellenőrizzük, hogy a topic nem undefined\r\n      );\r\n    });\r\n  }, [userNotesBank, searchTerm, getQuestionById]);\r\n\r\n  const activeQuestion = activeCardId ? getQuestionById(activeCardId) : null;\r\n  const activeNote = activeCardId ? userNotesBank[activeCardId] : null;\r\n\r\n  return {\r\n    isDetailVisible,\r\n    activeCardId,\r\n    isClosing,\r\n    searchTerm,\r\n    setSearchTerm,\r\n    handleCardClick,\r\n    handleCloseDetails,\r\n    getQuestionById,\r\n    filteredNotes: getFilteredNotes(),\r\n    activeQuestion,\r\n    activeNote,\r\n  };\r\n};\r\n\r\nexport default useNoteDashboard;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nconst usePrivateCollectionDashboard = (\r\n  mainTestBank,\r\n  userPrivateCollectionsBank\r\n) => {\r\n  const [isCollectionDetailVisible, setIsCollectionDetailVisible] =\r\n    useState(false);\r\n  const [activeCardId, setActiveCollectionCardId] = useState(null);\r\n  const [isCollectionClosing, setIsCollectionClosing] = useState(false);\r\n  const [activeCollection, setActiveCollection] = useState(null);\r\n\r\n  const getQuestionById = useCallback(\r\n    (id) => {\r\n      for (const topic of mainTestBank) {\r\n        const question = topic.questions.find((q) => q.id === id);\r\n        if (question) return question;\r\n      }\r\n      return null;\r\n    },\r\n    [mainTestBank]\r\n  );\r\n\r\n  const handleCollectionCardClick = useCallback((id) => {\r\n    setIsCollectionDetailVisible(true);\r\n    setTimeout(() => {\r\n      setActiveCollectionCardId(id);\r\n      setIsCollectionClosing(false);\r\n    }, 200);\r\n  }, []);\r\n\r\n  const handleCollectionCloseDetails = () => {\r\n    setIsCollectionClosing(true);\r\n    setTimeout(() => {\r\n      setIsCollectionDetailVisible(false);\r\n      setActiveCollectionCardId(null);\r\n      setIsCollectionClosing(false);\r\n    }, 200);\r\n  };\r\n\r\n  const activeQuestion = activeCardId ? getQuestionById(activeCardId) : null;\r\n\r\n  const getQuestionsByCollection = useCallback(\r\n    (collection) => {\r\n      return collection.items.map((id) => getQuestionById(id)).filter(Boolean);\r\n    },\r\n    [getQuestionById]\r\n  );\r\n\r\n  return {\r\n    isCollectionDetailVisible,\r\n    activeCardId,\r\n    isCollectionClosing,\r\n    handleCollectionCardClick,\r\n    handleCollectionCloseDetails,\r\n    activeQuestion,\r\n    activeCollection,\r\n    setActiveCollection,\r\n    getQuestionsByCollection,\r\n  };\r\n};\r\n\r\nexport default usePrivateCollectionDashboard;\r\n","import React from \"react\";\r\nimport { Icons } from \"../../../assets/icons/icons\";\r\nimport \"./practiceDashboard.css\";\r\n\r\nconst PracticeDashboard = ({\r\n  setPracticeDashboard,\r\n  setPrivateNoteDashboard,\r\n  setPublicCommentDashboard,\r\n  setPrivateCollectionDashboard,\r\n  userNotesBank,\r\n  userPrivateCollectionsBank,\r\n}) => {\r\n  return (\r\n    <div className=\"practice-dashboard-container\">\r\n      <div className=\"left\">\r\n        <div className=\"profile-container\">\r\n          <div className=\"welcome-message\">\r\n            Welcome to Practice, <span>Peter</span>\r\n          </div>\r\n          <div className=\"recomended-apps\">\r\n            <h2>Your apps</h2>\r\n            <div className=\"your-apps-container\">\r\n              <div className=\"apps-grid\">\r\n                <div\r\n                  className=\"app-icon-container\"\r\n                  onClick={() => setPracticeDashboard(false)}\r\n                >\r\n                  <div className=\"app-icon\">\r\n                    <Icons.CiPlay1 />\r\n                  </div>\r\n                  <div className=\"app-name\">Test Bank</div>\r\n                </div>\r\n                <div\r\n                  className=\"app-icon-container\"\r\n                  onClick={() => {\r\n                    setPracticeDashboard(false);\r\n                    setPrivateNoteDashboard(true);\r\n                  }}\r\n                >\r\n                  <span className=\"circle-number-icon\">\r\n                    {Object.entries(userNotesBank).length}\r\n                  </span>\r\n                  <div className=\"app-icon\">\r\n                    <Icons.CiFileOn />\r\n                  </div>\r\n                  <div className=\"app-name\">Private Notes</div>\r\n                </div>\r\n                <div\r\n                  className=\"app-icon-container\"\r\n                  onClick={() => {\r\n                    setPracticeDashboard(false);\r\n                    setPublicCommentDashboard(true);\r\n                  }}\r\n                >\r\n                  <div className=\"app-icon\">\r\n                    <Icons.CiChat1 />\r\n                  </div>\r\n                  <div className=\"app-name\">Public Comments</div>\r\n                </div>\r\n                <div\r\n                  className=\"app-icon-container\"\r\n                  onClick={() => {\r\n                    setPracticeDashboard(false);\r\n                    setPrivateCollectionDashboard(true);\r\n                  }}\r\n                >\r\n                  <span className=\"circle-number-icon\">\r\n                    {userPrivateCollectionsBank.length}\r\n                  </span>\r\n                  <div className=\"app-icon\">\r\n                    <Icons.CiBookmarkCheck />\r\n                  </div>\r\n                  <div className=\"app-name\">Question Collections</div>\r\n                </div>\r\n                <div className=\"app-icon-container\">\r\n                  <span className=\"coming-soon-icon\"> Coming Soon...</span>\r\n                  <div className=\"app-icon\">\r\n                    <Icons.CiTimer />\r\n                  </div>\r\n                  <div className=\"app-name\">Test History</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"right\">\r\n        <div className=\"trial-card\"></div>\r\n        <div className=\"trial-card\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PracticeDashboard;\r\n","import React from \"react\";\r\nimport { Icons } from \"../../assets/icons/icons\";\r\nimport \"./EmptyState.css\";\r\n\r\n// Előre definiált típusok\r\nconst emptyStateTypes = {\r\n  emptyNote: {\r\n    icon: Icons.CiFileOn,\r\n    title: \"You currently have no notes.\",\r\n    description:\r\n      \"You can add notes to test tasks by clicking the comment icon in the bottom left panel.\",\r\n  },\r\n  emptyComment: {\r\n    icon: Icons.CiChat1,\r\n    title: \"No comments yet.\",\r\n    description:\r\n      \"Be the first to leave a comment by clicking the comment icon below.\",\r\n  },\r\n  emptyCollections: {\r\n    icon: Icons.GoBookmark,\r\n    title: \"No Collections yet.\",\r\n    description: \"Start organizing your items by creating a new collection.\",\r\n  },\r\n  emptyQuestions: {\r\n    icon: Icons.CiCircleQuestion,\r\n    title: \"No questions added yet.\",\r\n    description:\r\n      \"You can add new questions by clicking the 'Add Question' button.\",\r\n  },\r\n};\r\n\r\nconst EmptyState = ({ type }) => {\r\n  const {\r\n    icon: Icon,\r\n    title,\r\n    description,\r\n  } = emptyStateTypes[type] || emptyStateTypes.emptyNote;\r\n\r\n  return (\r\n    <div className=\"no-notes-message\">\r\n      <div className=\"empty-state\">\r\n        <Icon />\r\n        <h2>{title}</h2>\r\n        <p>{description}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmptyState;\r\n","import React, { useState } from \"react\";\r\nimport \"./ImageModal.css\"; // Stílusok a komponenshez\r\n\r\nconst ImageModal = ({ imageUrl }) => {\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n\r\n  if (!imageUrl) return null;\r\n\r\n  return (\r\n    <div className=\"image-modal-container\">\r\n      <img\r\n        src={imageUrl}\r\n        alt=\"Question\"\r\n        className=\"thumbnail\"\r\n        onClick={() => setModalOpen(true)}\r\n      />\r\n      {isModalOpen && (\r\n        <div\r\n          className=\"image-modal-overlay\"\r\n          onClick={() => setModalOpen(false)}\r\n        >\r\n          <div className=\"image-modal-content\">\r\n            <span\r\n              className=\"image-modal-close-button\"\r\n              onClick={() => setModalOpen(false)}\r\n            >\r\n              &times;\r\n            </span>\r\n            <img src={imageUrl} alt=\"Question\" className=\"full-size-image\" />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageModal;\r\n","import React from \"react\";\r\nimport { IoCloseOutline } from \"react-icons/io5\";\r\nimport \"./ExplanationModal.css\";\r\nimport { MathComponent } from \"mathjax-react\";\r\nimport ImageModal from \"./ImageModal/ImageModal\";\r\n\r\nconst ExplanationModal = ({ isOpen, content, onClose }) => {\r\n  // Az explanation array feldolgozása\r\n  const renderContent = content.map((item, index) => {\r\n    if (item.type === \"math\") {\r\n      return <MathComponent key={index} tex={item.content} />;\r\n    } else if (item.type === \"text\") {\r\n      return (\r\n        <p key={index} dangerouslySetInnerHTML={{ __html: item.content }} />\r\n      );\r\n    } else if (item.type === \"image\" && item.content) {\r\n      return <ImageModal key={index} imageUrl={item.content} />;\r\n    }\r\n    return null;\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`modal-overlay ${isOpen ? \"open\" : \"\"}`}\r\n        onClick={onClose}\r\n      ></div>\r\n      <div className={`modal-container ${isOpen ? \"open\" : \"\"}`}>\r\n        <div className=\"header\">\r\n          <h3>Explanation</h3>\r\n          <button className=\"modal-close-button\" onClick={onClose}>\r\n            <IoCloseOutline />\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-content-container\">\r\n          <div className=\"modal-content\">{renderContent}</div>\r\n        </div>\r\n        <div className=\"modal-bottom\"></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExplanationModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Icons } from \"../../assets/icons/icons\";\r\nimport { userNotesBank } from \"../../data/userLocalDatabase\";\r\nimport ActionConfirmationPopup from \"../../components/ActionConfirmationModal/ActionConfirmationModal\";\r\nimport \"./privateNote.css\";\r\n\r\nconst PrivateNote = ({ isOpen, questionId, onClose }) => {\r\n  const [currentNote, setCurrentNote] = useState(\"\");\r\n  const [activePopup, setActivePopup] = useState(null);\r\n  const [isModified, setIsModified] = useState(false);\r\n  const charLimit = 2000;\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setCurrentNote(userNotesBank[questionId] || \"\");\r\n      setIsModified(false);\r\n    }\r\n  }, [isOpen, questionId]);\r\n\r\n  const handleSaveNote = () => {\r\n    if (currentNote.trim() === \"\") {\r\n      // Ha a jegyzet üres, akkor töröljük a questionId-t a userNotesBank-ból\r\n      delete userNotesBank[questionId];\r\n    } else {\r\n      // Egyébként mentjük a jegyzetet\r\n      userNotesBank[questionId] = currentNote;\r\n    }\r\n    console.log(\"Saved Notes:\", userNotesBank);\r\n    setActivePopup(null);\r\n    onClose();\r\n  };\r\n\r\n  const handleDeleteNote = () => {\r\n    delete userNotesBank[questionId];\r\n    setCurrentNote(\"\");\r\n    setActivePopup(null);\r\n    onClose();\r\n  };\r\n\r\n  const handleTextChange = (e) => {\r\n    if (e.target.value.length <= charLimit) {\r\n      setCurrentNote(e.target.value);\r\n      setIsModified(true);\r\n    }\r\n  };\r\n\r\n  const handleOverlayClick = () => {\r\n    if (isModified) {\r\n      setActivePopup(\"saveNote\");\r\n    } else {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const popupsConfig = {\r\n    saveNote: {\r\n      question: \"Do you want to save your note?\",\r\n      buttons: [\r\n        {\r\n          text: \"Save the note\",\r\n          onClick: handleSaveNote,\r\n          icon: <Icons.CiSaveDown1 size={26} style={{ strokeWidth: 0.6 }} />,\r\n        },\r\n        {\r\n          text: \"Discard and leave\",\r\n          onClick: () => {\r\n            setActivePopup(null);\r\n            onClose();\r\n          },\r\n          icon: <Icons.HiOutlineXMark size={20} style={{ strokeWidth: 2 }} />,\r\n        },\r\n      ],\r\n    },\r\n    deleteNote: {\r\n      question: \"Are you sure you want to delete this note?\",\r\n      buttons: [\r\n        {\r\n          text: \"Yes, delete\",\r\n          onClick: handleDeleteNote,\r\n          icon: <Icons.GoTrash size={20} />,\r\n        },\r\n        {\r\n          text: \"No, cancel\",\r\n          onClick: () => setActivePopup(null),\r\n          icon: <Icons.HiOutlineXMark size={20} style={{ strokeWidth: 2 }} />,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  const hasSavedNote = !!userNotesBank[questionId];\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`modal-overlay ${isOpen ? \"open\" : \"\"}`}\r\n        onClick={handleOverlayClick}\r\n      ></div>\r\n      <div className={`private-note-container ${isOpen ? \"open\" : \"\"}`}>\r\n        <div className=\"header\">\r\n          <div className=\"header-left-container\">\r\n            <h3>Private Note</h3>\r\n            {hasSavedNote && (\r\n              <div\r\n                className=\"trash-icon\"\r\n                style={{ opacity: isModified ? 0.5 : 1 }}\r\n                onClick={() => setActivePopup(\"deleteNote\")}\r\n              >\r\n                <Icons.GoTrash />\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <button className=\"modal-close-button\" onClick={onClose}>\r\n            <Icons.IoCloseOutline />\r\n          </button>\r\n        </div>\r\n        <div className=\"private-note-content\">\r\n          <textarea\r\n            className=\"note-textarea\"\r\n            value={currentNote}\r\n            onChange={handleTextChange}\r\n            placeholder=\"You can put here your notes...\"\r\n          />\r\n        </div>\r\n        <div className=\"char-counter\">\r\n          {charLimit - currentNote.length} / {charLimit}\r\n        </div>\r\n        <div className=\"private-note-footer\">\r\n          <button className=\"save-note-button\" onClick={handleSaveNote}>\r\n            Save Note\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {activePopup && (\r\n        <ActionConfirmationPopup\r\n          show={true}\r\n          onOverlayClick={() => setActivePopup(null)}\r\n          question={popupsConfig[activePopup].question}\r\n          buttons={popupsConfig[activePopup].buttons}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrivateNote;\r\n","import React, { useState } from \"react\";\r\nimport MessagePopup from \"../../components/MessagePopup/MessagePopup\";\r\nimport { Icons } from \"../../assets/icons/icons\";\r\nimport { userPrivateCollectionsBank } from \"../../data/userLocalDatabase\";\r\nimport \"./privateCollections.css\";\r\n\r\nconst PrivateCollection = ({ isOpen, onClose, questionId }) => {\r\n  const [privateCollections, setPrivateCollections] = useState(\r\n    userPrivateCollectionsBank\r\n  ); // Store collections\r\n  const [isCreating, setIsCreating] = useState(false); // Toggle display of the creation section\r\n  const [newCollectionName, setNewCollectionName] = useState(\"\"); // Name of the new collection\r\n  const [newCollectionColor, setNewCollectionColor] = useState(\"#007BFF\"); // Default color (blue)\r\n\r\n  // Save a collection\r\n  const handleSaveCollection = () => {\r\n    if (newCollectionName.trim()) {\r\n      const collectionExists = privateCollections.some(\r\n        (collection) =>\r\n          collection.name.toLowerCase() ===\r\n          newCollectionName.trim().toLowerCase()\r\n      );\r\n\r\n      if (collectionExists) {\r\n        window.showPopupMessage(\r\n          \"A collection with this name already exists. Please choose a different name.\",\r\n          8000,\r\n          \"#e83b51\",\r\n          \"black\"\r\n        );\r\n        return; // Exit without saving\r\n      }\r\n\r\n      const newCollection = {\r\n        name: newCollectionName,\r\n        color: newCollectionColor,\r\n        items: [],\r\n      };\r\n      userPrivateCollectionsBank.push(newCollection); // Save to the global storage\r\n      setPrivateCollections([...userPrivateCollectionsBank]); // Update the component\r\n      setNewCollectionName(\"\");\r\n      setNewCollectionColor(\"#007BFF\");\r\n      setIsCreating(false);\r\n    }\r\n  };\r\n\r\n  // Add or remove an item from a collection\r\n  const handleToggleQuestionInCollection = (index) => {\r\n    const updatedCollections = privateCollections.map((collection, i) => {\r\n      if (i === index) {\r\n        const isInCollection = collection.items.includes(questionId);\r\n        return {\r\n          ...collection,\r\n          items: isInCollection\r\n            ? collection.items.filter((id) => id !== questionId)\r\n            : [...collection.items, questionId],\r\n        };\r\n      }\r\n      return collection;\r\n    });\r\n\r\n    userPrivateCollectionsBank.length = 0; // Clear the array\r\n    userPrivateCollectionsBank.push(...updatedCollections); // Refill with new values\r\n    setPrivateCollections(updatedCollections); // Update the component\r\n  };\r\n\r\n  // Handle color selection\r\n  const handleColorSelect = (color) => {\r\n    setNewCollectionColor(color);\r\n  };\r\n\r\n  const colorOptions = [\r\n    \"#FF4D4D\",\r\n    \"#FF6F00\",\r\n    \"#FFCD57\",\r\n    \"#2979FF\",\r\n    \"#6200EA\",\r\n    \"#D500F9\",\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`modal-overlay ${isOpen ? \"open\" : \"\"}`}\r\n        onClick={() => {\r\n          onClose();\r\n          setIsCreating(false);\r\n        }}\r\n      ></div>\r\n\r\n      <div className={`private-collection-container ${isOpen ? \"open\" : \"\"}`}>\r\n        <MessagePopup />\r\n        <div className=\"header\">\r\n          <h3>Question Collections</h3>\r\n          <button className=\"modal-close-button\" onClick={onClose}>\r\n            <Icons.IoCloseOutline />\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"private-collection-content\">\r\n          <div className=\"create-collection-button-container\">\r\n            <button\r\n              className=\"create-collection-button\"\r\n              onClick={() => setIsCreating(!isCreating)}\r\n            >\r\n              <Icons.CiCirclePlus size={25} />\r\n              <p>Create New Collection</p>\r\n            </button>\r\n          </div>\r\n\r\n          <div\r\n            className={`collection-creator ${isCreating ? \"slide-down\" : \"\"}`}\r\n          >\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter collection name\"\r\n              value={newCollectionName}\r\n              onChange={(e) => setNewCollectionName(e.target.value)}\r\n            />\r\n            <div className=\"color-picker\">\r\n              <label>Pick a color:</label>\r\n              <div className=\"color-buttons\">\r\n                {colorOptions.map((color) => (\r\n                  <button\r\n                    key={color}\r\n                    className=\"color-button\"\r\n                    onClick={() => handleColorSelect(color)}\r\n                    style={{\r\n                      backgroundColor:\r\n                        newCollectionColor === color ? color : \"white\",\r\n                    }}\r\n                  >\r\n                    <Icons.FaBookmark\r\n                      color={newCollectionColor === color ? \"white\" : color}\r\n                      size={20}\r\n                    />\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            <button\r\n              className=\"save-collection-button\"\r\n              onClick={handleSaveCollection}\r\n            >\r\n              Save Collection\r\n            </button>\r\n          </div>\r\n\r\n          <div className={`collection-list ${isCreating ? \"slide-down\" : \"\"}`}>\r\n            {privateCollections.map((collection, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"collection-item\"\r\n                style={\r\n                  {\r\n                    // borderLeft: `5px solid ${collection.color}`,\r\n                  }\r\n                }\r\n                onClick={() => handleToggleQuestionInCollection(index)}\r\n              >\r\n                <div className=\"collection-itemleft-block\">\r\n                  {collection.items.includes(questionId) ? (\r\n                    <Icons.GoBookmarkFill\r\n                      size={22}\r\n                      style={{ color: collection.color }} // Sets the icon color\r\n                    />\r\n                  ) : (\r\n                    <Icons.GoBookmark\r\n                      size={22}\r\n                      style={{ color: collection.color }} // Sets the icon color\r\n                    />\r\n                  )}\r\n                  <p className=\"collection-item-name\">{collection.name}</p>\r\n                  <p className=\"item-counter\">({collection.items.length})</p>\r\n                </div>\r\n                <div className=\"collection-item-add-remove\">\r\n                  {collection.items.includes(questionId) ? (\r\n                    <Icons.IoRemoveCircleOutline size={22} />\r\n                  ) : (\r\n                    <Icons.IoIosAddCircleOutline size={22} />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrivateCollection;\r\n","export const formatTimestamp = (timestamp) => {\r\n  const now = new Date();\r\n  const commentDate = new Date(timestamp);\r\n  const diffInSeconds = Math.floor((now - commentDate) / 1000);\r\n  const diffInMinutes = Math.floor(diffInSeconds / 60);\r\n  const diffInHours = Math.floor(diffInMinutes / 60);\r\n  const diffInDays = Math.floor(diffInHours / 24);\r\n\r\n  if (diffInSeconds < 60) {\r\n    return \"Just now\";\r\n  } else if (diffInMinutes < 60) {\r\n    return `${diffInMinutes} minute${diffInMinutes > 1 ? \"s\" : \"\"} ago`;\r\n  } else if (diffInHours < 24) {\r\n    return `${diffInHours} hour${diffInHours > 1 ? \"s\" : \"\"} ago`;\r\n  } else if (diffInDays < 365) {\r\n    return commentDate.toLocaleDateString(\"en-US\", {\r\n      month: \"short\",\r\n      day: \"numeric\",\r\n    });\r\n  } else {\r\n    return commentDate.toLocaleDateString(\"en-US\", {\r\n      year: \"numeric\",\r\n      month: \"short\",\r\n      day: \"numeric\",\r\n    });\r\n  }\r\n};\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Icons } from \"../../../assets/icons/icons\";\r\nimport { BsFillSendCheckFill } from \"react-icons/bs\";\r\nimport { ImCancelCircle } from \"react-icons/im\";\r\n\r\nimport \"./CommentList.css\";\r\nimport { formatTimestamp } from \"../../../utils/formatTimeStamp\";\r\n\r\nexport const CommentList = ({\r\n  comments,\r\n  onReply,\r\n  onLike,\r\n  onDislike,\r\n  onDelete,\r\n  onEdit,\r\n  editingCommentId,\r\n  editedComment,\r\n  setEditedComment,\r\n  saveEdit,\r\n}) => {\r\n  const [activeCommentOptions, setActiveCommentOptions] = useState(null);\r\n  const [activeReplyOptions, setActiveReplyOptions] = useState(null);\r\n  const [expandedComments, setExpandedComments] = useState({});\r\n  const [expandedReplies, setExpandedReplies] = useState({});\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const commentRefs = useRef({});\r\n  const replyRefs = useRef({});\r\n  const textareaRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (textareaRef.current) {\r\n      textareaRef.current.style.height = \"auto\";\r\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\r\n    }\r\n  }, [editedComment]);\r\n\r\n  const toggleCommentOptions = (commentId) => {\r\n    setActiveCommentOptions((prev) => (prev === commentId ? null : commentId));\r\n    setActiveReplyOptions(null); // Inaktiváljuk a reply opciókat\r\n    setIsEditing(false);\r\n    handleCancel();\r\n  };\r\n\r\n  const toggleReplyOptions = (replyId, parentCommentId) => {\r\n    const uniqueId = `${parentCommentId}-${replyId}`;\r\n    setActiveReplyOptions((prev) => (prev === uniqueId ? null : uniqueId));\r\n    setActiveCommentOptions(null); // Inaktiváljuk a comment opciókat\r\n    setIsEditing(false);\r\n    handleCancel();\r\n  };\r\n\r\n  const toggleExpandComment = (commentId) => {\r\n    const commentElement = commentRefs.current[commentId];\r\n    if (!commentElement) return;\r\n\r\n    if (expandedComments[commentId]) {\r\n      commentElement.classList.remove(\"expanded\");\r\n      setExpandedComments((prev) => ({\r\n        ...prev,\r\n        [commentId]: false,\r\n      }));\r\n    } else {\r\n      commentElement.classList.add(\"expanded\");\r\n      setExpandedComments((prev) => ({\r\n        ...prev,\r\n        [commentId]: true,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const toggleExpandReply = (replyId, parentCommentId) => {\r\n    const uniqueId = `${parentCommentId}-${replyId}`;\r\n    const replyElement = replyRefs.current[uniqueId];\r\n    if (replyElement) {\r\n      if (expandedReplies[uniqueId]) {\r\n        replyElement.classList.remove(\"expanded\");\r\n        setExpandedReplies((prev) => ({\r\n          ...prev,\r\n          [uniqueId]: false,\r\n        }));\r\n      } else {\r\n        replyElement.classList.add(\"expanded\");\r\n        setExpandedReplies((prev) => ({\r\n          ...prev,\r\n          [uniqueId]: true,\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const truncateText = (text, maxLength) => {\r\n    if (text.length > maxLength) {\r\n      return text.slice(0, maxLength) + \"...\";\r\n    }\r\n    return text;\r\n  };\r\n\r\n  const handleEditClick = (commentId, content) => {\r\n    if (isEditing) {\r\n      handleSaveEdit(editingCommentId);\r\n    }\r\n    setIsEditing(true);\r\n    onEdit(commentId, content);\r\n  };\r\n\r\n  const handleSaveEdit = (\r\n    commentId,\r\n    isReply = false,\r\n    parentCommentId = null\r\n  ) => {\r\n    saveEdit(commentId, isReply, parentCommentId);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleDeleteClick = (\r\n    commentId,\r\n    isReply = false,\r\n    parentCommentId = null\r\n  ) => {\r\n    onDelete(commentId, isReply, parentCommentId);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsEditing(false);\r\n    setEditedComment(\"\");\r\n    onEdit(null, \"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"comment-list-container\">\r\n      {comments.map((comment) => {\r\n        const isCommentExpanded = expandedComments[comment.id];\r\n        const commentText = isCommentExpanded\r\n          ? comment.content\r\n          : truncateText(comment.content, 150);\r\n\r\n        return (\r\n          <div key={comment.id} className=\"comment-item\">\r\n            <div className=\"comment-content\">\r\n              <div className=\"comment-header\">\r\n                <div className=\"flex-1\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <div className=\"comment-avatar-container\">\r\n                      <img\r\n                        src={comment.avatar}\r\n                        alt={comment.author}\r\n                        className=\"comment-avatar\"\r\n                      />\r\n                      <h3 className=\"comment-author\">\r\n                        {comment.author}\r\n                        {comment.edited && (\r\n                          <span className=\"edited-label\"> (edited)</span>\r\n                        )}\r\n                      </h3>\r\n                    </div>\r\n                    <span className=\"comment-timestamp\">\r\n                      {formatTimestamp(comment.timestamp)}\r\n                    </span>\r\n                  </div>\r\n                  {editingCommentId === comment.id ? (\r\n                    <textarea\r\n                      ref={textareaRef}\r\n                      className=\"edit-comment-textarea\"\r\n                      value={editedComment}\r\n                      onChange={(e) => setEditedComment(e.target.value)}\r\n                    />\r\n                  ) : (\r\n                    <p\r\n                      ref={(el) => (commentRefs.current[comment.id] = el)}\r\n                      className={`comment-text ${\r\n                        isCommentExpanded ? \"expanded\" : \"\"\r\n                      }`}\r\n                    >\r\n                      {commentText}\r\n                    </p>\r\n                  )}\r\n\r\n                  <div className=\"comment-actions\">\r\n                    {comment.content.length > 150 && (\r\n                      <button\r\n                        className=\"show-more-button\"\r\n                        onClick={() => toggleExpandComment(comment.id)}\r\n                      >\r\n                        {isCommentExpanded ? \"Show Less\" : \"Show More\"}\r\n                      </button>\r\n                    )}\r\n                    <button\r\n                      className=\"comment-action-button\"\r\n                      onClick={() => onLike(comment.id)}\r\n                    >\r\n                      {comment.liked ? (\r\n                        <Icons.BsHandThumbsUpFill className=\"w-4 h-4 mr-1.5\" />\r\n                      ) : (\r\n                        <Icons.BsHandThumbsUp className=\"w-4 h-4 mr-1.5\" />\r\n                      )}\r\n                      <span className=\"likes-number-amount\">\r\n                        {comment.likes}\r\n                      </span>\r\n                    </button>\r\n                    <button\r\n                      className=\"comment-action-button\"\r\n                      onClick={() => onDislike(comment.id)}\r\n                    >\r\n                      {comment.disliked ? (\r\n                        <Icons.BsHandThumbsDownFill className=\"w-4 h-4 mr-1.5\" />\r\n                      ) : (\r\n                        <Icons.BsHandThumbsDown className=\"w-4 h-4 mr-1.5\" />\r\n                      )}\r\n                      <span className=\"likes-number-amount\">\r\n                        {comment.dislikes}\r\n                      </span>\r\n                    </button>\r\n                    <button\r\n                      className=\"comment-reply-button\"\r\n                      onClick={() => onReply(comment.id)}\r\n                    >\r\n                      <Icons.GoReply className=\"w-4 h-4 mr-1.5\" />\r\n                      <span className=\"text-sm font-medium\">Reply</span>\r\n                    </button>\r\n                    <div\r\n                      className={`relative ${\r\n                        activeCommentOptions === comment.id ? \"expanded\" : \"\"\r\n                      }`}\r\n                    >\r\n                      <button\r\n                        className=\"comment-options-button\"\r\n                        onClick={() => toggleCommentOptions(comment.id)}\r\n                        aria-expanded={activeCommentOptions === comment.id}\r\n                        aria-controls={`comment-options-dropdown-${comment.id}`}\r\n                      >\r\n                        <Icons.HiOutlineDotsHorizontal className=\"w-4 h-4\" />\r\n                      </button>\r\n                      {activeCommentOptions === comment.id && (\r\n                        <div\r\n                          id={`comment-options-dropdown-${comment.id}`}\r\n                          className={`comment-options-dropdown ${\r\n                            activeCommentOptions === comment.id\r\n                              ? \"expanded\"\r\n                              : \"\"\r\n                          }`}\r\n                        >\r\n                          <button\r\n                            className=\"comment-edit-button\"\r\n                            onClick={() =>\r\n                              isEditing\r\n                                ? handleSaveEdit(comment.id)\r\n                                : handleEditClick(comment.id, comment.content)\r\n                            }\r\n                          >\r\n                            {isEditing ? (\r\n                              <BsFillSendCheckFill />\r\n                            ) : (\r\n                              <Icons.HiOutlinePencil />\r\n                            )}\r\n                          </button>\r\n                          <button\r\n                            className=\"comment-delete-button\"\r\n                            onClick={() =>\r\n                              isEditing\r\n                                ? handleCancel()\r\n                                : handleDeleteClick(comment.id)\r\n                            }\r\n                          >\r\n                            {isEditing ? (\r\n                              <ImCancelCircle />\r\n                            ) : (\r\n                              <Icons.HiOutlineTrash />\r\n                            )}\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {comment.replies?.map((reply) => {\r\n              const uniqueId = `${comment.id}-${reply.id}`;\r\n              const isReplyExpanded = expandedReplies[uniqueId];\r\n              const replyText = isReplyExpanded\r\n                ? reply.content\r\n                : truncateText(reply.content, 150);\r\n\r\n              return (\r\n                <div key={reply.id} className=\"reply-item\">\r\n                  <div className=\"comment-header\">\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <div className=\"comment-avatar-container\">\r\n                          <img\r\n                            src={reply.avatar}\r\n                            alt={reply.author}\r\n                            className=\"comment-avatar\"\r\n                          />\r\n                          <h3 className=\"comment-author\">\r\n                            {reply.author}\r\n                            {reply.edited && (\r\n                              <span className=\"edited-label\"> (edited)</span>\r\n                            )}\r\n                          </h3>\r\n                        </div>\r\n                        <span className=\"comment-timestamp\">\r\n                          {formatTimestamp(reply.timestamp)}\r\n                        </span>\r\n                      </div>\r\n                      {editingCommentId === reply.id ? (\r\n                        <textarea\r\n                          ref={textareaRef}\r\n                          className=\"edit-comment-textarea\"\r\n                          value={editedComment}\r\n                          onChange={(e) => setEditedComment(e.target.value)}\r\n                        />\r\n                      ) : (\r\n                        <p\r\n                          ref={(el) => (replyRefs.current[uniqueId] = el)}\r\n                          className={`reply-text ${\r\n                            isReplyExpanded ? \"expanded\" : \"\"\r\n                          }`}\r\n                        >\r\n                          {replyText}\r\n                        </p>\r\n                      )}\r\n\r\n                      <div className=\"comment-actions\">\r\n                        {reply.content.length > 150 && (\r\n                          <button\r\n                            className=\"show-more-button\"\r\n                            onClick={() =>\r\n                              toggleExpandReply(reply.id, comment.id)\r\n                            }\r\n                          >\r\n                            {isReplyExpanded ? \"Show Less\" : \"Show More\"}\r\n                          </button>\r\n                        )}\r\n                        <button\r\n                          className=\"comment-action-button\"\r\n                          onClick={() => onLike(comment.id, true, reply.id)}\r\n                        >\r\n                          {reply.liked ? (\r\n                            <Icons.BsHandThumbsUpFill />\r\n                          ) : (\r\n                            <Icons.BsHandThumbsUp />\r\n                          )}\r\n                          <span className=\"likes-number-amount\">\r\n                            {reply.likes}\r\n                          </span>\r\n                        </button>\r\n                        <button\r\n                          className=\"comment-action-button\"\r\n                          onClick={() => onDislike(comment.id, true, reply.id)}\r\n                        >\r\n                          {reply.disliked ? (\r\n                            <Icons.BsHandThumbsDownFill />\r\n                          ) : (\r\n                            <Icons.BsHandThumbsDown />\r\n                          )}\r\n                          <span className=\"likes-number-amount\">\r\n                            {reply.dislikes}\r\n                          </span>\r\n                        </button>\r\n                        <button\r\n                          className=\"comment-reply-button\"\r\n                          onClick={() => onReply(comment.id)}\r\n                        >\r\n                          <Icons.GoReply />\r\n                          <span className=\"text-sm font-medium\">Reply</span>\r\n                        </button>\r\n                        <div\r\n                          className={`relative ${\r\n                            activeReplyOptions === uniqueId ? \"expanded\" : \"\"\r\n                          }`}\r\n                        >\r\n                          <button\r\n                            className=\"comment-options-button\"\r\n                            onClick={() =>\r\n                              toggleReplyOptions(reply.id, comment.id)\r\n                            }\r\n                            aria-expanded={activeReplyOptions === uniqueId}\r\n                            aria-controls={`reply-options-dropdown-${uniqueId}`}\r\n                          >\r\n                            <Icons.HiOutlineDotsHorizontal className=\"w-4 h-4\" />\r\n                          </button>\r\n                          {activeReplyOptions === uniqueId && (\r\n                            <div\r\n                              id={`reply-options-dropdown-${uniqueId}`}\r\n                              className={`comment-options-dropdown ${\r\n                                activeReplyOptions === uniqueId\r\n                                  ? \"expanded\"\r\n                                  : \"\"\r\n                              }`}\r\n                            >\r\n                              <button\r\n                                className=\"comment-edit-button\"\r\n                                onClick={() =>\r\n                                  isEditing\r\n                                    ? handleSaveEdit(reply.id, true, comment.id)\r\n                                    : handleEditClick(reply.id, reply.content)\r\n                                }\r\n                              >\r\n                                {isEditing ? (\r\n                                  <BsFillSendCheckFill />\r\n                                ) : (\r\n                                  <Icons.HiOutlinePencil />\r\n                                )}\r\n                              </button>\r\n                              <button\r\n                                className=\"comment-delete-button\"\r\n                                onClick={() =>\r\n                                  isEditing\r\n                                    ? handleCancel()\r\n                                    : handleDeleteClick(\r\n                                        reply.id,\r\n                                        true,\r\n                                        comment.id\r\n                                      )\r\n                                }\r\n                              >\r\n                                {isEditing ? (\r\n                                  <ImCancelCircle />\r\n                                ) : (\r\n                                  <Icons.HiOutlineTrash />\r\n                                )}\r\n                              </button>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { CommentList } from \"./CommentList\";\r\nimport { Icons } from \"../../../assets/icons/icons\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { usersCommentsBank } from \"../../../data/usersCommentsBank\";\r\nimport \"./CommentSection.css\";\r\n\r\nexport const CommentSection = ({\r\n  isOpen,\r\n  onClose,\r\n  questionId,\r\n  questionComments,\r\n  setQuestionComments,\r\n}) => {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [replyingTo, setReplyingTo] = useState(null);\r\n  const [editingCommentId, setEditingCommentId] = useState(null);\r\n  const [editedComment, setEditedComment] = useState(\"\");\r\n\r\n  const toggleCommentSection = () => {\r\n    setIsExpanded((prev) => !prev);\r\n    setReplyingTo(null);\r\n  };\r\n\r\n  const handleCommentChange = (e) => {\r\n    setNewComment(e.target.value);\r\n  };\r\n\r\n  const saveComment = () => {\r\n    if (newComment.trim() === \"\") {\r\n      alert(\"A komment mező nem lehet üres!\");\r\n      return;\r\n    }\r\n\r\n    const comment = {\r\n      id: uuidv4(),\r\n      author: \"Péter\",\r\n      avatar: \"https://i.pravatar.cc/150?img=3\",\r\n      content: newComment,\r\n      timestamp: new Date().toISOString(),\r\n      likes: 0,\r\n      dislikes: 0,\r\n      liked: false,\r\n      disliked: false,\r\n      replies: [],\r\n      edited: false,\r\n    };\r\n\r\n    if (replyingTo) {\r\n      usersCommentsBank[questionId] = usersCommentsBank[questionId].map((c) => {\r\n        if (c.id === replyingTo) {\r\n          return {\r\n            ...c,\r\n            replies: [\r\n              ...c.replies,\r\n              {\r\n                ...comment,\r\n                id: uuidv4(),\r\n              },\r\n            ],\r\n          };\r\n        }\r\n        return c;\r\n      });\r\n    } else {\r\n      usersCommentsBank[questionId] = [\r\n        ...(usersCommentsBank[questionId] || []),\r\n        comment,\r\n      ];\r\n    }\r\n\r\n    setNewComment(\"\");\r\n    setIsExpanded(false);\r\n    setReplyingTo(null);\r\n  };\r\n\r\n  const deleteComment = (\r\n    commentId,\r\n    isReply = false,\r\n    parentCommentId = null\r\n  ) => {\r\n    if (isReply) {\r\n      usersCommentsBank[questionId] = usersCommentsBank[questionId].map((c) => {\r\n        if (c.id === parentCommentId) {\r\n          return {\r\n            ...c,\r\n            replies: c.replies.filter((r) => r.id !== commentId),\r\n          };\r\n        }\r\n        return c;\r\n      });\r\n    } else {\r\n      usersCommentsBank[questionId] = usersCommentsBank[questionId].filter(\r\n        (c) => c.id !== commentId\r\n      );\r\n    }\r\n\r\n    setQuestionComments({ ...usersCommentsBank });\r\n  };\r\n\r\n  const handleReply = (commentId) => {\r\n    setReplyingTo(commentId);\r\n    setIsExpanded(true);\r\n  };\r\n\r\n  const handleEdit = (commentId, content) => {\r\n    setEditingCommentId(commentId);\r\n    setEditedComment(content);\r\n  };\r\n\r\n  const saveEdit = (commentId, isReply = false, parentCommentId = null) => {\r\n    const updateComment = (comment) => ({\r\n      ...comment,\r\n      content: editedComment,\r\n      edited: true,\r\n    });\r\n\r\n    if (isReply) {\r\n      usersCommentsBank[questionId] = usersCommentsBank[questionId].map((c) => {\r\n        if (c.id === parentCommentId) {\r\n          return {\r\n            ...c,\r\n            replies: c.replies.map((r) =>\r\n              r.id === commentId ? updateComment(r) : r\r\n            ),\r\n          };\r\n        }\r\n        return c;\r\n      });\r\n    } else {\r\n      usersCommentsBank[questionId] = usersCommentsBank[questionId].map((c) =>\r\n        c.id === commentId ? updateComment(c) : c\r\n      );\r\n    }\r\n\r\n    setQuestionComments({ ...usersCommentsBank });\r\n    setEditingCommentId(null);\r\n    setEditedComment(\"\");\r\n  };\r\n\r\n  const handleLike = (commentId, isReply = false, replyId = null) => {\r\n    const updatedComments = { ...usersCommentsBank }; // Másold át a usersCommentsBank-ot\r\n    if (!updatedComments[questionId]) {\r\n      updatedComments[questionId] = []; // Ha nem létezik, inicializáld üres tömbbel\r\n    }\r\n    const comments = updatedComments[questionId];\r\n\r\n    const updateLikes = (comment) => {\r\n      const updatedLikes = comment.likes + (comment.liked ? -1 : 1);\r\n      const updatedDislikes = comment.disliked\r\n        ? comment.dislikes - 1\r\n        : comment.dislikes;\r\n      return {\r\n        ...comment,\r\n        likes: updatedLikes,\r\n        dislikes: updatedDislikes,\r\n        liked: !comment.liked,\r\n        disliked: false,\r\n      };\r\n    };\r\n\r\n    if (isReply) {\r\n      updatedComments[questionId] = comments.map((c) => {\r\n        if (c.id === commentId) {\r\n          return {\r\n            ...c,\r\n            replies: c.replies.map((r) =>\r\n              r.id === replyId ? updateLikes(r) : r\r\n            ),\r\n          };\r\n        }\r\n        return c;\r\n      });\r\n    } else {\r\n      updatedComments[questionId] = comments.map((c) =>\r\n        c.id === commentId ? updateLikes(c) : c\r\n      );\r\n    }\r\n\r\n    // Frissítsd a usersCommentsBank-ot\r\n    usersCommentsBank[questionId] = updatedComments[questionId];\r\n    setQuestionComments({ ...updatedComments }); // Frissítsd a state-et\r\n  };\r\n\r\n  const handleDislike = (commentId, isReply = false, replyId = null) => {\r\n    const updatedComments = { ...usersCommentsBank };\r\n    if (!updatedComments[questionId]) {\r\n      updatedComments[questionId] = [];\r\n    }\r\n    const comments = updatedComments[questionId];\r\n\r\n    const updateDislikes = (comment) => {\r\n      const updatedDislikes = comment.dislikes + (comment.disliked ? -1 : 1);\r\n      const updatedLikes = comment.liked ? comment.likes - 1 : comment.likes;\r\n      return {\r\n        ...comment,\r\n        dislikes: updatedDislikes,\r\n        likes: updatedLikes,\r\n        disliked: !comment.disliked,\r\n        liked: false,\r\n      };\r\n    };\r\n\r\n    if (isReply) {\r\n      updatedComments[questionId] = comments.map((c) => {\r\n        if (c.id === commentId) {\r\n          return {\r\n            ...c,\r\n            replies: c.replies.map((r) =>\r\n              r.id === replyId ? updateDislikes(r) : r\r\n            ),\r\n          };\r\n        }\r\n        return c;\r\n      });\r\n    } else {\r\n      updatedComments[questionId] = comments.map((c) =>\r\n        c.id === commentId ? updateDislikes(c) : c\r\n      );\r\n    }\r\n\r\n    usersCommentsBank[questionId] = updatedComments[questionId];\r\n    setQuestionComments({ ...updatedComments });\r\n  };\r\n\r\n  const comments = usersCommentsBank[questionId] || [];\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`modal-overlay ${isOpen ? \"open\" : \"\"}`}\r\n        onClick={onClose}\r\n      ></div>\r\n      <div className={`comment-section-container ${isOpen ? \"open\" : \"\"}`}>\r\n        <div className=\"comment-section-header\">\r\n          <h3 className=\"comment-section-title\">\r\n            Comments (\r\n            {comments.reduce(\r\n              (total, comment) => total + comment.replies.length,\r\n              0\r\n            ) + comments.length}\r\n            )\r\n          </h3>\r\n          <div className=\"comment-section-avatars\">\r\n            {comments.map((commenter, index) => (\r\n              <img\r\n                key={commenter.id}\r\n                src={commenter.avatar}\r\n                alt={commenter.author}\r\n                className=\"comment-section-avatar\"\r\n                style={{ zIndex: comments.length - index }}\r\n                title={commenter.author}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={`comment-section-inner ${\r\n            isExpanded ? \"expanded\" : \"collapsed\"\r\n          }`}\r\n        >\r\n          <CommentList\r\n            comments={comments}\r\n            onReply={handleReply}\r\n            onLike={handleLike}\r\n            onDislike={handleDislike}\r\n            onDelete={deleteComment}\r\n            onEdit={handleEdit}\r\n            editingCommentId={editingCommentId}\r\n            editedComment={editedComment}\r\n            setEditedComment={setEditedComment}\r\n            saveEdit={saveEdit}\r\n          />\r\n        </div>\r\n        <div\r\n          className={`comment-section-footer ${\r\n            isExpanded ? \"expanded\" : \"collapsed\"\r\n          }`}\r\n        >\r\n          <>\r\n            <textarea\r\n              className=\"comment-form-textarea\"\r\n              placeholder={\r\n                replyingTo ? \"Write a Reply...\" : \"Write a Comment...\"\r\n              }\r\n              rows={2}\r\n              value={newComment}\r\n              onChange={handleCommentChange}\r\n            />\r\n            {isExpanded && (\r\n              <button className=\"write-comment-button\" onClick={saveComment}>\r\n                {replyingTo ? \"Post Reply\" : \"Post Comment\"}\r\n              </button>\r\n            )}\r\n            {isExpanded && (\r\n              <button\r\n                className=\"write-comment-close-button\"\r\n                onClick={toggleCommentSection}\r\n              >\r\n                <Icons.HiOutlineXMark />\r\n              </button>\r\n            )}\r\n          </>\r\n\r\n          {!isExpanded && (\r\n            <button\r\n              className=\"write-comment-button\"\r\n              onClick={toggleCommentSection}\r\n            >\r\n              Write a comment\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommentSection;\r\n","import React, { useState } from \"react\";\r\nimport { MathComponent } from \"mathjax-react\";\r\nimport ExplanationModal from \"./ExplanationModal\";\r\nimport PrivateNote from \"./privateNote\";\r\nimport PrivateCollection from \"./privateCollections\";\r\nimport CommentSection from \"./CommentSection/CommentSection\";\r\nimport { Icons } from \"../../assets/icons/icons\";\r\nimport ImageModal from \"./ImageModal/ImageModal\";\r\nimport { usersCommentsBank } from \"../../data/usersCommentsBank\";\r\nimport \"./QuizApp.css\";\r\nimport \"./QuestionViewer.css\";\r\n\r\nconst QuestionViewer = ({\r\n  question,\r\n  userNotesBank,\r\n  userPrivateCollectionsBank,\r\n  questionComments,\r\n  setQuestionComments,\r\n}) => {\r\n  const [isPrivateNoteOpen, setPrivateNoteOpen] = useState(false);\r\n  const [isCommentSectionOpen, setCommentSectionOpen] = useState(false);\r\n  const [isPrivateCollectionOpen, setPrivateCollectionOpen] = useState(false);\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n\r\n  const hasNoteForCurrentQuestion = userNotesBank[question.id];\r\n  const NoteIcon = hasNoteForCurrentQuestion\r\n    ? Icons.FaNoteSticky\r\n    : Icons.CiStickyNote;\r\n\r\n  const hasPrivateCollectionForCurrentQuestion =\r\n    userPrivateCollectionsBank.some((collection) =>\r\n      collection.items.includes(question.id)\r\n    );\r\n  const CollectionIcon = hasPrivateCollectionForCurrentQuestion\r\n    ? Icons.GoBookmarkFill\r\n    : Icons.GoBookmark;\r\n\r\n  const hasCommentsForCurrentQuestion =\r\n    usersCommentsBank[question.id]?.length > 0;\r\n  const CommentIcon = hasCommentsForCurrentQuestion\r\n    ? Icons.ImBubble\r\n    : Icons.SlBubble;\r\n\r\n  return (\r\n    <div className=\"quiz-app-container\">\r\n      <div className=\"viewer-question-infos\">\r\n        <p>{question.id}</p>\r\n        <p>{question.subtopic}</p>\r\n      </div>\r\n      <h2>{question.question}</h2>\r\n      {question.equation && (\r\n        <div className=\"math-equation\">\r\n          <MathComponent tex={question.equation} />\r\n        </div>\r\n      )}\r\n      {question.image && <ImageModal imageUrl={question.image} />}\r\n      <div className=\"answers-container\">\r\n        {question.options.map((option, index) => (\r\n          <div\r\n            className=\"answer-options\"\r\n            key={index}\r\n            style={{\r\n              backgroundColor:\r\n                option === question.answer\r\n                  ? \"var(--answer-correct)\"\r\n                  : \"var(--answer-button-bg)\",\r\n              borderRadius: \"5px\",\r\n              transition: \"background-color 0.3s, border-color 0.3s\",\r\n            }}\r\n          >\r\n            {question.equation ? <MathComponent tex={option} /> : option}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"floating-bar\">\r\n        <div className=\"left-icons\">\r\n          <CollectionIcon\r\n            className=\"icon\"\r\n            size={18}\r\n            style={{\r\n              color: hasPrivateCollectionForCurrentQuestion\r\n                ? \"var(--button-checked-bg)\"\r\n                : \"black\",\r\n              strokeWidth: 0.1,\r\n              boxShadow: hasPrivateCollectionForCurrentQuestion\r\n                ? \"inset 2px 2px 8px rgba(0, 0, 0, 0.2)\"\r\n                : \"none\",\r\n              transition:\r\n                \"color 0.4s ease, box-shadow 0.7s ease, background-color 0.3s ease\",\r\n            }}\r\n            onClick={() => setPrivateCollectionOpen(true)}\r\n          />\r\n          <PrivateCollection\r\n            isOpen={isPrivateCollectionOpen}\r\n            onClose={() => setPrivateCollectionOpen(false)}\r\n            questionId={question.id}\r\n          />\r\n\r\n          <NoteIcon\r\n            className=\"icon\"\r\n            size={20}\r\n            style={{\r\n              color: hasNoteForCurrentQuestion\r\n                ? \"var(--button-checked-bg)\"\r\n                : \"black\",\r\n              strokeWidth: 0.3,\r\n              boxShadow: hasNoteForCurrentQuestion\r\n                ? \"inset 2px 2px 8px rgba(0, 0, 0, 0.2)\"\r\n                : \"none\",\r\n              transition:\r\n                \"color 0.4s ease, box-shadow 0.7s ease, background-color 0.3s ease\",\r\n            }}\r\n            onClick={() => setPrivateNoteOpen(true)}\r\n          />\r\n          <PrivateNote\r\n            isOpen={isPrivateNoteOpen}\r\n            onClose={() => setPrivateNoteOpen(false)}\r\n            questionId={question.id}\r\n            foundIds={Object.keys(userNotesBank)}\r\n          />\r\n\r\n          <CommentIcon\r\n            className=\"icon\"\r\n            size={18}\r\n            style={{\r\n              strokeWidth: 0.5,\r\n              color: hasCommentsForCurrentQuestion\r\n                ? \"var(--button-checked-bg)\"\r\n                : \"black\",\r\n              boxShadow: hasCommentsForCurrentQuestion\r\n                ? \"inset 2px 2px 8px rgba(0, 0, 0, 0.2)\"\r\n                : \"none\",\r\n              transition:\r\n                \"color 0.4s ease, box-shadow 0.7s ease, background-color 0.3s ease\",\r\n            }}\r\n            onClick={() => setCommentSectionOpen(true)}\r\n          />\r\n          <CommentSection\r\n            isOpen={isCommentSectionOpen}\r\n            onClose={() => setCommentSectionOpen(false)}\r\n            questionId={question.id}\r\n            questionComments={questionComments}\r\n            setQuestionComments={setQuestionComments}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"right-section\">\r\n          <button\r\n            className=\"explanation-button\"\r\n            onClick={() => setModalOpen(true)}\r\n          >\r\n            <Icons.BsPatchQuestion size={20} />\r\n            Explanation\r\n          </button>\r\n          <ExplanationModal\r\n            isOpen={isModalOpen}\r\n            content={question.explanation}\r\n            onClose={() => setModalOpen(false)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionViewer;\r\n","import React from \"react\";\r\nimport Masonry from \"react-masonry-css\";\r\nimport { Icons } from \"../../../assets/icons/icons\";\r\nimport EmptyState from \"../../../components/EmptyState/EmptyState\";\r\nimport QuestionViewer from \"../QuestionViewer\";\r\n\r\nconst PrivateNotesDashboard = ({\r\n  isDetailVisible,\r\n  setPracticeDashboard,\r\n  setPrivateNoteDasboard,\r\n  searchTerm,\r\n  setSearchTerm,\r\n  filteredNotes,\r\n  getQuestionById,\r\n  handleCardClick,\r\n  activeQuestion,\r\n  activeNote,\r\n  handleCloseDetails,\r\n  isClosing,\r\n  userNotesBank,\r\n  userPrivateCollectionsBank,\r\n  questionComments,\r\n  setQuestionComments,\r\n}) => {\r\n  return (\r\n    <div className=\"private-notes-dashboard-container\">\r\n      <div\r\n        className={`quiz-settings-topbar ${isDetailVisible ? \"inactive\" : \"\"}`}\r\n      >\r\n        <Icons.HiMiniArrowLongLeft\r\n          className=\"back-to-quiz-dashboard-button circlehover\"\r\n          onClick={() => {\r\n            setPracticeDashboard(true);\r\n            setPrivateNoteDasboard(false);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className={`pnd-sc ${isDetailVisible ? \"inactive\" : \"\"}`}>\r\n        <div className=\"private-notes-search-container\">\r\n          <h2>Private Notes</h2>\r\n          <p>Search your notes by keywords, ID, or topic.</p>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search notes...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"note-card-holder\">\r\n          {filteredNotes.length === 0 ? (\r\n            <EmptyState type=\"emptyNote\" />\r\n          ) : (\r\n            <Masonry\r\n              breakpointCols={3}\r\n              className=\"my-masonry-grid\"\r\n              columnClassName=\"my-masonry-grid_column\"\r\n            >\r\n              {filteredNotes.map(([id, note]) => {\r\n                const question = getQuestionById(id);\r\n                if (!question) return null;\r\n                const truncatedNote =\r\n                  note.length > 150 ? `${note.slice(0, 150)}...` : note;\r\n                return (\r\n                  <div\r\n                    key={id}\r\n                    className=\"private-note-card\"\r\n                    onClick={() => handleCardClick(id)}\r\n                  >\r\n                    <h2>{question.subtopic}</h2>\r\n                    <h3>{truncatedNote}</h3>\r\n                    <div className=\"question-details\">\r\n                      <p>{question.id}</p>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </Masonry>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {isDetailVisible && activeQuestion && activeNote && (\r\n        <div className=\"quiz-settings-topbar-private-note\">\r\n          <Icons.HiMiniArrowLongLeft\r\n            className=\"back-to-quiz-dashboard-button circlehover\"\r\n            onClick={() => handleCloseDetails()}\r\n          />\r\n        </div>\r\n      )}\r\n      {isDetailVisible && activeQuestion && activeNote && (\r\n        <div\r\n          className={`detail-overlay ${isClosing ? \"slide-out\" : \"slide-in\"}`}\r\n        >\r\n          <QuestionViewer\r\n            question={activeQuestion}\r\n            userNotesBank={userNotesBank}\r\n            userPrivateCollectionsBank={userPrivateCollectionsBank}\r\n            questionComments={questionComments}\r\n            setQuestionComments={setQuestionComments}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrivateNotesDashboard;\r\n","import React, { useState } from \"react\";\r\nimport { Icons } from \"../../../assets/icons/icons\";\r\nimport QuestionViewer from \"../QuestionViewer\";\r\nimport EmptyState from \"../../../components/EmptyState/EmptyState\";\r\nimport \"./privateCollectionDashboard.css\";\r\n\r\nconst PrivateCollectionsDashboard = ({\r\n  setPracticeDashboard,\r\n  setPrivateCollectionDashboard,\r\n  isDetailVisible,\r\n  userPrivateCollectionsBank,\r\n  setActiveCollection,\r\n  activeCollection,\r\n  getQuestionsByCollection,\r\n  handleCardClick,\r\n  activeQuestion,\r\n  handleCloseDetails,\r\n  isClosing,\r\n  userNotesBank,\r\n  questionComments,\r\n  setQuestionComments,\r\n}) => {\r\n  const [isCollectionCardsVisible, setCollectionCardsVisible] = useState(false);\r\n  const [isPrivateCollections, setPrivateCollections] = useState(true);\r\n\r\n  return (\r\n    <div className=\"private-collections-dashboard-container\">\r\n      <div className=\"quiz-settings-topbar\">\r\n        <Icons.HiMiniArrowLongLeft\r\n          className=\"back-to-quiz-dashboard-button circlehover\"\r\n          onClick={() => {\r\n            setPracticeDashboard(true);\r\n            setPrivateCollectionDashboard(false);\r\n            setCollectionCardsVisible(false);\r\n          }}\r\n        />\r\n      </div>\r\n      <div\r\n        className={`pnd-sc-collection ${\r\n          isCollectionCardsVisible ? \"active\" : \"\"\r\n        } ${!isPrivateCollections ? \"collection-inactive\" : \"\"}`}\r\n      >\r\n        <div className=\"private-collections-list-container\">\r\n          <h2>Private Collections</h2>\r\n          {userPrivateCollectionsBank.length === 0 ? (\r\n            <EmptyState type=\"emptyCollections\" />\r\n          ) : (\r\n            userPrivateCollectionsBank.map((collection, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"collection-item\"\r\n                onClick={() => {\r\n                  setActiveCollection(collection);\r\n                  setCollectionCardsVisible(true);\r\n                }}\r\n              >\r\n                <div className=\"collection-itemleft-block\">\r\n                  <Icons.GoBookmarkFill\r\n                    size={22}\r\n                    style={{ color: collection.color }}\r\n                  />\r\n                  <p className=\"collection-item-name\">{collection.name}</p>\r\n                  <p className=\"item-counter\">({collection.items.length})</p>\r\n                </div>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n        <div className=\"collection-card-holder\">\r\n          {activeCollection ? (\r\n            getQuestionsByCollection(activeCollection).length === 0 ? (\r\n              <EmptyState type=\"emptyQuestions\" />\r\n            ) : (\r\n              getQuestionsByCollection(activeCollection).map((question) => (\r\n                <div\r\n                  key={question.id}\r\n                  className=\"private-collection-card\"\r\n                  onClick={() => {\r\n                    handleCardClick(question.id);\r\n                    setPrivateCollections(false);\r\n                  }}\r\n                >\r\n                  <h2>{question.question}</h2>\r\n                  <div className=\"private-card-details\">\r\n                    <p>{question.id}</p>\r\n                    <p>{question.subtopic}</p>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            )\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      {isDetailVisible && activeQuestion && (\r\n        <div className=\"quiz-settings-topbar-private-collection\">\r\n          <Icons.HiMiniArrowLongLeft\r\n            className=\"back-to-quiz-dashboard-button circlehover\"\r\n            onClick={() => {\r\n              handleCloseDetails();\r\n              setPrivateCollections(true);\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n      {isDetailVisible && activeQuestion && (\r\n        <div\r\n          className={`detail-overlay ${isClosing ? \"slide-out\" : \"slide-in\"}`}\r\n        >\r\n          <QuestionViewer\r\n            question={activeQuestion}\r\n            userNotesBank={userNotesBank}\r\n            userPrivateCollectionsBank={userPrivateCollectionsBank}\r\n            questionComments={questionComments}\r\n            setQuestionComments={setQuestionComments}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrivateCollectionsDashboard;\r\n","import React, { useState } from \"react\";\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\nimport CommentSection from \"../CommentSection/CommentSection\";\r\nimport { Icons } from \"../../../assets/icons/icons\";\r\n\r\ndayjs.extend(relativeTime);\r\n\r\nconst PublicCommentsDashboard = ({\r\n  usersCommentsBank,\r\n  setPracticeDashboard,\r\n  setPublicCommentDashboard,\r\n}) => {\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [visibleComments, setVisibleComments] = useState(10);\r\n  const [isCommentSectionOpen, setCommentSectionOpen] = useState(false);\r\n  const [selectedQuestionWithComments, setSelectedQuestionWithComments] =\r\n    useState(null);\r\n  const [questionComments, setQuestionComments] = useState(usersCommentsBank);\r\n\r\n  const allComments = Object.keys(usersCommentsBank)\r\n    .flatMap((questionId) => {\r\n      return usersCommentsBank[questionId].flatMap((comment) => {\r\n        const commentWithQuestion = { ...comment, questionId, type: \"comment\" };\r\n        const repliesWithQuestion = comment.replies.map((reply) => ({\r\n          ...reply,\r\n          questionId,\r\n          type: \"reply\",\r\n          parentCommentId: comment.id,\r\n        }));\r\n        return [commentWithQuestion, ...repliesWithQuestion];\r\n      });\r\n    })\r\n    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n\r\n  const myComments = allComments.filter((item) => item.author === \"Péter\");\r\n\r\n  const displayedComments = showAll\r\n    ? allComments.slice(0, visibleComments)\r\n    : myComments.slice(0, visibleComments);\r\n\r\n  const handleShowMore = () => {\r\n    setVisibleComments((prev) => prev + 10);\r\n  };\r\n\r\n  const handleLike = (commentId, isReply = false, replyId = null) => {\r\n    const questionId = selectedQuestionWithComments?.id;\r\n    if (!questionId) return;\r\n\r\n    const updatedComments = { ...usersCommentsBank };\r\n    const comments = updatedComments[questionId] || [];\r\n\r\n    const updateLikes = (comment) => ({\r\n      ...comment,\r\n      likes: comment.likes + (comment.liked ? -1 : 1),\r\n      dislikes: comment.disliked ? comment.dislikes - 1 : comment.dislikes,\r\n      liked: !comment.liked,\r\n      disliked: false,\r\n    });\r\n\r\n    updatedComments[questionId] = comments.map((c) =>\r\n      isReply && c.id === commentId\r\n        ? {\r\n            ...c,\r\n            replies: c.replies.map((r) =>\r\n              r.id === replyId ? updateLikes(r) : r\r\n            ),\r\n          }\r\n        : c.id === commentId\r\n        ? updateLikes(c)\r\n        : c\r\n    );\r\n\r\n    setQuestionComments({ ...updatedComments });\r\n  };\r\n\r\n  const handleDislike = (commentId, isReply = false, replyId = null) => {\r\n    const questionId = selectedQuestionWithComments?.id;\r\n    if (!questionId) return;\r\n\r\n    const updatedComments = { ...usersCommentsBank };\r\n    const comments = updatedComments[questionId] || [];\r\n\r\n    const updateDislikes = (comment) => ({\r\n      ...comment,\r\n      dislikes: comment.dislikes + (comment.disliked ? -1 : 1),\r\n      likes: comment.liked ? comment.likes - 1 : comment.likes,\r\n      disliked: !comment.disliked,\r\n      liked: false,\r\n    });\r\n\r\n    updatedComments[questionId] = comments.map((c) =>\r\n      isReply && c.id === commentId\r\n        ? {\r\n            ...c,\r\n            replies: c.replies.map((r) =>\r\n              r.id === replyId ? updateDislikes(r) : r\r\n            ),\r\n          }\r\n        : c.id === commentId\r\n        ? updateDislikes(c)\r\n        : c\r\n    );\r\n\r\n    setQuestionComments({ ...updatedComments });\r\n  };\r\n\r\n  const deleteComment = (\r\n    commentId,\r\n    isReply = false,\r\n    parentCommentId = null\r\n  ) => {\r\n    const questionId = selectedQuestionWithComments?.id;\r\n    if (!questionId) return;\r\n\r\n    if (isReply) {\r\n      usersCommentsBank[questionId] = usersCommentsBank[questionId].map((c) =>\r\n        c.id === parentCommentId\r\n          ? { ...c, replies: c.replies.filter((r) => r.id !== commentId) }\r\n          : c\r\n      );\r\n    } else {\r\n      usersCommentsBank[questionId] = usersCommentsBank[questionId].filter(\r\n        (c) => c.id !== commentId\r\n      );\r\n    }\r\n\r\n    setQuestionComments({ ...usersCommentsBank });\r\n  };\r\n\r\n  return (\r\n    <div className=\"public-comments-dashboard-container\">\r\n      <div className=\"quiz-settings-topbar\">\r\n        <Icons.HiMiniArrowLongLeft\r\n          className=\"back-to-quiz-dashboard-button circlehover\"\r\n          onClick={() => {\r\n            setPracticeDashboard(true);\r\n            setPublicCommentDashboard(false);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"comment-dashboard-container\">\r\n        <div className=\"container-left\">\r\n          <div className=\"filter-buttons\">\r\n            <button onClick={() => setShowAll(true)}>Összes</button>\r\n            <button onClick={() => setShowAll(false)}>Saját</button>\r\n          </div>\r\n          {displayedComments.map((item) => (\r\n            <div\r\n              key={item.id}\r\n              className=\"comment-question-card\"\r\n              onClick={() => {\r\n                setCommentSectionOpen(true);\r\n                setSelectedQuestionWithComments({\r\n                  id: item.questionId,\r\n                });\r\n              }}\r\n            >\r\n              <div className=\"comment-item-card\">\r\n                <div className=\"comment-item-card-header\">\r\n                  <img\r\n                    src={item.avatar}\r\n                    alt={item.author}\r\n                    className=\"comment-avatar\"\r\n                  />\r\n                  <div className=\"comment-content\">\r\n                    <h3>{item.author}: </h3>\r\n                    <p>{item.content}</p>\r\n                  </div>\r\n                </div>\r\n                <p className=\"comment-timestamp\">\r\n                  {dayjs(item.timestamp).fromNow()}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          {(showAll ? allComments.length : myComments.length) >\r\n            visibleComments && (\r\n            <button onClick={handleShowMore} className=\"show-more-button\">\r\n              Show more\r\n            </button>\r\n          )}\r\n        </div>\r\n        <div className=\"container-right\">\r\n          {isCommentSectionOpen && selectedQuestionWithComments && (\r\n            <CommentSection\r\n              isOpen={isCommentSectionOpen}\r\n              onClose={() => setCommentSectionOpen(false)}\r\n              questionId={selectedQuestionWithComments.id}\r\n              questionComments={questionComments}\r\n              setQuestionComments={setQuestionComments}\r\n              onLike={handleLike}\r\n              onDislike={handleDislike}\r\n              onDelete={deleteComment}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PublicCommentsDashboard;\r\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n  useRef,\r\n} from \"react\";\r\nimport { Icons } from \"../../assets/icons/icons\";\r\nimport \"./EternalTimer.css\";\r\n\r\nconst EternalTimer = forwardRef(\r\n  (\r\n    {\r\n      eternalInitialTime,\r\n      onTimeUpdate,\r\n      onStop,\r\n      onStart,\r\n      onPause,\r\n      onResume,\r\n      onTimeOut,\r\n    },\r\n    ref\r\n  ) => {\r\n    const [timeRemaining, setTimeRemaining] = useState(eternalInitialTime);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [isPaused, setIsPaused] = useState(false);\r\n    const intervalIdRef = useRef(null); // Az intervalId tárolására\r\n    const remainingTimeRef = useRef(eternalInitialTime); // Ref a remainingTime tárolására\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      startTimer,\r\n      stopTimer,\r\n      pauseTimer,\r\n      resumeTimer,\r\n      resetTimer,\r\n      getRemainingTime: () => remainingTimeRef.current, // Közvetlen hozzáférés a remainingTime-hez\r\n    }));\r\n\r\n    const resetTimer = () => {\r\n      setTimeRemaining(eternalInitialTime);\r\n      remainingTimeRef.current = eternalInitialTime; // Ref frissítése\r\n      setIsRunning(false);\r\n      setIsPaused(false);\r\n      if (intervalIdRef.current) {\r\n        clearInterval(intervalIdRef.current);\r\n        intervalIdRef.current = null;\r\n      }\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (isRunning) {\r\n        intervalIdRef.current = setInterval(() => {\r\n          setTimeRemaining((prev) => {\r\n            if (prev > 0) {\r\n              const newTime = prev - 1;\r\n              remainingTimeRef.current = newTime; // Ref frissítése\r\n              return newTime;\r\n            } else {\r\n              clearInterval(intervalIdRef.current);\r\n              setIsRunning(false);\r\n              return 0;\r\n            }\r\n          });\r\n        }, 1000);\r\n      }\r\n\r\n      return () => {\r\n        if (intervalIdRef.current) {\r\n          clearInterval(intervalIdRef.current);\r\n          intervalIdRef.current = null;\r\n        }\r\n      };\r\n    }, [isRunning]);\r\n\r\n    useEffect(() => {\r\n      if (timeRemaining === 0 && !isRunning) {\r\n        if (onTimeOut) onTimeOut(0);\r\n      }\r\n    }, [timeRemaining, isRunning, onTimeOut]);\r\n\r\n    useEffect(() => {\r\n      if (onTimeUpdate) {\r\n        onTimeUpdate(timeRemaining);\r\n      }\r\n    }, [timeRemaining, onTimeUpdate]);\r\n\r\n    const startTimer = () => {\r\n      setIsRunning(true);\r\n      setIsPaused(false);\r\n      if (onStart) onStart();\r\n    };\r\n\r\n    const pauseTimer = () => {\r\n      if (intervalIdRef.current) {\r\n        clearInterval(intervalIdRef.current);\r\n        intervalIdRef.current = null;\r\n      }\r\n      setIsRunning(false);\r\n      setIsPaused(true);\r\n      if (onPause) onPause();\r\n    };\r\n\r\n    const resumeTimer = () => {\r\n      startTimer();\r\n      if (onResume) onResume();\r\n    };\r\n\r\n    const stopTimer = () => {\r\n      if (intervalIdRef.current) {\r\n        clearInterval(intervalIdRef.current);\r\n        intervalIdRef.current = null;\r\n      }\r\n      setIsRunning(false);\r\n      setIsPaused(false);\r\n\r\n      if (timeRemaining === 0 && onTimeOut) {\r\n        onTimeOut(timeRemaining);\r\n      } else if (onStop) {\r\n        onStop(remainingTimeRef.current); // Ref használata a pontos idő továbbításához\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"eternal-timer-container\">\r\n          <Icons.IoHourglassOutline />\r\n          <div className=\"time-format\">\r\n            {Math.floor(timeRemaining / 60)}:\r\n            {(timeRemaining % 60).toString().padStart(2, \"0\")}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"hidden-buttons\">\r\n          <button\r\n            onClick={startTimer}\r\n            disabled={isRunning || timeRemaining === 0}\r\n          >\r\n            Start\r\n          </button>\r\n          <button onClick={pauseTimer} disabled={!isRunning || isPaused}>\r\n            Pause\r\n          </button>\r\n          <button\r\n            onClick={resumeTimer}\r\n            disabled={!isPaused || timeRemaining === 0}\r\n          >\r\n            Resume\r\n          </button>\r\n          <button onClick={stopTimer} disabled={!isRunning && !isPaused}>\r\n            Stop\r\n          </button>\r\n          <button\r\n            onClick={resetTimer}\r\n            disabled={isRunning || timeRemaining === eternalInitialTime}\r\n          >\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default EternalTimer;\r\n","import { useState, useCallback, useEffect } from \"react\";\r\n//import { mainTestBank } from \"../mainTestBank\"; // Importáljuk az adatokat\r\nimport { mainTestBank } from \"../../../data/hajduflyTestbank.js\";\r\nimport { userQuestionData } from \"../../../data/userLocalDatabase.js\"; // Importáljuk a userQuestionData-t\r\n\r\nconst defaultConfig = {\r\n  questionCount: 50,\r\n  difficultyLevels: [\"easy\", \"medium\", \"hard\"],\r\n  //  topics: [\"Mathematics\"],\r\n  topics: [\"Légi Jog\"],\r\n  timerMode: true,\r\n  timeLimit: 10,\r\n  questionSeenBefore: false,\r\n  questionAnsweredWrong: false,\r\n  questionRandomOrder: false,\r\n  automaticQuestionSubmit: true,\r\n  answerRevealMode: \"auto_submit\",\r\n};\r\n\r\nconst useQuizConfig = () => {\r\n  const [quizConfig, setQuizConfig] = useState(defaultConfig);\r\n  const [currentQuestions, setCurrentQuestions] = useState([]);\r\n  const [selectedQuestionCount, setSelectedQuestionCount] = useState(0);\r\n  const [userWrongAnswers, setUserWrongAnswers] = useState([]);\r\n  const [userSeenQuestions, setUserSeenQuestions] = useState([]);\r\n  const [selectedSubtopic, setSelectedSubtopic] = useState(\"All\");\r\n  const [isAllDifficultiesSelected, setIsAllDifficultiesSelected] =\r\n    useState(false);\r\n  const [filteredQuestionCount, setFilteredQuestionCount] = useState(0);\r\n\r\n  // Lokális adatok betöltése\r\n  useEffect(() => {\r\n    const loadLocalData = () => {\r\n      const { wrongAnswers, seenQuestions } = userQuestionData;\r\n      setUserWrongAnswers(wrongAnswers || []);\r\n      setUserSeenQuestions(seenQuestions || []);\r\n      console.log(\"User wrong answers:\", wrongAnswers); // Ellenőrzés céljából kiírjuk a konzolra\r\n      console.log(\"User seen questions:\", seenQuestions); // Ellenőrzés céljából kiírjuk a konzolra\r\n    };\r\n\r\n    loadLocalData();\r\n  }, []); // Ez a useEffect csak egyszer fut le, amikor a komponens mountolódik\r\n\r\n  const filterQuestions = useCallback(() => {\r\n    let filteredQuestions = [];\r\n    mainTestBank.forEach((topicData) => {\r\n      if (quizConfig.topics.includes(topicData.topic)) {\r\n        topicData.questions.forEach((question) => {\r\n          if (\r\n            quizConfig.difficultyLevels.includes(question.difficulty) &&\r\n            (selectedSubtopic === \"All\" ||\r\n              question.subtopic === selectedSubtopic)\r\n          ) {\r\n            filteredQuestions.push(question);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // További szűrések (hibás válaszok, látott kérdések, stb.)\r\n    if (quizConfig.questionAnsweredWrong) {\r\n      filteredQuestions = filteredQuestions.filter((question) =>\r\n        userWrongAnswers.includes(question.id)\r\n      );\r\n    }\r\n\r\n    if (quizConfig.questionSeenBefore) {\r\n      filteredQuestions = filteredQuestions.filter(\r\n        (question) => !userSeenQuestions.includes(question.id)\r\n      );\r\n    }\r\n\r\n    if (quizConfig.questionRandomOrder) {\r\n      filteredQuestions = filteredQuestions.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    setFilteredQuestionCount(filteredQuestions.length); // Frissítsd a szűrt kérdések számát\r\n    filteredQuestions = filteredQuestions.slice(0, quizConfig.questionCount);\r\n    setCurrentQuestions(filteredQuestions);\r\n    setSelectedQuestionCount(filteredQuestions.length); // Frissítjük a kérdések számát\r\n  }, [\r\n    quizConfig.difficultyLevels,\r\n    quizConfig.questionCount,\r\n    quizConfig.questionRandomOrder,\r\n    quizConfig.topics,\r\n    quizConfig.questionAnsweredWrong,\r\n    quizConfig.questionSeenBefore,\r\n    userWrongAnswers,\r\n    userSeenQuestions,\r\n    selectedSubtopic,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    filterQuestions();\r\n  }, [quizConfig, selectedSubtopic, filterQuestions]);\r\n\r\n  useEffect(() => {\r\n    filterQuestions(); // Mindig frissítjük a kérdések listáját, ha a konfiguráció vagy a subtopic változik\r\n  }, [quizConfig, selectedSubtopic, filterQuestions]);\r\n\r\n  useEffect(() => {\r\n    filterQuestions();\r\n  }, [quizConfig, filterQuestions]);\r\n\r\n  const restoreFilters = () => {\r\n    setQuizConfig(defaultConfig);\r\n  };\r\n  useEffect(() => {\r\n    // Ha minden difficulty level kiválasztva van, az \"All\" gomb aktívvá válik\r\n    if (\r\n      quizConfig.difficultyLevels.includes(\"easy\") &&\r\n      quizConfig.difficultyLevels.includes(\"medium\") &&\r\n      quizConfig.difficultyLevels.includes(\"hard\")\r\n    ) {\r\n      setIsAllDifficultiesSelected(true);\r\n    } else {\r\n      setIsAllDifficultiesSelected(false);\r\n    }\r\n  }, [quizConfig.difficultyLevels]);\r\n  const handleAnswerRevealModeChange = (newMode) => {\r\n    setQuizConfig((prevConfig) => ({\r\n      ...prevConfig,\r\n      answerRevealMode: newMode,\r\n    }));\r\n  };\r\n\r\n  const toggleTimerMode = () => {\r\n    setQuizConfig((prevConfig) => ({\r\n      ...prevConfig,\r\n      timerMode: !prevConfig.timerMode,\r\n    }));\r\n  };\r\n\r\n  const toggleAutomaticQuestionSubmit = () => {\r\n    setQuizConfig((prevConfig) => ({\r\n      ...prevConfig,\r\n      automaticQuestionSubmit: !prevConfig.automaticQuestionSubmit,\r\n    }));\r\n  };\r\n\r\n  const handleSubjectChange = (event) => {\r\n    const selectedTopic = event.target.value;\r\n    setQuizConfig((prevConfig) => ({\r\n      ...prevConfig,\r\n      topics: [selectedTopic],\r\n    }));\r\n    filterQuestions(); // Frissítjük a kérdések listáját a subject változásakor\r\n  };\r\n\r\n  const toggleSeenStatus = () => {\r\n    setQuizConfig((prevConfig) => ({\r\n      ...prevConfig,\r\n      questionSeenBefore: !prevConfig.questionSeenBefore,\r\n    }));\r\n  };\r\n\r\n  const toggleAnsweredWrongStatus = () => {\r\n    setQuizConfig((prevConfig) => ({\r\n      ...prevConfig,\r\n      questionAnsweredWrong: !prevConfig.questionAnsweredWrong,\r\n    }));\r\n  };\r\n\r\n  const toggleRandomQuestionOrderStatus = () => {\r\n    setQuizConfig((prevConfig) => ({\r\n      ...prevConfig,\r\n      questionRandomOrder: !prevConfig.questionRandomOrder,\r\n    }));\r\n  };\r\n\r\n  const toggleDifficulty = (difficulty) => {\r\n    if (isAllDifficultiesSelected) {\r\n      // Ha az \"All\" gomb aktív, csak a kiválasztott difficulty level maradjon kiválasztva\r\n      setQuizConfig((prevConfig) => ({\r\n        ...prevConfig,\r\n        difficultyLevels: [difficulty], // Csak a kiválasztott difficulty level marad\r\n      }));\r\n      setIsAllDifficultiesSelected(false); // Az \"All\" gomb inaktívvá válik\r\n    } else {\r\n      // Ha az \"All\" gomb inaktív, normálisan működik a difficulty level váltás\r\n      setQuizConfig((prevConfig) => {\r\n        let updatedLevels = prevConfig.difficultyLevels.includes(difficulty)\r\n          ? prevConfig.difficultyLevels.filter((level) => level !== difficulty)\r\n          : [...prevConfig.difficultyLevels, difficulty];\r\n\r\n        if (updatedLevels.length === 0) {\r\n          updatedLevels = [\"easy\"]; // Alapértelmezett érték, ha nincs kiválasztva semmi\r\n        }\r\n\r\n        return { ...prevConfig, difficultyLevels: updatedLevels };\r\n      });\r\n    }\r\n  };\r\n  const toggleAllDifficulties = () => {\r\n    if (isAllDifficultiesSelected) {\r\n      // Ha az \"All\" gomb aktív, visszaállítjuk az alapértelmezett értékeket\r\n      setQuizConfig((prevConfig) => ({\r\n        ...prevConfig,\r\n        difficultyLevels: [\"easy\"], // Vagy bármilyen alapértelmezett érték\r\n      }));\r\n    } else {\r\n      // Ha az \"All\" gomb inaktív, minden difficulty levelt bekapcsolunk\r\n      setQuizConfig((prevConfig) => ({\r\n        ...prevConfig,\r\n        difficultyLevels: [\"easy\", \"medium\", \"hard\"],\r\n      }));\r\n    }\r\n    setIsAllDifficultiesSelected((prev) => !prev); // Átváltjuk az \"All\" opció állapotát\r\n  };\r\n  const handleQuestionLimitChange = (event) => {\r\n    const limit = parseInt(event.target.value, 10);\r\n    setQuizConfig((prevConfig) => ({\r\n      ...prevConfig,\r\n      questionCount: isNaN(limit) ? \"\" : limit,\r\n    }));\r\n  };\r\n\r\n  const handleQuestionLimitBlur = () => {\r\n    if (!quizConfig.questionCount || quizConfig.questionCount < 1) {\r\n      window.showPopupMessage(\r\n        \"Oho - Let's include at least 10 maybe :)\",\r\n        3000,\r\n        \"#77DD77\",\r\n        \"black\"\r\n      );\r\n      setQuizConfig((prevConfig) => ({\r\n        ...prevConfig,\r\n        questionCount: 10,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleTimeLimitChange = (event) => {\r\n    const value = event.target.value;\r\n    setQuizConfig((prevConfig) => ({\r\n      ...prevConfig,\r\n      timeLimit: value === \"\" ? \"\" : parseInt(value, 10),\r\n    }));\r\n  };\r\n\r\n  const handleTimeLimitBlur = () => {\r\n    if (!quizConfig.timeLimit || quizConfig.timeLimit <= 0) {\r\n      window.showPopupMessage(\r\n        \"Oho - Maybe 10 minutes will be enough :)\",\r\n        3000,\r\n        \"#77DD77\",\r\n        \"black\"\r\n      );\r\n      setQuizConfig((prevConfig) => ({\r\n        ...prevConfig,\r\n        timeLimit: 10,\r\n      }));\r\n    }\r\n  };\r\n\r\n  return {\r\n    defaultConfig,\r\n    mainTestBank,\r\n    quizConfig,\r\n    currentQuestions,\r\n    selectedQuestionCount,\r\n    userWrongAnswers,\r\n    userSeenQuestions,\r\n    setUserSeenQuestions,\r\n    setUserWrongAnswers,\r\n    handleSubjectChange,\r\n    restoreFilters,\r\n    toggleSeenStatus,\r\n    toggleAnsweredWrongStatus,\r\n    toggleRandomQuestionOrderStatus,\r\n    toggleDifficulty,\r\n    toggleAllDifficulties,\r\n    handleQuestionLimitChange,\r\n    handleQuestionLimitBlur,\r\n    toggleTimerMode,\r\n    handleTimeLimitChange,\r\n    handleTimeLimitBlur,\r\n    toggleAutomaticQuestionSubmit,\r\n    handleAnswerRevealModeChange,\r\n    filterQuestions,\r\n    selectedSubtopic,\r\n    setSelectedSubtopic,\r\n    isAllDifficultiesSelected,\r\n    filteredQuestionCount,\r\n  };\r\n};\r\n\r\nexport default useQuizConfig;\r\n","import React, { useState } from \"react\";\r\nimport { IoCloseOutline } from \"react-icons/io5\";\r\nimport { CiViewList } from \"react-icons/ci\";\r\nimport { HiOutlineSquares2X2 } from \"react-icons/hi2\";\r\nimport \"./QuestionList.css\"; // Ne felejtsd el importálni a CSS-t\r\n\r\nconst QuestionList = ({\r\n  isVisible,\r\n  toggleSidebar,\r\n  currentQuestions,\r\n  userAnswers,\r\n  currentQuestionIndex,\r\n  navigateToQuestion,\r\n  quizConfig,\r\n  reviewMode, // Új prop a reviewMode állapothoz\r\n}) => {\r\n  const [isCompactView, setIsCompactView] = useState(true);\r\n\r\n  const toggleView = () => {\r\n    setIsCompactView((prev) => !prev);\r\n  };\r\n\r\n  const getBackgroundColor = (index, isAnswered, isCorrect) => {\r\n    // Ha reviewMode aktív, úgy viselkedjen, mint az \"auto_submit\" mód\r\n    if (reviewMode || quizConfig.answerRevealMode === \"auto_submit\") {\r\n      return index === currentQuestionIndex\r\n        ? \"var(--question-list-co-bg)\"\r\n        : isAnswered\r\n        ? isCorrect\r\n          ? \"rgb(110 180 98 / 37%)\"\r\n          : \"rgb(255 90 96 / 37%)\"\r\n        : \"var(--question-list-btn-bg)\";\r\n    } else if (quizConfig.answerRevealMode === \"after_test\") {\r\n      return index === currentQuestionIndex\r\n        ? \"var(--question-list-co-bg)\"\r\n        : isAnswered\r\n        ? \"rgb(181, 193, 202)\"\r\n        : \"var(--question-list-btn-bg)\";\r\n    } else {\r\n      return index === currentQuestionIndex\r\n        ? \"var(--question-list-co-bg)\"\r\n        : \"var(--question-list-btn-bg)\";\r\n    }\r\n  };\r\n\r\n  const getTextColor = (index, isAnswered, isCorrect) => {\r\n    if (reviewMode || quizConfig.answerRevealMode === \"auto_submit\") {\r\n      return index === currentQuestionIndex\r\n        ? \"var(--question-list-co-text)\"\r\n        : isAnswered\r\n        ? isCorrect\r\n          ? \"rgb(110 180 98)\"\r\n          : \"rgb(255 90 96)\"\r\n        : \"var(--question-list-btn-text)\";\r\n    } else if (quizConfig.answerRevealMode === \"after_test\") {\r\n      return index === currentQuestionIndex\r\n        ? \"var(--question-list-co-text)\"\r\n        : \"var(--question-list-btn-text)\";\r\n    } else {\r\n      return index === currentQuestionIndex\r\n        ? \"var(--question-list-co-text)\"\r\n        : \"var(--question-list-btn-text)\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`modal-overlay ${isVisible ? \"open\" : \"\"}`}\r\n        onClick={toggleSidebar}\r\n      ></div>\r\n      <div className=\"question-list-container\">\r\n        <div className={`question-list ${isVisible ? \"open\" : \"\"}`}>\r\n          <div className=\"header\">\r\n            <button className=\"close-button\" onClick={toggleSidebar}>\r\n              <IoCloseOutline />\r\n            </button>\r\n            <h3>Question List</h3>\r\n            <button onClick={toggleView} className=\"list-toggle-button\">\r\n              {isCompactView ? <CiViewList /> : <HiOutlineSquares2X2 />}\r\n            </button>\r\n          </div>\r\n          <div className=\"question-list-content-container\">\r\n            {isCompactView ? (\r\n              <div className=\"question-list-content\">\r\n                {currentQuestions.map((question, index) => {\r\n                  const userAnswer = userAnswers.find(\r\n                    (a) => a.questionId === question.id\r\n                  );\r\n                  const isAnswered = userAnswer !== undefined;\r\n                  const isCorrect =\r\n                    isAnswered && userAnswer.answer === question.answer;\r\n\r\n                  return (\r\n                    <div\r\n                      key={index}\r\n                      onClick={() => navigateToQuestion(index)}\r\n                      style={{\r\n                        width: \"50px\",\r\n                        height: \"50px\",\r\n                        backgroundColor: getBackgroundColor(\r\n                          index,\r\n                          isAnswered,\r\n                          isCorrect\r\n                        ),\r\n                        color: getTextColor(index, isAnswered, isCorrect),\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                        cursor: \"pointer\",\r\n                        borderRadius: \"4px\",\r\n                      }}\r\n                    >\r\n                      {index + 1}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            ) : (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  gap: \"10px\",\r\n                }}\r\n              >\r\n                {currentQuestions.map((question, index) => {\r\n                  const questionText =\r\n                    question.question || \"No question text available\";\r\n                  const userAnswer = userAnswers.find(\r\n                    (a) => a.questionId === question.id\r\n                  );\r\n                  const isAnswered = userAnswer !== undefined;\r\n                  const isCorrect =\r\n                    isAnswered && userAnswer.answer === question.answer;\r\n\r\n                  return (\r\n                    <div\r\n                      className=\"question-text\"\r\n                      key={index}\r\n                      onClick={() => navigateToQuestion(index)}\r\n                      style={{\r\n                        padding: \"10px\",\r\n                        backgroundColor: getBackgroundColor(\r\n                          index,\r\n                          isAnswered,\r\n                          isCorrect\r\n                        ),\r\n                        color: getTextColor(index, isAnswered, isCorrect),\r\n                        cursor: \"pointer\",\r\n                        borderRadius: \"4px\",\r\n                        textAlign: \"left\",\r\n                        borderBottom: \"2px solid #00000014\",\r\n                      }}\r\n                    >\r\n                      {questionText.length > 150\r\n                        ? questionText.substring(0, 150) + \"...\"\r\n                        : questionText}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionList;\r\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\n// DATA\r\nimport { userNotesBank } from \"../../data/userLocalDatabase\";\r\nimport { userPrivateCollectionsBank } from \"../../data/userLocalDatabase\";\r\nimport { usersCommentsBank } from \"../../data/usersCommentsBank\";\r\n// DASHBOARDS\r\nimport useNoteDashboard from \"./hooks/useNoteDashboard\";\r\nimport usePrivateCollectionDashboard from \"./hooks/usePrivateCollectionDashboard\";\r\nimport PracticeDashboard from \"./Dashboard/practiceDashboard\";\r\nimport PrivateNotesDashboard from \"./Dashboard/privateNotesDashboard\";\r\nimport PrivateCollectionsDashboard from \"./Dashboard/privateCollectionsDashboard\";\r\nimport PublicCommentsDashboard from \"./Dashboard/publicCommentsDashboard\";\r\n// COMPONENTS\r\nimport ActionConfirmationPopup from \"../../components/ActionConfirmationModal/ActionConfirmationModal\";\r\nimport EternalTimer from \"../../components/EternalTimer/EternalTimer\";\r\nimport useQuizConfig from \"./hooks/useQuizConfig\";\r\nimport ImageModal from \"./ImageModal/ImageModal\";\r\nimport CommentSection from \"./CommentSection/CommentSection\";\r\nimport MessagePopup from \"../../components/MessagePopup/MessagePopup\";\r\nimport PrivateNote from \"./privateNote\";\r\nimport PrivateCollection from \"./privateCollections\";\r\nimport QuestionList from \"./QuestionList\";\r\nimport ExplanationModal from \"./ExplanationModal\";\r\nimport { MathComponent } from \"mathjax-react\";\r\nimport { Icons } from \"../../assets/icons/icons\";\r\n// CSS\r\nimport \"katex/dist/katex.min.css\";\r\nimport \"./QuizApp.css\";\r\nimport \"../../components/Switch/Switch.css\";\r\nimport \"../../components/PerformanceGraph/PerformanceGraph.css\";\r\nimport \"dayjs/locale/en\";\r\nimport \"./quizResult.css\";\r\nimport \"./Dashboard/practiceDashboard.css\";\r\nimport \"./Dashboard/privateNoteDashboard.css\";\r\nimport \"./Dashboard/privateCollectionDashboard.css\";\r\nimport \"./Dashboard/commentDashboard.css\";\r\n\r\nconst QuizApp = ({ setTestModeOn }) => {\r\n  const {\r\n    defaultConfig,\r\n    mainTestBank,\r\n    quizConfig,\r\n    currentQuestions,\r\n    userWrongAnswers,\r\n    userSeenQuestions,\r\n    setUserSeenQuestions,\r\n    setUserWrongAnswers,\r\n    handleSubjectChange,\r\n    restoreFilters,\r\n    toggleSeenStatus,\r\n    toggleAnsweredWrongStatus,\r\n    toggleRandomQuestionOrderStatus,\r\n    toggleDifficulty,\r\n    toggleAllDifficulties,\r\n    handleQuestionLimitChange,\r\n    handleQuestionLimitBlur,\r\n    toggleTimerMode,\r\n    handleTimeLimitChange,\r\n    handleTimeLimitBlur,\r\n    toggleAutomaticQuestionSubmit,\r\n    handleAnswerRevealModeChange,\r\n    filterQuestions,\r\n    selectedSubtopic,\r\n    setSelectedSubtopic,\r\n    isAllDifficultiesSelected,\r\n    filteredQuestionCount,\r\n  } = useQuizConfig();\r\n  const {\r\n    isDetailVisible,\r\n    isClosing,\r\n    searchTerm,\r\n    setSearchTerm,\r\n    handleCardClick,\r\n    handleCloseDetails,\r\n    filteredNotes,\r\n    activeQuestion,\r\n    activeNote,\r\n    getQuestionById,\r\n  } = useNoteDashboard(mainTestBank, userNotesBank);\r\n  const { activeCollection, setActiveCollection, getQuestionsByCollection } =\r\n    usePrivateCollectionDashboard(mainTestBank, userPrivateCollectionsBank);\r\n\r\n  // MOBILE VIEW\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  //POPUPS\r\n  const [isPrivateNoteOpen, setPrivateNoteOpen] = useState(false);\r\n  const [isCommentSectionOpen, setCommentSectionOpen] = useState(false);\r\n  const [isSidebarVisible, setIsSidebarVisible] = useState(false);\r\n  const [isPrivateCollectionOpen, setPrivateCollectionOpen] = useState(false);\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const [isIconPopupboxOpen, setIconPopupboxOpen] = useState(false);\r\n  const [activePopup, setActivePopup] = useState(null);\r\n  // TIME COUNTING\r\n  const eternalTimerRef = useRef(null);\r\n  const [elapsedEternalTime, setElapsedEternalTime] = useState(null);\r\n  const [eternalInitialTime, setEternalInitialTime] = useState(\r\n    quizConfig.timeLimit * 60\r\n  );\r\n  // TEST DATAS / COMMENTS /\r\n  const [userPreviousTests, setUserPreviousTests] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [answeredQuestionsCount, setAnsweredQuestionsCount] = useState(0);\r\n  const [userAnswers, setUserAnswers] = useState([]);\r\n  const [questionComments, setQuestionComments] = useState({});\r\n  const [correctAnswers, setCorrectAnswers] = useState(0);\r\n  const [currentWrongAnswers, setCurrentWrongAnswers] = useState(0); // State to store the number of wrong answers\r\n  const [currentUnansweredQuestions, setCurrentUnansweredQuestions] =\r\n    useState(0); // State to store the number of unanswered questions\r\n\r\n  // QUIT STATUS\r\n  const [practiceDashboard, setPracticeDashboard] = useState(true);\r\n  const [privateNoteDasboard, setPrivateNoteDasboard] = useState(false);\r\n  const [privateCollectionDashboard, setPrivateCollectionDashboard] =\r\n    useState(false);\r\n  const [publicCommentDashboard, setPublicCommentDashboard] = useState(false);\r\n  const [quizStarted, setQuizStarted] = useState(false);\r\n  const [quizFinished, setQuizFinished] = useState(false);\r\n  const [reviewMode, setReviewMode] = useState(false); // After finishing the test, you can review the questions and answers.\r\n  const [feedback, setFeedback] = useState(null);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Added state\r\n  const [isAnswered, setIsAnswered] = useState(false); // Tracks if the answer has been submitted\r\n\r\n  //POPUP'S TEXTS\r\n  const popupsConfig = {\r\n    finishTest: {\r\n      question: \"Do you want to finish the test?\",\r\n      buttons: [\r\n        {\r\n          text: \"Yes, Finish and see the result\",\r\n          onClick: () => handleConfirmFinish(true),\r\n          icon: <Icons.FaFlagCheckered size={18} />,\r\n        },\r\n        {\r\n          text: \"No, return to the test\",\r\n          onClick: () => {\r\n            setActivePopup(null);\r\n            if (eternalTimerRef.current) {\r\n              eternalTimerRef.current.resumeTimer();\r\n            }\r\n          },\r\n          icon: (\r\n            <Icons.HiOutlineXMark\r\n              size={20}\r\n              style={{\r\n                strokeWidth: 2,\r\n              }}\r\n            />\r\n          ),\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  // DATA SAVE TO PREVIOUS TESTS DATA\r\n  const saveUserTestData = () => {\r\n    const testData = {\r\n      quizTimestamp: new Date().toISOString(),\r\n      correctAnswers,\r\n      totalQuestions: currentQuestions.length,\r\n      scorePercentage: Math.round(\r\n        (correctAnswers / currentQuestions.length) * 100\r\n      ),\r\n      currentWrongAnswers,\r\n      currentUnansweredQuestions,\r\n      totalTimeSpent: elapsedEternalTime,\r\n      eternalInitialTime,\r\n      userAnswers,\r\n      topic: quizConfig.topics,\r\n    };\r\n    setUserPreviousTests((prevTests) => [...prevTests, testData]);\r\n    console.log(\"test data\", testData);\r\n  };\r\n  const updateUserWrongAnswers = () => {\r\n    const newWrongAnswers = [...userWrongAnswers]; // Create a copy of the current wrong answers\r\n\r\n    userAnswers.forEach((userAnswer) => {\r\n      const question = currentQuestions.find(\r\n        (q) => q.id === userAnswer.questionId\r\n      );\r\n      const isCorrect = userAnswer.answer === question.answer;\r\n\r\n      if (isCorrect) {\r\n        // If the answer is correct and the question was in the wrong answers list, remove it\r\n        const index = newWrongAnswers.indexOf(question.id);\r\n        if (index !== -1) {\r\n          newWrongAnswers.splice(index, 1);\r\n        }\r\n      } else {\r\n        // If the answer is wrong and the question is not in the wrong answers list, add it\r\n        if (!newWrongAnswers.includes(question.id)) {\r\n          newWrongAnswers.push(question.id);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Sort the wrong answers alphabetically\r\n    setUserWrongAnswers(newWrongAnswers.sort((a, b) => a.localeCompare(b)));\r\n  };\r\n  const updateUserSeenQuestions = () => {\r\n    const newSeenQuestions = [...userSeenQuestions]; // Create a copy of the current seen questions\r\n\r\n    currentQuestions.forEach((question) => {\r\n      // Check if the user has answered the question\r\n      const hasAnswered = userAnswers.some(\r\n        (answer) => answer.questionId === question.id\r\n      );\r\n\r\n      // If the user has answered the question and it is not in the seen questions list, add it\r\n      if (hasAnswered && !newSeenQuestions.includes(question.id)) {\r\n        newSeenQuestions.push(question.id);\r\n      }\r\n    });\r\n\r\n    // Sort the seen questions\r\n    newSeenQuestions.sort((a, b) => a - b);\r\n\r\n    // Update the userSeenQuestions state\r\n    setUserSeenQuestions(newSeenQuestions);\r\n  };\r\n\r\n  // TEST RESULT DATAS\r\n  const currentQuestion = currentQuestions[currentQuestionIndex];\r\n  const progressPercentage =\r\n    (answeredQuestionsCount / currentQuestions.length) * 100;\r\n  const isFirstQuestion = currentQuestionIndex === 0;\r\n  const isLastQuestion = currentQuestionIndex === currentQuestions.length - 1;\r\n  const isSubmitButtonDisabled = !selectedAnswer;\r\n  const quizTimestamp = new Date().toISOString();\r\n  const scorePercentage = Math.round(\r\n    (correctAnswers / currentQuestions.length) * 100\r\n  );\r\n  const totalTimeSpent = elapsedEternalTime;\r\n  const averageScore = 15;\r\n  const comparisonIcon =\r\n    scorePercentage > averageScore ? (\r\n      <Icons.FaRegThumbsUp />\r\n    ) : (\r\n      <Icons.FaRegThumbsDown />\r\n    );\r\n  const comparison = scorePercentage > averageScore ? \"better\" : \"worse\";\r\n\r\n  // Detect screen size\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setIsMobile(window.innerWidth <= 768); // Mobile breakpoint\r\n    };\r\n    handleResize(); // Check on initial load\r\n    window.addEventListener(\"resize\", handleResize); // Check on resize\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n  // Timer change to sec\r\n  useEffect(() => {\r\n    setEternalInitialTime(quizConfig.timeLimit * 60); // Convert to seconds\r\n  }, [quizConfig.timeLimit]);\r\n  useEffect(() => {\r\n    if (quizConfig.saveAndNext && quizConfig.showCorrectAfterSet) {\r\n      console.error(\r\n        \"Invalid configuration: 'saveAndNext: true' requires 'showCorrectAfterSet: false'. Resetting to false.\"\r\n      );\r\n      quizConfig.showCorrectAfterSet = false;\r\n    }\r\n  }, [quizConfig]);\r\n  useEffect(() => {\r\n    if (quizStarted) {\r\n      filterQuestions();\r\n      if (quizConfig.timerMode && eternalTimerRef.current) {\r\n        eternalTimerRef.current.startTimer();\r\n      }\r\n    }\r\n  }, [quizStarted, quizConfig.timerMode, filterQuestions]);\r\n  useEffect(() => {\r\n    console.log(\"AFTER TEST user's Wrong Answers:\" + userWrongAnswers);\r\n    console.log(\"AFTER TEST user's Seen Questions:\" + userSeenQuestions);\r\n    console.log(\"AFTER TEST user's Private Notes:\", userNotesBank);\r\n  }, [userWrongAnswers, userSeenQuestions]);\r\n\r\n  const uniqueTopics = [\r\n    ...new Set(mainTestBank.map((section) => section.topic)),\r\n  ];\r\n  const uniqueSubtopics = [\r\n    ...new Set(\r\n      mainTestBank\r\n        .filter((topicData) => quizConfig.topics.includes(topicData.topic))\r\n        .flatMap((topicData) =>\r\n          topicData.questions.map((question) => question.subtopic)\r\n        )\r\n    ),\r\n  ];\r\n  const settingsSwitchGroupOptions = [\r\n    {\r\n      label: \"After completing the test\",\r\n      id: \"afterTest\",\r\n      value: \"after_test\",\r\n    },\r\n    {\r\n      label: \"Once I submit my answers\",\r\n      id: \"autoSubmit\",\r\n      value: \"auto_submit\",\r\n    },\r\n    {\r\n      label: \"Right away without answering\",\r\n      id: \"rightAway\",\r\n      value: \"right_away\",\r\n    },\r\n  ];\r\n\r\n  // TIME COUNTING\r\n  const handleStopEternalTimer = useCallback(() => {\r\n    if (eternalTimerRef.current) {\r\n      const remainingTime = eternalTimerRef.current.getRemainingTime();\r\n      console.log(\"Remaining Time:\", remainingTime);\r\n      const elapsedTime = eternalInitialTime - remainingTime;\r\n      setElapsedEternalTime(elapsedTime);\r\n      console.log(\"Elapsed Eternal Time:\", elapsedTime);\r\n      setQuizFinished(true);\r\n    }\r\n  }, [eternalInitialTime]);\r\n  const handleTimeRanOut = useCallback(\r\n    (remainingTime) => {\r\n      closeSidebars();\r\n      console.log(\"Time ran out automatically\");\r\n      const elapsedTime = eternalInitialTime - remainingTime;\r\n      setElapsedEternalTime(elapsedTime);\r\n      console.log(\"Elapsed Eternal Time:\", elapsedTime);\r\n      setQuizFinished(true);\r\n    },\r\n    [eternalInitialTime]\r\n  );\r\n  const handleTimeUpdate = useCallback((newTime) => {\r\n    if (newTime === 0 && eternalTimerRef.current) {\r\n      eternalTimerRef.current.stopTimer();\r\n    }\r\n  }, []);\r\n\r\n  // POPUPS AND SIDEBARS\r\n  const toggleSidebar = () => {\r\n    setIsSidebarVisible((prev) => !prev);\r\n  };\r\n\r\n  // NAVIGATION\r\n  const handleAnswerSubmit = (selectedAnswer) => {\r\n    if (isAnswered) {\r\n      return; // If already answered, do not allow changes\r\n    }\r\n\r\n    if (\r\n      userAnswers.some(\r\n        (a) => a.questionId === currentQuestions[currentQuestionIndex].id\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const currentQuestion = currentQuestions[currentQuestionIndex];\r\n    const isCorrect = selectedAnswer === currentQuestion.answer;\r\n\r\n    // Update the userAnswers state\r\n    const updatedUserAnswers = [\r\n      ...userAnswers,\r\n      { questionId: currentQuestion.id, answer: selectedAnswer },\r\n    ];\r\n    setUserAnswers(updatedUserAnswers);\r\n\r\n    // Count correct answers\r\n    const newCorrectAnswers = isCorrect ? correctAnswers + 1 : correctAnswers;\r\n    setCorrectAnswers(newCorrectAnswers);\r\n\r\n    // Count wrong answers\r\n    const newCurrentWrongAnswers = updatedUserAnswers.filter((userAnswer) => {\r\n      const question = currentQuestions.find(\r\n        (q) => q.id === userAnswer.questionId\r\n      );\r\n      return userAnswer.answer !== question.answer;\r\n    }).length;\r\n\r\n    // Update the number of wrong answers in the state\r\n    setCurrentWrongAnswers(newCurrentWrongAnswers);\r\n\r\n    // Count unanswered questions\r\n    const newUnansweredQuestions =\r\n      currentQuestions.length - newCorrectAnswers - newCurrentWrongAnswers;\r\n\r\n    // Update the number of unanswered questions in the state\r\n    setCurrentUnansweredQuestions(newUnansweredQuestions);\r\n\r\n    // Update the number of answered questions\r\n    setAnsweredQuestionsCount(answeredQuestionsCount + 1);\r\n\r\n    // Set feedback\r\n    setFeedback({\r\n      isCorrect,\r\n      selectedAnswer,\r\n      correctAnswer: currentQuestion.answer,\r\n    });\r\n\r\n    // Set that the answer has been submitted\r\n    setIsAnswered(true);\r\n  };\r\n  const handleNextQuestionArrow = () => {\r\n    if (currentQuestionIndex < currentQuestions.length - 1) {\r\n      navigateToQuestion(currentQuestionIndex + 1);\r\n    }\r\n  };\r\n  const handlePrevQuestionArrow = () => {\r\n    if (currentQuestionIndex > 0) {\r\n      navigateToQuestion(currentQuestionIndex - 1);\r\n    }\r\n  };\r\n  const handlePrevQuestion = () => {\r\n    if (currentQuestionIndex > 0) {\r\n      navigateToQuestion(currentQuestionIndex - 1);\r\n    } else {\r\n      setQuizFinished(true);\r\n    }\r\n  };\r\n  const handleNextQuestion = () => {\r\n    if (currentQuestionIndex < currentQuestions.length - 1) {\r\n      navigateToQuestion(currentQuestionIndex + 1);\r\n    } else {\r\n      setQuizFinished(true);\r\n    }\r\n  };\r\n  const navigateToQuestion = (index) => {\r\n    setCurrentQuestionIndex(index);\r\n    setIsAnswered(false); // Reset on new question\r\n\r\n    const userAnswer = userAnswers.find(\r\n      (a) => a.questionId === currentQuestions[index].id\r\n    );\r\n\r\n    if (userAnswer) {\r\n      const currentQuestion = currentQuestions[index];\r\n      setFeedback({\r\n        isCorrect: userAnswer.answer === currentQuestion.answer,\r\n        selectedAnswer: userAnswer.answer,\r\n        correctAnswer: currentQuestion.answer,\r\n      });\r\n      setSelectedAnswer(userAnswer.answer); // Set the selected answer\r\n    } else {\r\n      setFeedback(null); // If no answer, clear feedback\r\n      setSelectedAnswer(null); // Clear the selected answer\r\n    }\r\n  };\r\n\r\n  // QUIZ START FINNISH AND RESET\r\n  const handleStartQuiz = () => {\r\n    setTestModeOn(true); // Hide the Navbar in the test\r\n    console.log(\"Start The quiz\");\r\n    console.log(\"STARTER User Notes:\", userNotesBank);\r\n    console.log(\"STARTER user's Wrong Answers:\" + userWrongAnswers);\r\n    console.log(\"STARTER user's Seen Questions:\" + userSeenQuestions);\r\n    setQuizStarted(true);\r\n    filterQuestions();\r\n  };\r\n  const handleResetQuiz = () => {\r\n    setTestModeOn(false); //Show Navbar in the test\r\n    setQuizStarted(false);\r\n    setQuizFinished(false);\r\n    setCurrentQuestionIndex(0);\r\n    setUserAnswers([]);\r\n    setCorrectAnswers(0);\r\n    setFeedback(null);\r\n    setAnsweredQuestionsCount(0);\r\n    setIsSidebarVisible(false);\r\n    setSelectedAnswer(null); // Reset selected answer\r\n    setIsAnswered(false); // Reset answer state\r\n  };\r\n  const handleFinishQuiz = () => {\r\n    if (checkUnansweredQuestions()) {\r\n      eternalTimerRef.current.pauseTimer();\r\n      setActivePopup(\"finishTest\");\r\n    } else {\r\n      closeSidebars();\r\n      handleStopEternalTimer();\r\n      updateUserWrongAnswers();\r\n      updateUserSeenQuestions();\r\n      setQuizFinished(true);\r\n      saveUserTestData();\r\n      setTestModeOn(false);\r\n      console.log(\"Finish The quiz\");\r\n      console.log(\"AFTER TEST User Notes:\", userNotesBank);\r\n      console.log(\"AFTER TEST user's Wrong Answers:\" + userWrongAnswers);\r\n      console.log(\"AFTER TEST user's Seen Questions:\" + userSeenQuestions);\r\n    }\r\n  };\r\n  const handleConfirmFinish = (confirm) => {\r\n    if (confirm) {\r\n      closeSidebars();\r\n      handleStopEternalTimer();\r\n      updateUserWrongAnswers();\r\n      updateUserSeenQuestions();\r\n      setQuizFinished(true);\r\n      saveUserTestData();\r\n      setTestModeOn(false);\r\n      console.log(\"Finish The quiz\");\r\n    }\r\n    setActivePopup(false);\r\n  };\r\n  const closeSidebars = () => {\r\n    setPrivateNoteOpen(false);\r\n    setCommentSectionOpen(false);\r\n    setIsSidebarVisible(false);\r\n    setPrivateCollectionOpen(false);\r\n    setModalOpen(false);\r\n  };\r\n  const checkUnansweredQuestions = () => {\r\n    return currentQuestions.some(\r\n      (question) =>\r\n        !userAnswers.some((answer) => answer.questionId === question.id)\r\n    );\r\n  };\r\n\r\n  if (practiceDashboard) {\r\n    return (\r\n      <>\r\n        <div>\r\n          <PracticeDashboard\r\n            setPracticeDashboard={setPracticeDashboard}\r\n            setPrivateNoteDashboard={setPrivateNoteDasboard}\r\n            setPublicCommentDashboard={setPublicCommentDashboard}\r\n            setPrivateCollectionDashboard={setPrivateCollectionDashboard}\r\n            userNotesBank={userNotesBank}\r\n            userPrivateCollectionsBank={userPrivateCollectionsBank}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  if (publicCommentDashboard) {\r\n    return (\r\n      <PublicCommentsDashboard\r\n        usersCommentsBank={usersCommentsBank}\r\n        setPracticeDashboard={setPracticeDashboard}\r\n        setPublicCommentDashboard={setPublicCommentDashboard}\r\n      />\r\n    );\r\n  }\r\n  if (privateNoteDasboard) {\r\n    return (\r\n      <PrivateNotesDashboard\r\n        isDetailVisible={isDetailVisible}\r\n        setPracticeDashboard={setPracticeDashboard}\r\n        setPrivateNoteDasboard={setPrivateNoteDasboard}\r\n        searchTerm={searchTerm}\r\n        setSearchTerm={setSearchTerm}\r\n        filteredNotes={filteredNotes}\r\n        getQuestionById={getQuestionById}\r\n        handleCardClick={handleCardClick}\r\n        activeQuestion={activeQuestion}\r\n        activeNote={activeNote}\r\n        handleCloseDetails={handleCloseDetails}\r\n        isClosing={isClosing}\r\n        userNotesBank={userNotesBank}\r\n        userPrivateCollectionsBank={userPrivateCollectionsBank}\r\n        questionComments={questionComments}\r\n        setQuestionComments={setQuestionComments}\r\n      />\r\n    );\r\n  }\r\n  if (privateCollectionDashboard) {\r\n    return (\r\n      <PrivateCollectionsDashboard\r\n        setPracticeDashboard={setPracticeDashboard}\r\n        setPrivateCollectionDashboard={setPrivateCollectionDashboard}\r\n        isDetailVisible={isDetailVisible}\r\n        userPrivateCollectionsBank={userPrivateCollectionsBank}\r\n        setActiveCollection={setActiveCollection}\r\n        activeCollection={activeCollection}\r\n        getQuestionsByCollection={getQuestionsByCollection}\r\n        handleCardClick={handleCardClick}\r\n        activeQuestion={activeQuestion}\r\n        handleCloseDetails={handleCloseDetails}\r\n        isClosing={isClosing}\r\n        userNotesBank={userNotesBank}\r\n        questionComments={questionComments}\r\n        setQuestionComments={setQuestionComments}\r\n      />\r\n    );\r\n  }\r\n  if (quizFinished) {\r\n    return (\r\n      <div>\r\n        <div className=\"result-container\">\r\n          <div className=\"upper-container\">\r\n            <div className=\"exam-result-popup-content\">\r\n              <div className=\"latest-exam-result\">\r\n                <div className=\"scoreTextWrapper\">\r\n                  <div className=\"scoreText\">{scorePercentage}%</div>\r\n                </div>\r\n                <div className=\"custom-container\">\r\n                  <div className=\"custom-side-bar\"></div>\r\n                  <div className=\"custom-content\">\r\n                    <span className=\"custom-date\">{quizTimestamp}</span>\r\n                    <h2 className=\"custom-title\">{quizConfig.topics}</h2>\r\n\r\n                    <span className=\"custom-description\">This was a test</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"allExamsdata\">\r\n                <div className=\"ExamScoresContainer\">\r\n                  <div className=\"summaryCard\">\r\n                    <Icons.IoMdCheckmarkCircleOutline />\r\n                    <p>{correctAnswers}</p>\r\n                  </div>\r\n                  <div className=\"summaryCard\">\r\n                    <Icons.IoMdCloseCircleOutline />\r\n                    <p>{currentWrongAnswers}</p>\r\n                  </div>\r\n                  <div className=\"summaryCard\">\r\n                    <Icons.PiEmpty />\r\n                    <p>{currentUnansweredQuestions}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"timeContainer\">\r\n                  <div className=\"comparisonContainer\">\r\n                    <div className=\"iconWrapper\">{comparisonIcon}</div>\r\n                    <div className=\"textWrapper\">\r\n                      <p>Your result is: {comparison} than your average.</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"comparisonContainer\">\r\n                    <div className=\"iconWrapper\">\r\n                      <Icons.IoHourglassOutline />\r\n                    </div>\r\n                    <div className=\"textWrapper\">\r\n                      <h3>{`${Math.floor(totalTimeSpent / 60)}m ${\r\n                        totalTimeSpent % 60\r\n                      }s`}</h3>\r\n                      <p>Total time spent on exam</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <button\r\n                onClick={() => {\r\n                  setQuizFinished(false);\r\n                  setReviewMode(true);\r\n                  setCurrentQuestionIndex(0); // Jump to the first question\r\n                  setTestModeOn(true);\r\n                }}\r\n              >\r\n                <Icons.LuClipboardList /> Check all questions and answers\r\n              </button>\r\n            </div>\r\n            <div className=\"lower-container\">\r\n              <button className=\"start-quiz-button\" onClick={handleResetQuiz}>\r\n                <Icons.IoEnterOutline size={20} />\r\n                <p>Take a new test</p>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  if (!quizStarted) {\r\n    return (\r\n      <div className=\"quiz-settings-screen\">\r\n        <div className=\"quiz-settings-topbar\">\r\n          <Icons.HiMiniArrowLongLeft\r\n            className=\"back-to-quiz-dashboard-button circlehover\"\r\n            onClick={() => setPracticeDashboard(true)}\r\n          />\r\n        </div>\r\n        <MessagePopup />\r\n        <div className=\"filter-section\">\r\n          <h2>Filter Questions</h2>\r\n          <div className=\"select-subject-subtopic-container\">\r\n            <div className=\"subject-dropdown\">\r\n              <p className=\"label\">Subjects</p>\r\n              <select\r\n                id=\"subjects\"\r\n                name=\"subjects\"\r\n                onChange={(e) => {\r\n                  handleSubjectChange(e); // Handle subject change\r\n                  setSelectedSubtopic(\"All\"); // Reset the \"All\" subtopic\r\n                }}\r\n                defaultValue={defaultConfig.topics[0]}\r\n              >\r\n                {uniqueTopics.map((topic, index) => (\r\n                  <option key={index} value={topic}>\r\n                    {topic}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"subtopic-dropdown\">\r\n              <p className=\"label\">Subtopics</p>\r\n              <select\r\n                id=\"subtopics\"\r\n                name=\"subtopics\"\r\n                onChange={(e) => setSelectedSubtopic(e.target.value)}\r\n                value={selectedSubtopic}\r\n              >\r\n                <option value=\"All\">All</option>\r\n                {uniqueSubtopics.map((subtopic, index) => (\r\n                  <option key={index} value={subtopic}>\r\n                    {subtopic}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"action-buttons\">\r\n            <button\r\n              onClick={toggleSeenStatus}\r\n              className={`filter-button ${\r\n                quizConfig.questionSeenBefore ? \"checked\" : \"\"\r\n              }`}\r\n            >\r\n              {quizConfig.questionSeenBefore ? (\r\n                <Icons.FaRegEyeSlash size={18} />\r\n              ) : (\r\n                <Icons.FaRegEye size={18} />\r\n              )}\r\n              <p>I've never seen</p>\r\n            </button>\r\n\r\n            <button\r\n              onClick={toggleAnsweredWrongStatus}\r\n              className={`filter-button ${\r\n                quizConfig.questionAnsweredWrong ? \"checked\" : \"\"\r\n              }`}\r\n            >\r\n              {quizConfig.questionAnsweredWrong ? (\r\n                <Icons.BsExclamationCircle size={18} />\r\n              ) : (\r\n                <Icons.BsExclamationCircle size={18} />\r\n              )}\r\n              <p>I answered wrong</p>\r\n            </button>\r\n          </div>\r\n          <div className=\"question-difficulties\">\r\n            <p className=\"label\">Difficulty levels of questions</p>\r\n            <div className=\"difficulties-options\">\r\n              <button\r\n                onClick={toggleAllDifficulties}\r\n                className={`filter-button all-button ${\r\n                  isAllDifficultiesSelected ? \"checked\" : \"\"\r\n                }`}\r\n              >\r\n                All\r\n              </button>\r\n              <div className=\"difficulty-levels-block\">\r\n                <button\r\n                  onClick={() => toggleDifficulty(\"easy\")}\r\n                  className={`filter-button ${\r\n                    quizConfig.difficultyLevels.includes(\"easy\")\r\n                      ? \"checked\"\r\n                      : \"\"\r\n                  }`}\r\n                >\r\n                  Easy\r\n                </button>\r\n                <button\r\n                  onClick={() => toggleDifficulty(\"medium\")}\r\n                  className={`filter-button ${\r\n                    quizConfig.difficultyLevels.includes(\"medium\")\r\n                      ? \"checked\"\r\n                      : \"\"\r\n                  }`}\r\n                >\r\n                  Medium\r\n                </button>\r\n                <button\r\n                  onClick={() => toggleDifficulty(\"hard\")}\r\n                  className={`filter-button ${\r\n                    quizConfig.difficultyLevels.includes(\"hard\")\r\n                      ? \"checked\"\r\n                      : \"\"\r\n                  }`}\r\n                >\r\n                  Hard\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"question-limit\">\r\n            <p>Limit the questions to</p>\r\n            <input\r\n              type=\"number\"\r\n              id=\"limit1\"\r\n              className=\"question-limit-input\"\r\n              value={quizConfig.questionCount}\r\n              onChange={handleQuestionLimitChange}\r\n              onBlur={handleQuestionLimitBlur}\r\n            />\r\n            <p className=\"possible-questions-number\"> out of </p>\r\n            <p>{filteredQuestionCount}</p>\r\n          </div>\r\n          <div className=\"question-order\">\r\n            <button\r\n              onClick={toggleRandomQuestionOrderStatus}\r\n              className={`filter-button ${\r\n                quizConfig.questionRandomOrder ? \"checked\" : \"\"\r\n              }`}\r\n            >\r\n              {quizConfig.questionRandomOrder ? (\r\n                <Icons.LiaRandomSolid size={20} />\r\n              ) : (\r\n                <Icons.IoIosArrowRoundForward size={20} />\r\n              )}\r\n              <p>\r\n                {quizConfig.questionRandomOrder\r\n                  ? \"Randomize Question Order\"\r\n                  : \"Show Questions in Order\"}\r\n              </p>\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"clear-filters\">\r\n            <button\r\n              id=\"clear-filters\"\r\n              onClick={restoreFilters}\r\n              className=\"filter-button\"\r\n            >\r\n              <Icons.TbRestore size={18} />\r\n              <p>Restore filters</p>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"info-section\">\r\n          <div className=\"info-settings-section\">\r\n            <h2>Other configurations</h2>\r\n            <p className=\"label\">Display correct answers and explanations</p>\r\n            <div className=\"switch-group-container\">\r\n              {settingsSwitchGroupOptions.map((option) => (\r\n                <div key={option.id} className=\"switch-box\">\r\n                  <div className=\"switch-container\">\r\n                    <label className=\"switch\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={quizConfig.answerRevealMode === option.value}\r\n                        onChange={() =>\r\n                          handleAnswerRevealModeChange(option.value)\r\n                        }\r\n                      />\r\n                      <span className=\"slider round\"></span>\r\n                    </label>\r\n                  </div>\r\n                  <span className=\"switch-label\">{option.label}</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"select-switch-container\">\r\n              <div className=\"switch-box\">\r\n                <div className=\"switch-container\">\r\n                  <label className=\"switch\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={quizConfig.automaticQuestionSubmit}\r\n                      onChange={toggleAutomaticQuestionSubmit}\r\n                    />\r\n                    <span className=\"slider round\"></span>\r\n                  </label>\r\n                </div>\r\n                <span className=\"switch-label\">\r\n                  Automatically submit my answer on select\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div className=\"timer-switch-container\">\r\n              <div className=\"switch-box\">\r\n                <div className=\"switch-container\">\r\n                  <label className=\"switch\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={quizConfig.timerMode}\r\n                      onChange={toggleTimerMode} // Only the toggle function is needed\r\n                    />\r\n                    <span className=\"slider round\"></span>\r\n                  </label>\r\n                </div>\r\n                <span className=\"switch-label\">Timer mode</span>\r\n              </div>\r\n\r\n              {/* If quizConfig.timerMode is true, it should be visible by default */}\r\n              {quizConfig.timerMode && (\r\n                <div className=\"time-limit\">\r\n                  <p>Time Limit</p>\r\n                  <input\r\n                    type=\"number\"\r\n                    id=\"limit2\"\r\n                    className=\"question-limit-input\"\r\n                    value={quizConfig.timeLimit}\r\n                    onChange={handleTimeLimitChange}\r\n                    onBlur={handleTimeLimitBlur}\r\n                  />\r\n                  <p>min</p>\r\n                </div>\r\n              )}\r\n            </div>{\" \"}\r\n            {/*  */}\r\n            {/* <pre>{JSON.stringify(quizConfig, null, 2)}</pre>*/}\r\n          </div>\r\n          <div className=\"start-button-section\">\r\n            <button className=\"start-quiz-button\" onClick={handleStartQuiz}>\r\n              <Icons.IoEnterOutline size={20} />\r\n              <p>Start Practising</p>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  if (currentQuestions.length === 0) {\r\n    return <div>Loading questions...</div>;\r\n  }\r\n  const hasCommentsForCurrentQuestion =\r\n    usersCommentsBank[currentQuestions[currentQuestionIndex].id] !== undefined;\r\n\r\n  const hasNoteForCurrentQuestion =\r\n    userNotesBank[currentQuestions[currentQuestionIndex].id];\r\n\r\n  const CommentIcon = hasCommentsForCurrentQuestion\r\n    ? Icons.ImBubble\r\n    : Icons.SlBubble;\r\n\r\n  const NoteIcon = hasNoteForCurrentQuestion\r\n    ? Icons.FaNoteSticky\r\n    : Icons.CiStickyNote;\r\n\r\n  const hasPrivateCollectionForCurrentQuestion =\r\n    userPrivateCollectionsBank.some((collection) =>\r\n      collection.items.includes(currentQuestion.id)\r\n    );\r\n\r\n  const CollectionIcon = hasPrivateCollectionForCurrentQuestion\r\n    ? Icons.GoBookmarkFill\r\n    : Icons.GoBookmark;\r\n\r\n  return (\r\n    <div className=\"quiz-app-container\">\r\n      <QuestionList\r\n        isVisible={isSidebarVisible}\r\n        toggleSidebar={toggleSidebar}\r\n        currentQuestions={currentQuestions}\r\n        userAnswers={userAnswers}\r\n        currentQuestionIndex={currentQuestionIndex}\r\n        navigateToQuestion={navigateToQuestion}\r\n        quizConfig={quizConfig} // Only pass the necessary props\r\n        reviewMode={reviewMode} // Pass the reviewMode state here\r\n      />\r\n      {activePopup && (\r\n        <ActionConfirmationPopup\r\n          show={true}\r\n          onOverlayClick={() => {\r\n            setActivePopup(null);\r\n            if (eternalTimerRef.current) {\r\n              eternalTimerRef.current.resumeTimer();\r\n            }\r\n          }}\r\n          question={popupsConfig[activePopup].question}\r\n          buttons={popupsConfig[activePopup].buttons}\r\n        />\r\n      )}\r\n      <div className=\"quiz-top-bar\">\r\n        <Icons.HiOutlineXMark\r\n          className=\"x-exam-finnish-button\"\r\n          onClick={() => {\r\n            if (reviewMode) {\r\n              setQuizFinished(true);\r\n              setReviewMode(false);\r\n              setTestModeOn(false);\r\n            } else {\r\n              setActivePopup(\"finishTest\"); // Activate popup\r\n              if (eternalTimerRef.current) {\r\n                eternalTimerRef.current.pauseTimer();\r\n              }\r\n            }\r\n          }}\r\n          size={24}\r\n        />\r\n        <button onClick={toggleSidebar} className=\"toggle-button\">\r\n          <Icons.CiBoxList />\r\n        </button>\r\n      </div>\r\n      <div className=\"progress-bar\">\r\n        {!reviewMode && quizConfig.timerMode && (\r\n          <EternalTimer\r\n            ref={eternalTimerRef}\r\n            eternalInitialTime={eternalInitialTime}\r\n            onTimeUpdate={handleTimeUpdate}\r\n            onStop={handleStopEternalTimer}\r\n            onTimeOut={handleTimeRanOut}\r\n          />\r\n        )}\r\n\r\n        <progress value={progressPercentage} max=\"100\"></progress>\r\n\r\n        <div className=\"progress-numbers\">\r\n          <p>\r\n            {answeredQuestionsCount} / {currentQuestions.length}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"question-and-answer-container\">\r\n        <h2>{currentQuestion.question}</h2>\r\n        {currentQuestion.equation && (\r\n          <div className=\"math-equation\">\r\n            <MathComponent tex={currentQuestion.equation} />\r\n          </div>\r\n        )}\r\n        {currentQuestion.image && (\r\n          <ImageModal imageUrl={currentQuestion.image} />\r\n        )}\r\n        <div className=\"answers-container\">\r\n          {currentQuestion.options.map((option, index) => {\r\n            const isCorrect = feedback && option === feedback.correctAnswer;\r\n            const isSelected = selectedAnswer === option;\r\n            const isWrong = feedback && isSelected && !isCorrect;\r\n\r\n            return (\r\n              <div\r\n                className=\"answer-options\"\r\n                key={index}\r\n                style={{\r\n                  cursor:\r\n                    isAnswered ||\r\n                    userAnswers.some(\r\n                      (a) =>\r\n                        a.questionId ===\r\n                        currentQuestions[currentQuestionIndex].id\r\n                    ) ||\r\n                    reviewMode ||\r\n                    quizConfig.answerRevealMode === \"right_away\" // Disable clicking in right_away mode\r\n                      ? \"not-allowed\"\r\n                      : \"pointer\",\r\n                  backgroundColor: reviewMode\r\n                    ? userAnswers.some(\r\n                        (a) =>\r\n                          a.questionId ===\r\n                          currentQuestions[currentQuestionIndex].id\r\n                      ) // Check if the user has answered the question\r\n                      ? option === currentQuestion.answer\r\n                        ? \"var(--answer-correct)\"\r\n                        : isSelected\r\n                        ? \"var(--answer-wrong)\"\r\n                        : \"var(--answer-button-bg)\"\r\n                      : \"var(--answer-button-bg)\" // If not answered, do not show anything\r\n                    : quizConfig.answerRevealMode === \"after_test\"\r\n                    ? isSelected\r\n                      ? \"var(--answer-button-checked-bg)\"\r\n                      : \"var(--answer-button-bg)\"\r\n                    : quizConfig.answerRevealMode === \"right_away\"\r\n                    ? option === currentQuestion.answer\r\n                      ? \"var(--answer-correct)\" // Immediately show the correct answer\r\n                      : \"var(--answer-button-bg)\"\r\n                    : isCorrect\r\n                    ? \"var(--answer-correct)\"\r\n                    : isWrong\r\n                    ? \"var(--answer-wrong)\"\r\n                    : isSelected && !isAnswered\r\n                    ? \"var(--answer-button-checked-bg)\"\r\n                    : \"var(--answer-button-bg)\",\r\n                  borderRadius: \"5px\",\r\n                  transition: \"background-color 0.3s, border-color 0.3s\",\r\n                }}\r\n                onClick={() => {\r\n                  if (\r\n                    !isAnswered &&\r\n                    !userAnswers.some(\r\n                      (a) => a.questionId === currentQuestion.id\r\n                    ) &&\r\n                    !reviewMode &&\r\n                    quizConfig.answerRevealMode !== \"right_away\" // Only allow clicking if not in right_away mode\r\n                  ) {\r\n                    setSelectedAnswer(option);\r\n                    if (quizConfig.automaticQuestionSubmit) {\r\n                      handleAnswerSubmit(option);\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                {currentQuestion.equation ? (\r\n                  <MathComponent tex={option} />\r\n                ) : (\r\n                  option\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"floating-bar\">\r\n        <div className=\"left-icons\">\r\n          {isMobile ? (\r\n            <Icons.HiDotsVertical\r\n              className=\"icon\"\r\n              size={20} // Adjust the size if needed\r\n              style={{\r\n                color:\r\n                  hasPrivateCollectionForCurrentQuestion ||\r\n                  hasNoteForCurrentQuestion\r\n                    ? \"var(--button-checked-bg)\"\r\n                    : \"black\",\r\n                strokeWidth: 0.1,\r\n                boxShadow:\r\n                  hasPrivateCollectionForCurrentQuestion ||\r\n                  hasNoteForCurrentQuestion\r\n                    ? \"inset 2px 2px 8px rgba(0, 0, 0, 0.2)\"\r\n                    : \"none\",\r\n                transition:\r\n                  \"color 0.4s ease, box-shadow 0.7s ease, background-color 0.3s ease\",\r\n              }}\r\n              onClick={() => {\r\n                setIconPopupboxOpen((prev) => !prev); // Toggle the second state as well\r\n              }}\r\n            />\r\n          ) : (\r\n            <>\r\n              <CollectionIcon\r\n                className=\"icon\"\r\n                size={18}\r\n                style={{\r\n                  color: hasPrivateCollectionForCurrentQuestion\r\n                    ? \"var(--button-checked-bg)\"\r\n                    : \"black\",\r\n                  strokeWidth: 0.1,\r\n                  boxShadow: hasPrivateCollectionForCurrentQuestion\r\n                    ? \"inset 2px 2px 8px rgba(0, 0, 0, 0.2)\"\r\n                    : \"none\",\r\n                  transition:\r\n                    \"color 0.4s ease, box-shadow 0.7s ease, background-color 0.3s ease\",\r\n                }}\r\n                onClick={() => setPrivateCollectionOpen(true)}\r\n              />\r\n              <PrivateCollection\r\n                isOpen={isPrivateCollectionOpen}\r\n                onClose={() => setPrivateCollectionOpen(false)}\r\n                questionId={currentQuestions[currentQuestionIndex].id}\r\n              />\r\n\r\n              <NoteIcon\r\n                className=\"icon\"\r\n                size={20}\r\n                style={{\r\n                  color: hasNoteForCurrentQuestion\r\n                    ? \"var(--button-checked-bg)\"\r\n                    : \"black\",\r\n                  strokeWidth: 0.3,\r\n                  boxShadow: hasNoteForCurrentQuestion\r\n                    ? \"inset 2px 2px 8px rgba(0, 0, 0, 0.2)\"\r\n                    : \"none\",\r\n                  transition:\r\n                    \"color 0.4s ease, box-shadow 0.7s ease, background-color 0.3s ease\",\r\n                }}\r\n                onClick={() => setPrivateNoteOpen(true)}\r\n              />\r\n              <PrivateNote\r\n                isOpen={isPrivateNoteOpen}\r\n                onClose={() => setPrivateNoteOpen(false)}\r\n                questionId={currentQuestions[currentQuestionIndex].id}\r\n                foundIds={Object.keys(userNotesBank)} // Keys of existing notes\r\n              />\r\n              <CommentIcon\r\n                className=\"icon\"\r\n                size={18}\r\n                style={{\r\n                  strokeWidth: 0.5,\r\n                  color: hasCommentsForCurrentQuestion\r\n                    ? \"var(--button-checked-bg)\"\r\n                    : \"black\",\r\n                  boxShadow: hasCommentsForCurrentQuestion\r\n                    ? \"inset 2px 2px 8px rgba(0, 0, 0, 0.2)\"\r\n                    : \"none\",\r\n                  transition:\r\n                    \"color 0.4s ease, box-shadow 0.7s ease, background-color 0.3s ease\",\r\n                }}\r\n                onClick={() => setCommentSectionOpen(true)}\r\n              />\r\n              <CommentSection\r\n                isOpen={isCommentSectionOpen}\r\n                onClose={() => setCommentSectionOpen(false)}\r\n                questionId={currentQuestions[currentQuestionIndex].id} // Pass the questionId here\r\n                questionComments={questionComments}\r\n                setQuestionComments={setQuestionComments}\r\n              />\r\n            </>\r\n          )}\r\n\r\n          {/* Popup content */}\r\n          {isMobile && (\r\n            <div\r\n              className={`left-icons-popup-box ${\r\n                isIconPopupboxOpen ? \"open\" : \"\"\r\n              }`}\r\n            >\r\n              <div\r\n                className={`left-icons-popup-box-modal-overlay ${\r\n                  isIconPopupboxOpen ? \"open\" : \"\"\r\n                }`}\r\n                onClick={() => {\r\n                  setIconPopupboxOpen(false);\r\n                }}\r\n              ></div>\r\n              <div className=\"popup-item\">\r\n                <CollectionIcon\r\n                  className=\"icon\"\r\n                  size={18}\r\n                  style={{\r\n                    color: hasPrivateCollectionForCurrentQuestion\r\n                      ? \"var(--button-checked-bg)\"\r\n                      : \"black\",\r\n                    strokeWidth: 0.1,\r\n                    boxShadow: hasPrivateCollectionForCurrentQuestion\r\n                      ? \"inset 2px 2px 8px rgba(0, 0, 0, 0.2)\"\r\n                      : \"none\",\r\n                    transition: \"color 0.4s ease, box-shadow 0.7s ease\",\r\n                  }}\r\n                  onClick={() => setPrivateCollectionOpen(true)}\r\n                />\r\n                <PrivateCollection\r\n                  isOpen={isPrivateCollectionOpen}\r\n                  onClose={() => setPrivateCollectionOpen(false)}\r\n                  questionId={currentQuestions[currentQuestionIndex].id}\r\n                />\r\n              </div>\r\n              <div className=\"popup-item\">\r\n                <NoteIcon\r\n                  className=\"icon\"\r\n                  size={20}\r\n                  style={{\r\n                    color: hasNoteForCurrentQuestion\r\n                      ? \"var(--button-checked-bg)\"\r\n                      : \"black\",\r\n                    strokeWidth: 0.3,\r\n                    boxShadow: hasNoteForCurrentQuestion\r\n                      ? \"inset 2px 2px 8px rgba(0, 0, 0, 0.2)\"\r\n                      : \"none\",\r\n                    transition:\r\n                      \"color 0.4s ease, box-shadow 0.7s ease, background-color 0.7s ease\",\r\n                  }}\r\n                  onClick={() => setPrivateNoteOpen(true)}\r\n                />\r\n                <PrivateNote\r\n                  isOpen={isPrivateNoteOpen}\r\n                  onClose={() => setPrivateNoteOpen(false)}\r\n                  questionId={currentQuestions[currentQuestionIndex].id}\r\n                  foundIds={Object.keys(userNotesBank)} // Keys of existing notes\r\n                />\r\n              </div>\r\n              <div className=\"popup-item\">\r\n                <Icons.CiChat1\r\n                  className=\"icon\"\r\n                  size={18}\r\n                  style={{ strokeWidth: 0.5 }}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"middle-section\">\r\n          <Icons.IoIosArrowBack\r\n            className=\"arrow-icon \"\r\n            onClick={() =>\r\n              isAnswered ? handlePrevQuestion() : handlePrevQuestionArrow()\r\n            }\r\n            disabled={isFirstQuestion}\r\n            size={24}\r\n          />\r\n\r\n          <span className=\"number\">\r\n            {currentQuestionIndex + 1} / {currentQuestions.length}\r\n          </span>\r\n          <Icons.IoIosArrowForward\r\n            className=\"arrow-icon\"\r\n            onClick={() =>\r\n              isAnswered ? handleNextQuestion() : handleNextQuestionArrow()\r\n            }\r\n            disabled={isLastQuestion}\r\n            size={24}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"right-section\">\r\n          {(reviewMode || // Always visible in reviewMode\r\n            quizConfig.answerRevealMode === \"right_away\" || // Always visible in right_away mode\r\n            (quizConfig.answerRevealMode !== \"after_test\" &&\r\n              userAnswers.some(\r\n                (answer) =>\r\n                  answer.questionId ===\r\n                  currentQuestions[currentQuestionIndex].id\r\n              ))) && (\r\n            <div className=\"explanation-button-container\">\r\n              <button\r\n                className=\"explanation-button\"\r\n                onClick={() => setModalOpen(true)}\r\n              >\r\n                <Icons.BsPatchQuestion size={isMobile ? 20 : 15} />\r\n                {!isMobile && \"Explanation\"}\r\n              </button>\r\n\r\n              <ExplanationModal\r\n                isOpen={isModalOpen}\r\n                content={currentQuestions[currentQuestionIndex].explanation}\r\n                onClose={() => setModalOpen(false)}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <button\r\n            className=\"action-button\"\r\n            onClick={() => {\r\n              if (!reviewMode) {\r\n                if (\r\n                  quizConfig.answerRevealMode === \"right_away\" ||\r\n                  isAnswered\r\n                ) {\r\n                  if (isLastQuestion) {\r\n                    handleFinishQuiz();\r\n                  } else {\r\n                    handleNextQuestion();\r\n                  }\r\n                } else {\r\n                  handleAnswerSubmit(selectedAnswer);\r\n                }\r\n              }\r\n            }}\r\n            disabled={\r\n              reviewMode ||\r\n              (quizConfig.answerRevealMode !== \"right_away\" &&\r\n                isSubmitButtonDisabled) // Only disable if not in right_away mode\r\n            }\r\n          >\r\n            {isMobile ? (\r\n              reviewMode ? (\r\n                <Icons.IoEnterOutline />\r\n              ) : quizConfig.answerRevealMode === \"right_away\" || isAnswered ? (\r\n                isLastQuestion ? (\r\n                  <Icons.FaFlagCheckered size={20} />\r\n                ) : (\r\n                  <Icons.FaArrowRightLong size={22} />\r\n                )\r\n              ) : userAnswers.some(\r\n                  (answer) =>\r\n                    answer.questionId ===\r\n                    currentQuestions[currentQuestionIndex].id\r\n                ) ? (\r\n                <Icons.FaArrowRightLong size={22} />\r\n              ) : (\r\n                \"S\"\r\n              )\r\n            ) : reviewMode ? (\r\n              \"Submit Answer\"\r\n            ) : quizConfig.answerRevealMode === \"right_away\" || isAnswered ? (\r\n              isLastQuestion ? (\r\n                \"Finish\"\r\n              ) : (\r\n                \"Next\"\r\n              )\r\n            ) : userAnswers.some(\r\n                (answer) =>\r\n                  answer.questionId ===\r\n                  currentQuestions[currentQuestionIndex].id\r\n              ) ? (\r\n              \"Next\"\r\n            ) : (\r\n              \"Submit Answer\"\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizApp;\r\n","import React from \"react\";\r\nimport Quiz from \"../../tests/Quiz/QuizApp\";\r\n\r\nconst QuizZone = ({ setTestModeOn }) => {\r\n  return (\r\n    <div>\r\n      <Quiz setTestModeOn={setTestModeOn} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizZone;\r\n","import React, { useState } from \"react\";\r\nimport { AiOutlineExclamationCircle } from \"react-icons/ai\";\r\n\r\nimport \"./MessagePopup.css\";\r\n\r\nconst MessagePopup = () => {\r\n  const [messages, setMessages] = useState([]); // Az üzenetek tömbje\r\n\r\n  const showMessage = (\r\n    msg,\r\n    timeout,\r\n    color = \"#e83b51\",\r\n    textcolor = \"white\"\r\n  ) => {\r\n    // Szín hozzáadása, alapértelmezett értéke piros\r\n    const newMessage = {\r\n      id: Date.now(), // Egyedi azonosító a popupoknak\r\n      text: msg,\r\n      visible: true,\r\n      color: color, // Szín tárolása\r\n      textcolor: textcolor,\r\n    };\r\n\r\n    // Hozzáadjuk az új üzenetet\r\n    setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n\r\n    // Az üzenet eltűnését követő időzítő\r\n    setTimeout(() => {\r\n      setMessages((prevMessages) =>\r\n        prevMessages.map((message) =>\r\n          message.id === newMessage.id\r\n            ? { ...message, visible: false }\r\n            : message\r\n        )\r\n      );\r\n      // Az üzenet eltávolítása a kódból 1 másodperccel az eltűnés után (lehetővé téve az animáció futását)\r\n      setTimeout(() => {\r\n        setMessages((prevMessages) =>\r\n          prevMessages.filter((message) => message.id !== newMessage.id)\r\n        );\r\n      }, 400); // A második setTimeout a popup eltávolításához szükséges időt ad a kivonáshoz\r\n    }, timeout);\r\n  };\r\n\r\n  // Globálisan elérhető függvény, amit a szülő komponens hívhat\r\n  window.showPopupMessage = showMessage;\r\n\r\n  return (\r\n    <div>\r\n      {/* A popupok listája */}\r\n      <div className=\"popup-container\">\r\n        {messages.map((message) => (\r\n          <div\r\n            key={message.id}\r\n            className={`message-popup ${\r\n              message.visible ? \"popupVisible\" : \"popupHidden\"\r\n            }`}\r\n            style={{ backgroundColor: message.color, color: message.textcolor }} // Szín beállítása\r\n          >\r\n            <div className=\"message-popup-icon\">\r\n              <AiOutlineExclamationCircle />\r\n            </div>\r\n\r\n            <div>\r\n              <p className=\"popup-message\">{message.text}</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// használat: indow.showPopupMessage(\"Oho - Let's include at least 1 maybe :)\", 3000, \"#77DD77\", \"black\" );\r\n\r\nexport default MessagePopup;\r\n"],"names":["userPrivateCollectionsBank","name","color","items","userNotesBank","userQuestionData","wrongAnswers","seenQuestions","usersCommentsBank","id","author","avatar","content","timestamp","likes","dislikes","liked","disliked","replies","edited","useNoteDashboard","mainTestBank","isDetailVisible","setIsDetailVisible","useState","activeCardId","setActiveCardId","isClosing","setIsClosing","searchTerm","setSearchTerm","getQuestionById","useCallback","topic","question","questions","find","q","handleCardClick","setTimeout","getFilteredNotes","Object","entries","filter","_ref","note","subtopic","toLowerCase","includes","activeQuestion","activeNote","handleCloseDetails","filteredNotes","usePrivateCollectionDashboard","isCollectionDetailVisible","setIsCollectionDetailVisible","setActiveCollectionCardId","isCollectionClosing","setIsCollectionClosing","activeCollection","setActiveCollection","handleCollectionCardClick","handleCollectionCloseDetails","getQuestionsByCollection","collection","map","Boolean","setPracticeDashboard","setPrivateNoteDashboard","setPublicCommentDashboard","setPrivateCollectionDashboard","_jsxs","className","children","_jsx","onClick","Icons","CiPlay1","length","CiFileOn","CiChat1","CiBookmarkCheck","CiTimer","emptyStateTypes","emptyNote","icon","title","description","emptyComment","emptyCollections","GoBookmark","emptyQuestions","CiCircleQuestion","type","Icon","imageUrl","isModalOpen","setModalOpen","src","alt","isOpen","onClose","renderContent","item","index","MathComponent","tex","dangerouslySetInnerHTML","__html","ImageModal","_Fragment","IoCloseOutline","questionId","currentNote","setCurrentNote","activePopup","setActivePopup","isModified","setIsModified","charLimit","useEffect","handleSaveNote","trim","console","log","popupsConfig","saveNote","buttons","text","CiSaveDown1","size","style","strokeWidth","HiOutlineXMark","deleteNote","handleDeleteNote","GoTrash","hasSavedNote","handleOverlayClick","opacity","value","onChange","e","target","placeholder","ActionConfirmationPopup","show","onOverlayClick","privateCollections","setPrivateCollections","isCreating","setIsCreating","newCollectionName","setNewCollectionName","newCollectionColor","setNewCollectionColor","MessagePopup","CiCirclePlus","handleColorSelect","backgroundColor","FaBookmark","handleSaveCollection","some","window","showPopupMessage","newCollection","push","updatedCollections","i","isInCollection","handleToggleQuestionInCollection","GoBookmarkFill","IoRemoveCircleOutline","IoIosAddCircleOutline","formatTimestamp","now","Date","commentDate","diffInSeconds","Math","floor","diffInMinutes","diffInHours","diffInDays","toLocaleDateString","month","day","year","CommentList","comments","onReply","onLike","onDislike","onDelete","onEdit","editingCommentId","editedComment","setEditedComment","saveEdit","activeCommentOptions","setActiveCommentOptions","activeReplyOptions","setActiveReplyOptions","expandedComments","setExpandedComments","expandedReplies","setExpandedReplies","isEditing","setIsEditing","commentRefs","useRef","replyRefs","textareaRef","current","height","scrollHeight","truncateText","maxLength","slice","handleEditClick","commentId","handleSaveEdit","arguments","undefined","handleDeleteClick","handleCancel","comment","_comment$replies","isCommentExpanded","commentText","ref","el","commentElement","classList","remove","prev","add","toggleExpandComment","BsHandThumbsUpFill","BsHandThumbsUp","BsHandThumbsDownFill","BsHandThumbsDown","GoReply","toggleCommentOptions","HiOutlineDotsHorizontal","BsFillSendCheckFill","HiOutlinePencil","ImCancelCircle","HiOutlineTrash","reply","uniqueId","isReplyExpanded","replyText","toggleExpandReply","replyId","parentCommentId","replyElement","toggleReplyOptions","questionComments","setQuestionComments","isExpanded","setIsExpanded","newComment","setNewComment","replyingTo","setReplyingTo","setEditingCommentId","toggleCommentSection","reduce","total","commenter","zIndex","isReply","updatedComments","updateLikes","updatedLikes","updatedDislikes","c","r","updateDislikes","handleEdit","updateComment","rows","saveComment","alert","uuidv4","toISOString","_usersCommentsBank$qu","isPrivateNoteOpen","setPrivateNoteOpen","isCommentSectionOpen","setCommentSectionOpen","isPrivateCollectionOpen","setPrivateCollectionOpen","hasNoteForCurrentQuestion","NoteIcon","FaNoteSticky","CiStickyNote","hasPrivateCollectionForCurrentQuestion","CollectionIcon","hasCommentsForCurrentQuestion","CommentIcon","ImBubble","SlBubble","equation","image","options","option","answer","borderRadius","transition","boxShadow","PrivateCollection","PrivateNote","foundIds","keys","CommentSection","BsPatchQuestion","ExplanationModal","explanation","setPrivateNoteDasboard","HiMiniArrowLongLeft","EmptyState","Masonry","breakpointCols","columnClassName","_ref2","truncatedNote","QuestionViewer","isCollectionCardsVisible","setCollectionCardsVisible","isPrivateCollections","dayjs","relativeTime","showAll","setShowAll","visibleComments","setVisibleComments","selectedQuestionWithComments","setSelectedQuestionWithComments","allComments","flatMap","sort","a","b","myComments","displayedComments","fromNow","handleShowMore","forwardRef","eternalInitialTime","onTimeUpdate","onStop","onStart","onPause","onResume","onTimeOut","timeRemaining","setTimeRemaining","isRunning","setIsRunning","isPaused","setIsPaused","intervalIdRef","remainingTimeRef","useImperativeHandle","startTimer","stopTimer","pauseTimer","resumeTimer","resetTimer","getRemainingTime","clearInterval","setInterval","newTime","IoHourglassOutline","toString","padStart","disabled","defaultConfig","questionCount","difficultyLevels","topics","timerMode","timeLimit","questionSeenBefore","questionAnsweredWrong","questionRandomOrder","automaticQuestionSubmit","answerRevealMode","useQuizConfig","quizConfig","setQuizConfig","currentQuestions","setCurrentQuestions","selectedQuestionCount","setSelectedQuestionCount","userWrongAnswers","setUserWrongAnswers","userSeenQuestions","setUserSeenQuestions","selectedSubtopic","setSelectedSubtopic","isAllDifficultiesSelected","setIsAllDifficultiesSelected","filteredQuestionCount","setFilteredQuestionCount","loadLocalData","filterQuestions","filteredQuestions","forEach","topicData","difficulty","random","handleSubjectChange","event","selectedTopic","prevConfig","restoreFilters","toggleSeenStatus","toggleAnsweredWrongStatus","toggleRandomQuestionOrderStatus","toggleDifficulty","updatedLevels","level","toggleAllDifficulties","handleQuestionLimitChange","limit","parseInt","isNaN","handleQuestionLimitBlur","toggleTimerMode","handleTimeLimitChange","handleTimeLimitBlur","toggleAutomaticQuestionSubmit","handleAnswerRevealModeChange","newMode","isVisible","toggleSidebar","userAnswers","currentQuestionIndex","navigateToQuestion","reviewMode","isCompactView","setIsCompactView","getBackgroundColor","isAnswered","isCorrect","getTextColor","toggleView","CiViewList","HiOutlineSquares2X2","userAnswer","width","display","justifyContent","alignItems","cursor","flexDirection","gap","questionText","padding","textAlign","borderBottom","substring","setTestModeOn","isMobile","setIsMobile","isSidebarVisible","setIsSidebarVisible","isIconPopupboxOpen","setIconPopupboxOpen","eternalTimerRef","elapsedEternalTime","setElapsedEternalTime","setEternalInitialTime","userPreviousTests","setUserPreviousTests","setCurrentQuestionIndex","answeredQuestionsCount","setAnsweredQuestionsCount","setUserAnswers","correctAnswers","setCorrectAnswers","currentWrongAnswers","setCurrentWrongAnswers","currentUnansweredQuestions","setCurrentUnansweredQuestions","practiceDashboard","privateNoteDasboard","privateCollectionDashboard","publicCommentDashboard","quizStarted","setQuizStarted","quizFinished","setQuizFinished","setReviewMode","feedback","setFeedback","selectedAnswer","setSelectedAnswer","setIsAnswered","finishTest","handleConfirmFinish","FaFlagCheckered","saveUserTestData","testData","quizTimestamp","totalQuestions","scorePercentage","round","totalTimeSpent","prevTests","updateUserWrongAnswers","newWrongAnswers","indexOf","splice","localeCompare","updateUserSeenQuestions","newSeenQuestions","currentQuestion","progressPercentage","isFirstQuestion","isLastQuestion","isSubmitButtonDisabled","comparisonIcon","FaRegThumbsUp","FaRegThumbsDown","comparison","handleResize","innerWidth","addEventListener","removeEventListener","saveAndNext","showCorrectAfterSet","error","uniqueTopics","Set","section","uniqueSubtopics","settingsSwitchGroupOptions","label","handleStopEternalTimer","remainingTime","elapsedTime","handleTimeRanOut","closeSidebars","handleTimeUpdate","handleAnswerSubmit","updatedUserAnswers","newCorrectAnswers","newCurrentWrongAnswers","newUnansweredQuestions","correctAnswer","handleNextQuestion","handleStartQuiz","handleResetQuiz","confirm","checkUnansweredQuestions","PracticeDashboard","PublicCommentsDashboard","PrivateNotesDashboard","PrivateCollectionsDashboard","IoMdCheckmarkCircleOutline","IoMdCloseCircleOutline","PiEmpty","LuClipboardList","IoEnterOutline","defaultValue","FaRegEyeSlash","FaRegEye","BsExclamationCircle","onBlur","LiaRandomSolid","IoIosArrowRoundForward","TbRestore","checked","QuestionList","CiBoxList","EternalTimer","max","isSelected","isWrong","HiDotsVertical","IoIosArrowBack","IoIosArrowForward","FaArrowRightLong","Quiz","messages","setMessages","msg","timeout","textcolor","newMessage","visible","prevMessages","message","AiOutlineExclamationCircle"],"sourceRoot":""}