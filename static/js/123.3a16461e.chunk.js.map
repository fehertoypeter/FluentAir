{"version":3,"file":"static/js/123.3a16461e.chunk.js","mappings":"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","sources":["pages/AcousticMemory/ExamFinishPopup.js","components/SettingsPopup/SettingsPopup.js","components/Input/Input.js","components/ActionConfirmationModal/ActionConfirmationModal.js","pages/AcousticMemory/CustomSwitch.js","components/NumericInputPad/NumericInputPad.js","components/RadioButtons/RadioButtons.js","components/AudioAnimation/AudioAnimation.js","pages/AcousticMemory/AcousticMemory.js","components/Switch/Switch.js","components/MessagePopup/MessagePopup.js","tests/NumberPairConcentration/NumberPairConcentrationResultPopup.js","pages/AcousticMemory/audio|sync|nonrecursive|/.mp3$"],"sourcesContent":["import React from \"react\";\r\nimport { FaFlagCheckered } from \"react-icons/fa\";\r\nimport { FaXmark } from \"react-icons/fa6\";\r\nimport \"./ExamFinishPopup.css\"; // Popup stílusok\r\n\r\nconst ExamFinishPopup = ({ onConfirm, onCancel }) => {\r\n  return (\r\n    <div className=\"exam-finish-popup-overlay\">\r\n      <div className=\"exam-finish-popup\">\r\n        <div className=\"exam-finish-popup-header\">\r\n          <p>Do you want to finish the exam?</p>\r\n        </div>\r\n\r\n        <div className=\"exam-finish-popup-buttons\">\r\n          <button onClick={onConfirm} className=\"confirm-button\">\r\n            <FaFlagCheckered />\r\n            <p>Yes, finish and see the result</p>\r\n          </button>\r\n          <button onClick={onCancel} className=\"cancel-button\">\r\n            <FaXmark />\r\n            <p>No, continue the exam</p>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExamFinishPopup;\r\n","// SettingsPopup.js\r\nimport React, { useEffect } from \"react\";\r\nimport { IoIosCloseCircleOutline } from \"react-icons/io\";\r\nimport \"./SettingsPopup.css\";\r\n\r\nconst SettingsPopup = ({ isOpen, onClose, children }) => {\r\n  const handleOutsideClick = (event) => {\r\n    if (event.target.classList.contains(\"popup-overlay\")) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleEscape = (event) => {\r\n      if (event.key === \"Escape\") {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleEscape);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleEscape);\r\n    };\r\n  }, [onClose]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"popup-overlay\" onClick={handleOutsideClick}>\r\n      <div className=\"popup-content\">\r\n        <IoIosCloseCircleOutline className=\"close-button\" onClick={onClose}>\r\n          &times;\r\n        </IoIosCloseCircleOutline>\r\n        <h2>Settings</h2>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsPopup;\r\n","import React from \"react\";\r\nimport \"./Input.css\"; // Importáljuk a CSS-t\r\n\r\nconst Input = ({ value, onChange, id, placeholder, description }) => {\r\n  return (\r\n    <div className=\"settings-row modified mt30\">\r\n      <div>\r\n        <div className=\"inputBox\">\r\n          <input\r\n            type=\"text\"\r\n            id={id}\r\n            value={value}\r\n            onChange={onChange}\r\n            required\r\n          />\r\n          <span>{placeholder}</span>\r\n        </div>\r\n      </div>\r\n      <p>{description}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Icons } from \"../../assets/icons/icons\";\r\nimport \"./ActionConfirmationModal.css\";\r\n\r\nconst ActionConfirmationPopup = ({\r\n  show,\r\n  onOverlayClick,\r\n  question,\r\n  buttons,\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <div className=\"action-confirmation-popup-overlay\" onClick={onOverlayClick}>\r\n      <div\r\n        className=\"action-confirmation-popup-content\"\r\n        onClick={(e) => e.stopPropagation()} // Prevent click from propagating to overlay\r\n      >\r\n        <div className=\"action-confirmation-popup-content-header\">\r\n          <Icons.HiOutlineXMark\r\n            size={24}\r\n            className=\"action-confirmation-popup-close-icon\"\r\n            onClick={onOverlayClick}\r\n            style={{\r\n              strokeWidth: 2,\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <p>{question}</p>\r\n        <div className=\"button-group\">\r\n          {buttons.map((button, index) => (\r\n            <button\r\n              key={index}\r\n              onClick={button.onClick}\r\n              className={button.className || \"\"}\r\n            >\r\n              <div className=\"action-confirmation-popup-content-button-group-icon\">\r\n                {button.icon && button.icon}\r\n              </div>\r\n              <div className=\"action-confirmation-popup-content-button-group-text\">\r\n                <p>{button.text}</p>\r\n              </div>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nActionConfirmationPopup.propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  onOverlayClick: PropTypes.func.isRequired,\r\n  question: PropTypes.string.isRequired,\r\n  buttons: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      text: PropTypes.string.isRequired,\r\n      onClick: PropTypes.func.isRequired,\r\n      icon: PropTypes.node,\r\n      className: PropTypes.string,\r\n    })\r\n  ).isRequired,\r\n};\r\n\r\nexport default ActionConfirmationPopup;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./CustomSwitch.css\";\r\n\r\nconst CustomSwitch = ({\r\n  setting,\r\n  onChange,\r\n  isExamActive,\r\n  onPopupRequest,\r\n  resetInput,\r\n}) => {\r\n  const [isActive, setIsActive] = useState(setting.value);\r\n\r\n  // Az állapotot frissítjük, ha a setting változik\r\n  useEffect(() => {\r\n    setIsActive(setting.value);\r\n  }, [setting.value]);\r\n\r\n  const handleToggle = () => {\r\n    resetInput();\r\n    // Ha az exam aktív, kérjük a popup megjelenítését\r\n    if (isExamActive) {\r\n      onPopupRequest(); // Meghívjuk a szülő komponensben lévő popup megjelenítésére szolgáló függvényt\r\n\r\n      return; // Megállítjuk a toggle végrehajtását\r\n    }\r\n\r\n    // Ha nem aktív az exam, akkor folytatódik a toggle\r\n    const newValue = !isActive;\r\n    setIsActive(newValue);\r\n    onChange(setting.id, newValue); // Átadjuk a változást a szülő komponensnek\r\n  };\r\n\r\n  return (\r\n    <div className=\"custom-switch\" onClick={handleToggle}>\r\n      <div\r\n        className={`switch-option ${!isActive ? \"active\" : \"\"}`}\r\n        style={{\r\n          backgroundColor: !isActive ? \"white\" : \"transparent\",\r\n        }}\r\n      >\r\n        Practice\r\n      </div>\r\n      <div\r\n        className={`switch-option ${isActive ? \"active\" : \"\"}`}\r\n        style={{\r\n          backgroundColor: isActive ? \"white\" : \"transparent\",\r\n        }}\r\n      >\r\n        Exam\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomSwitch;\r\n","import React from \"react\";\r\nimport \"./NumericInputPad.css\";\r\n\r\nlet isClickable = true; // Globális változó, amely vezérli a gombok kattinthatóságát\r\n\r\n// Függvény a kattinthatóság állapotának beállításához\r\nexport const numericInputPadClickable = (state) => {\r\n  isClickable = state;\r\n};\r\n\r\nconst NumericInputPad = ({ inputRef, onInputChange }) => {\r\n  const handleButtonClick = (digit) => {\r\n    if (inputRef.current && isClickable) {\r\n      inputRef.current.value += digit;\r\n      onInputChange(inputRef.current.value); // Update the state directly\r\n    }\r\n  };\r\n\r\n  const handleClearInput = () => {\r\n    if (inputRef.current && isClickable) {\r\n      inputRef.current.value = inputRef.current.value.slice(0, -1);\r\n      onInputChange(inputRef.current.value); // Update the state directly\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"input-buttons\" className=\"unloaded\">\r\n      {Array.from({ length: 9 }, (_, index) => (\r\n        <button\r\n          key={index + 1}\r\n          className=\"input-button\"\r\n          data-digit={index + 1}\r\n          onClick={() => handleButtonClick(index + 1)}\r\n          disabled={!isClickable} // Disable button if not clickable\r\n        >\r\n          {index + 1}\r\n        </button>\r\n      ))}\r\n      <button\r\n        className=\"input-button wide-button\"\r\n        data-digit=\"0\"\r\n        onClick={() => handleButtonClick(0)}\r\n        disabled={!isClickable} // Disable the '0' button\r\n      >\r\n        0\r\n      </button>\r\n      <button\r\n        id=\"clearInput\"\r\n        className=\"input-button clear-button\"\r\n        onClick={handleClearInput}\r\n        disabled={!isClickable} // Disable the 'C' button\r\n      >\r\n        C\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumericInputPad;\r\n","import React from \"react\";\r\nimport \"./RadioButtons.css\";\r\n\r\nconst RadioButtons = ({ values, selectedValue, onChange, description }) => {\r\n  return (\r\n    <div className=\"radio-buttons-container\">\r\n      {description && <span className=\"radio-description\">{description}</span>}\r\n      <div className=\"radioContainer\">\r\n        {values.map((value, index) => (\r\n          <label\r\n            key={index}\r\n            className={`radioButton ${\r\n              selectedValue === value ? \"selected\" : \"\"\r\n            } ${\r\n              index === 0 ? \"first\" : index === values.length - 1 ? \"last\" : \"\"\r\n            }`}\r\n          >\r\n            <input\r\n              type=\"radio\"\r\n              name=\"radioGroup\"\r\n              value={value}\r\n              checked={selectedValue === value}\r\n              onChange={() => onChange(value)}\r\n            />\r\n            {value}\r\n          </label>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RadioButtons;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./AudioAnimation.css\";\r\n\r\nlet animationInterval = null; // Az animáció időzítője\r\n\r\nexport const audioAnimation = (shouldAnimate) => {\r\n  const event = new CustomEvent(\"audioAnimationControl\", {\r\n    detail: { shouldAnimate },\r\n  });\r\n  window.dispatchEvent(event);\r\n};\r\n\r\nconst AudioAnimation = () => {\r\n  const [bars, setBars] = useState(Array(15).fill(20)); // Kezdeti magasságok (20%)\r\n  const isAnimating = useRef(false); // Az animáció állapotának követése\r\n\r\n  useEffect(() => {\r\n    const handleAnimationControl = (e) => {\r\n      const { shouldAnimate } = e.detail;\r\n      if (shouldAnimate) {\r\n        startAnimation();\r\n      } else {\r\n        stopAnimation();\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"audioAnimationControl\", handleAnimationControl);\r\n\r\n    return () => {\r\n      window.removeEventListener(\r\n        \"audioAnimationControl\",\r\n        handleAnimationControl\r\n      );\r\n    };\r\n  });\r\n\r\n  const startAnimation = () => {\r\n    if (isAnimating.current) return; // Ne indítsuk el, ha már fut\r\n    isAnimating.current = true;\r\n\r\n    animationInterval = setInterval(() => {\r\n      setBars(bars.map(() => Math.floor(Math.random() * 81) + 20)); // Random magasságok 20% és 100% között\r\n    }, 200);\r\n  };\r\n\r\n  const stopAnimation = () => {\r\n    if (!isAnimating.current) return; // Ne állítsuk le, ha nem fut\r\n    isAnimating.current = false;\r\n\r\n    clearInterval(animationInterval);\r\n    setBars(Array(15).fill(20)); // Visszaállítás alapállapotba\r\n  };\r\n\r\n  return (\r\n    <div className=\"audio-animation-container\">\r\n      <div className=\"audio-bars\">\r\n        {bars.map((height, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"audio-bar\"\r\n            style={{ height: `${height}%` }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioAnimation;\r\n","import React, { useState, useRef } from \"react\";\r\nimport CustomSwitch from \"./CustomSwitch\";\r\nimport SettingsPopup from \"../../components/SettingsPopup/SettingsPopup\";\r\nimport Switch from \"../../components/Switch/Switch\";\r\nimport Input from \"../../components/Input/Input\";\r\nimport NumericInputPad, {\r\n  numericInputPadClickable,\r\n} from \"../../components/NumericInputPad/NumericInputPad\";\r\nimport { BsGearFill } from \"react-icons/bs\";\r\nimport RadioButtons from \"../../components/RadioButtons/RadioButtons\";\r\nimport AudioAnimation, {\r\n  audioAnimation,\r\n} from \"../../components/AudioAnimation/AudioAnimation\";\r\nimport MessagePopup from \"../../components/MessagePopup/MessagePopup\";\r\n\r\nimport ExamFinishPopup from \"./ExamFinishPopup\";\r\nimport { FaXmark } from \"react-icons/fa6\";\r\nimport { CgMailForward } from \"react-icons/cg\";\r\nimport ResultPopup from \"../../tests/NumberPairConcentration/NumberPairConcentrationResultPopup\";\r\nimport ActionConfirmationPopup from \"../../components/ActionConfirmationModal/ActionConfirmationModal\";\r\nimport { Icons } from \"../../assets/icons/icons\";\r\nimport \"./AcousticMemory.css\";\r\n\r\nconst loadAudioFiles = () => {\r\n  const audioContext = require.context(\"./audio\", false, /\\.mp3$/);\r\n  const audioFiles = {};\r\n  audioContext.keys().forEach((key) => {\r\n    const fileName = key.replace(\"./\", \"\").replace(\".mp3\", \"\");\r\n    audioFiles[fileName] = new Audio(audioContext(key));\r\n  });\r\n  return audioFiles;\r\n};\r\n// Generáló függvény\r\nconst generateExamNumbers = (count, digits) => {\r\n  const challenges = [];\r\n  for (let i = 0; i < count; i++) {\r\n    // Minden feladványhoz generáljunk számjegyeket\r\n    const challengeNumbers = Array.from(\r\n      { length: digits },\r\n      () => Math.floor(Math.random() * 10) // Egyjegyű számok (0-9)\r\n    ).join(\"\");\r\n    challenges.push(challengeNumbers);\r\n  }\r\n  return challenges;\r\n};\r\n\r\nfunction AcousticMemory() {\r\n  const testType = \"Acoustic Memory\";\r\n  const [isExamActive, setIsExamActive] = useState(false);\r\n  const [currentExamChallenge, setCurrentExamChallenge] = useState(0);\r\n  const [examResults, setExamResults] = useState([]);\r\n  const [isResultPopupOpen, setIsResultPopupOpen] = useState(false);\r\n  const [totalTimeSpent, setTotalTimeSpent] = useState(0);\r\n  const startTimeRef = useRef(null);\r\n  const [totalTasks, setTotalTasks] = useState(0);\r\n  const [correctAnswers, setCorrectAnswers] = useState(0);\r\n  const [incorrectAnswers, setIncorrectAnswers] = useState(0);\r\n  const [unansweredQuestions, setUnansweredQuestions] = useState(0);\r\n  const [scorePercentage, setScorePercentage] = useState(0);\r\n  const [activePopup, setActivePopup] = useState(null);\r\n\r\n  const popupsConfig = {\r\n    finishMemoryExam: {\r\n      question: \"Do you want to finish the test? \",\r\n      buttons: [\r\n        {\r\n          text: \"Yes, Finish and see the result!!!\",\r\n          onClick: () => handlePopupConfirm(),\r\n          icon: <Icons.FaFlagCheckered size={18} />,\r\n        },\r\n        {\r\n          text: \"No, return to the test\",\r\n          onClick: () => handlePopupCancel(),\r\n          icon: (\r\n            <Icons.HiOutlineXMark\r\n              size={20}\r\n              style={{\r\n                strokeWidth: 2,\r\n              }}\r\n            />\r\n          ),\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  //Settings Popup\r\n  const [isPopupOpen, setPopupOpen] = useState(false);\r\n  // Settings Popup Data\r\n  const [settings, setSettings] = useState([\r\n    { id: \"switch1\", description: \"Enable for use Exam mode\", value: false },\r\n    {\r\n      id: \"switch2\",\r\n      description: \"Enable numeric input pad during the session\",\r\n      value: true,\r\n    },\r\n    {\r\n      id: \"switch3\",\r\n      description: \"When enabled, input numbers in reverse order\",\r\n      value: false,\r\n    },\r\n    {\r\n      id: \"numberInput\",\r\n      description: \"How many numbers should be asked\",\r\n      value: \"2\",\r\n    },\r\n    {\r\n      id: \"playbackSpeed\",\r\n      description: \"Playback Speed\",\r\n      value: \"fast\",\r\n    },\r\n  ]);\r\n\r\n  // Azt nézi meg hogy revers legyen e az ikon a topbarban.\r\n  const isReverseOrder = settings.find(\r\n    (setting) => setting.id === \"switch3\"\r\n  ).value;\r\n\r\n  const [isPopupVisible, setIsPopupVisible] = useState(false);\r\n  // Keresd meg a numberInput objektumot és vedd ki az értékét\r\n\r\n  // Input change handler\r\n  const handleInputChange = (event) => {\r\n    setUserInput(event.target.value);\r\n  };\r\n  // Practice / Exam Switch\r\n  const handleSettingChange = (id, newValue) => {\r\n    if (isExamActive) {\r\n      setIsPopupVisible(true); // Ha aktív az exam, jelenítsük meg a popup-ot\r\n      return; // Ne módosítsuk a beállítást\r\n    }\r\n    setSettings((prevSettings) =>\r\n      prevSettings.map((setting) =>\r\n        setting.id === id ? { ...setting, value: newValue } : setting\r\n      )\r\n    );\r\n  };\r\n  // Popup felugratás\r\n  const handleQuestionPopup = () => {\r\n    setIsPopupVisible(true);\r\n    // Itt további logika lehet (pl. vizsga befejezése)\r\n  };\r\n\r\n  // Popup törlése\r\n  const handlePopupCancel = () => {\r\n    setActivePopup(false);\r\n  };\r\n  const handlePopupConfirm = () => {\r\n    handleFinishExam();\r\n    setActivePopup(false);\r\n    setIsExamActive(false); // Lezárjuk az exam módot\r\n\r\n    // Toggle the value of the CustomSwitch (in this case, switch1)\r\n    setSettings((prevSettings) =>\r\n      prevSettings.map((setting) =>\r\n        setting.id === \"switch1\" // Use the correct switch id here\r\n          ? { ...setting, value: !setting.value } // Toggle the value\r\n          : setting\r\n      )\r\n    );\r\n  };\r\n\r\n  // Keresd meg a numberInput objektumot és vedd ki az értékét\r\n  const numberInputValue = settings.find(\r\n    (item) => item.id === \"numberInput\"\r\n  ).value;\r\n\r\n  // Setting - Audio playback Speed\r\n  const getPlaybackDelay = () => {\r\n    const speed = settings.find((s) => s.id === \"playbackSpeed\").value;\r\n    switch (speed) {\r\n      case \"slow\":\r\n        return 1300; // 1.3 másodperc\r\n      case \"fast\":\r\n        return 0; // 0 másodperc\r\n      default:\r\n        return 500; // 0.5 másodperc\r\n    }\r\n  };\r\n\r\n  const focusInput = () => {\r\n    // Keresd meg a switch2 értékét\r\n    const switch2 = settings.find((setting) => setting.id === \"switch2\");\r\n\r\n    // Ha switch2 értéke false, fókuszálj az input mezőre\r\n    if (switch2 && !switch2.value && inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  };\r\n  const resetInput = () => {\r\n    setUserInput(\"\"); // Az input mező törlése\r\n    setIsChecking(false); // Ellenőrzés állapotának visszaállítása\r\n    setIsCorrect(null); // A válasz állapotának visszaállítása\r\n  };\r\n\r\n  const [numbers, setNumbers] = useState([]);\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [isChecking, setIsChecking] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(null);\r\n  const inputRef = useRef(null);\r\n  const audioFiles = loadAudioFiles();\r\n  // Az exam mode értéke\r\n  const isExamModeEnabled = settings.find(\r\n    (setting) => setting.id === \"switch1\"\r\n  ).value;\r\n  // Number Generator\r\n  const generateNumbers = () => {\r\n    const count = Math.max(\r\n      1,\r\n      Math.min(\r\n        10,\r\n        parseInt(settings.find((s) => s.id === \"numberInput\").value, 10) || 4\r\n      )\r\n    );\r\n    const randomNumbers = Array.from({ length: count }, () =>\r\n      Math.floor(Math.random() * 10)\r\n    );\r\n    setNumbers(randomNumbers);\r\n    return randomNumbers;\r\n  };\r\n\r\n  // Get Numbers to read\r\n  const getNumbersToRead = (numbers, isReverse) => {\r\n    return isReverse ? [...numbers].reverse() : numbers;\r\n  };\r\n  // Number audio Playback\r\n  const playNumberAudio = async (numbers) => {\r\n    const delay = getPlaybackDelay();\r\n    for (const number of numbers) {\r\n      const audio = audioFiles[number.toString()];\r\n      if (audio) {\r\n        await new Promise((resolve) => {\r\n          audio.onended = resolve; // Ha lejátszódik, akkor folytatja\r\n          audio.play();\r\n        });\r\n        await new Promise((resolve) => setTimeout(resolve, delay)); // várakozás a következő szám előtt\r\n      }\r\n    }\r\n  };\r\n  // Practice mode Gameplay\r\n  const handleStart = async () => {\r\n    const generatedNumbers = generateNumbers();\r\n    const isReverse = settings.find((s) => s.id === \"switch3\").value;\r\n    const numbersToRead = getNumbersToRead(generatedNumbers, isReverse); // Use the helper function\r\n    setUserInput(\"\");\r\n    setIsCorrect(null);\r\n    audioAnimation(true);\r\n    numericInputPadClickable(false);\r\n    await playNumberAudio(numbersToRead);\r\n    numericInputPadClickable(true);\r\n    audioAnimation(false);\r\n    setIsChecking(true);\r\n    focusInput();\r\n  };\r\n  // Check the Asnwer\r\n  const handleCheck = () => {\r\n    const inputNumbers = userInput.split(\"\").map((num) => num.trim());\r\n    const isMatch =\r\n      JSON.stringify(inputNumbers) === JSON.stringify(numbers.map(String));\r\n    setIsCorrect(isMatch);\r\n    setIsChecking(false);\r\n    numericInputPadClickable(false);\r\n  };\r\n\r\n  // EXAM\r\n\r\n  const [examHistory, setExamHistory] = useState([\r\n    {\r\n      date: \"2024-11-15, 15:06:34\",\r\n      correctAnswers: 10,\r\n      incorrectAnswers: 0,\r\n      unansweredQuestions: 0,\r\n      scorePercentage: 100,\r\n      totalTimeSpent: 649,\r\n      testType: \"Acoustic Memory\",\r\n    },\r\n    {\r\n      date: \"19/01/2025, 16:07:35\",\r\n      correctAnswers: 6,\r\n      incorrectAnswers: 4,\r\n      unansweredQuestions: 0,\r\n      scorePercentage: 60,\r\n      totalTimeSpent: 49,\r\n      testType: \"Acoustic Memory\",\r\n    },\r\n  ]);\r\n  console.log(examHistory);\r\n  const setTimer = () => {\r\n    if (startTimeRef.current === null) {\r\n      startTimeRef.current = Date.now();\r\n    }\r\n  };\r\n\r\n  // EXAM TASK\r\n  const examChallenges = [\r\n    { count: 3, digits: 1 },\r\n    { count: 3, digits: 1 },\r\n    { count: 3, digits: 1 },\r\n    { count: 4, digits: 1 },\r\n    { count: 4, digits: 1 },\r\n    { count: 4, digits: 1 },\r\n    { count: 5, digits: 1 },\r\n    { count: 5, digits: 1 },\r\n    { count: 5, digits: 1 },\r\n    { count: 6, digits: 1 },\r\n    { count: 6, digits: 1 },\r\n    { count: 6, digits: 1 },\r\n    { count: 7, digits: 1 },\r\n    { count: 7, digits: 1 },\r\n    { count: 7, digits: 1 },\r\n  ];\r\n  const handleStartExam = async () => {\r\n    setUserInput(\"\"); // Üres input\r\n    setTimer();\r\n    setIsExamActive(true);\r\n    setCurrentExamChallenge(0); // Az első feladványt kezdjük\r\n    setExamResults([]); // Eredmények törlése\r\n    const firstChallenge = examChallenges[0];\r\n    const generatedNumbers = generateExamNumbers(\r\n      firstChallenge.count,\r\n      firstChallenge.digits\r\n    );\r\n    const isReverse = settings.find((s) => s.id === \"switch3\").value;\r\n    const numbersToRead = getNumbersToRead(generatedNumbers, isReverse); // Use the helper function\r\n    setNumbers(generatedNumbers);\r\n    // Hang lejátszása\r\n    audioAnimation(true);\r\n    numericInputPadClickable(false);\r\n    await playNumberAudio(numbersToRead); // Aszinkron audio lejátszás\r\n    numericInputPadClickable(true);\r\n    setIsChecking(true);\r\n    audioAnimation(false);\r\n    focusInput();\r\n  };\r\n\r\n  const handleSaveAndNext = async () => {\r\n    const inputNumbers = userInput.split(\"\").map((num) => num.trim());\r\n    const isMatch =\r\n      JSON.stringify(inputNumbers) === JSON.stringify(numbers.map(String));\r\n    console.log(\"Input matches generated numbers:\", isMatch);\r\n    setExamResults((prevResults) => [\r\n      ...prevResults,\r\n      { challengeIndex: currentExamChallenge, isCorrect: isMatch },\r\n    ]);\r\n    // Következő feladvány betöltése vagy vizsga befejezése\r\n    const nextIndex = currentExamChallenge + 1;\r\n    if (nextIndex < examChallenges.length) {\r\n      setCurrentExamChallenge(nextIndex); // Következő feladvány\r\n      const nextChallenge = examChallenges[nextIndex];\r\n      const generatedNumbers = generateExamNumbers(\r\n        nextChallenge.count,\r\n        nextChallenge.digits\r\n      );\r\n      setNumbers(generatedNumbers);\r\n      setUserInput(\"\"); // Üres input\r\n      const isReverse = settings.find((s) => s.id === \"switch3\").value;\r\n      const numbersToRead = isReverse\r\n        ? [...generatedNumbers].reverse()\r\n        : generatedNumbers;\r\n      // Hang lejátszása\r\n\r\n      numericInputPadClickable(false);\r\n      setIsChecking(false);\r\n      audioAnimation(true);\r\n      await playNumberAudio(numbersToRead); // Aszinkron audio lejátszás\r\n      audioAnimation(false);\r\n      setIsChecking(true);\r\n      numericInputPadClickable(true);\r\n      focusInput();\r\n    } else {\r\n      handleFinishExam(); // Ha az utolsó feladvány, vizsga befejezése\r\n    }\r\n  };\r\n\r\n  const handleFinishExam = () => {\r\n    let timeSpent = 0; // Deklaráljuk a timeSpent változót kívül az if blokk előtt\r\n\r\n    if (startTimeRef.current !== null) {\r\n      timeSpent = Math.round((Date.now() - startTimeRef.current) / 1000);\r\n\r\n      // Set the total time spent immediately like other states\r\n      setTotalTimeSpent(timeSpent);\r\n\r\n      startTimeRef.current = null;\r\n    }\r\n\r\n    // User input és ellenőrzés\r\n    const inputNumbers = userInput.split(\"\").map((num) => num.trim());\r\n    const isMatch =\r\n      JSON.stringify(inputNumbers) === JSON.stringify(numbers.map(String));\r\n\r\n    // Jelenlegi vizsga eredmény mentése\r\n    const updatedResults = [\r\n      ...examResults,\r\n      { challengeIndex: currentExamChallenge, isCorrect: isMatch },\r\n    ];\r\n\r\n    // Állapotok frissítése\r\n    const correctAnswers = updatedResults.filter(\r\n      (result) => result.isCorrect === true\r\n    ).length;\r\n    const incorrectAnswers = updatedResults.filter(\r\n      (result) => result.isCorrect === false\r\n    ).length;\r\n    const total = examChallenges.reduce(\r\n      (sum, challenge) => sum + challenge.digits,\r\n      0\r\n    );\r\n    const unansweredQuestions = total - (correctAnswers + incorrectAnswers);\r\n    const scorePercentage =\r\n      total > 0 ? Math.round((correctAnswers / total) * 100) : 0;\r\n\r\n    setCorrectAnswers(correctAnswers);\r\n    setIncorrectAnswers(incorrectAnswers);\r\n    setTotalTasks(total);\r\n    setUnansweredQuestions(unansweredQuestions);\r\n    setScorePercentage(scorePercentage);\r\n\r\n    // Vizsga eredmény mentése\r\n    const examDate = new Date();\r\n    const examResult = {\r\n      date: examDate.toLocaleString(),\r\n      correctAnswers: correctAnswers,\r\n      incorrectAnswers: incorrectAnswers,\r\n      unansweredQuestions: unansweredQuestions,\r\n      scorePercentage: scorePercentage,\r\n      total: total,\r\n      totalTimeSpent: timeSpent, // Itt közvetlenül a timeSpent változót használd\r\n      testType: testType,\r\n    };\r\n\r\n    // Történet frissítése és állapotbeállítások\r\n    setExamHistory((prevHistory) => [...prevHistory, examResult]);\r\n    setExamResults(updatedResults);\r\n    setIsExamActive(false);\r\n    setIsResultPopupOpen(true); // Eredmény popup megnyitása\r\n  };\r\n\r\n  const handleClosePopup = () => {\r\n    setIsResultPopupOpen(false); // Close the result popup\r\n    setUserInput(\"\"); // Üres input\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {activePopup && (\r\n        <ActionConfirmationPopup\r\n          show={true}\r\n          onOverlayClick={() => setActivePopup(null)}\r\n          question={popupsConfig[activePopup].question}\r\n          buttons={popupsConfig[activePopup].buttons}\r\n        />\r\n      )}\r\n      <MessagePopup />\r\n      {/* <button onClick={handleOpenPopup}> Open exam results</button>*/}\r\n      {isResultPopupOpen && (\r\n        <ResultPopup\r\n          examHistory={examHistory}\r\n          scorePercentage={scorePercentage}\r\n          correctAnswers={correctAnswers}\r\n          incorrectAnswers={incorrectAnswers}\r\n          unansweredQuestions={unansweredQuestions}\r\n          totalTasks={totalTasks}\r\n          totalTimeSpent={totalTimeSpent} //done\r\n          onClose={handleClosePopup} //Done\r\n        />\r\n      )}\r\n      <div className=\"acoustic-memory-container\">\r\n        <div className=\"container-top-bar\">\r\n          <div className=\"left-group\">\r\n            {settings.map((setting) =>\r\n              setting.id === \"switch1\" ? (\r\n                <CustomSwitch\r\n                  key={setting.id}\r\n                  setting={setting} // Átadjuk az első switch objektumot\r\n                  onChange={handleSettingChange} // Visszahívás a szülőhöz\r\n                  isExamActive={isExamActive} // Az isExamActive prop átadása\r\n                  onPopupRequest={handleQuestionPopup}\r\n                  resetInput={resetInput}\r\n                />\r\n              ) : null\r\n            )}\r\n\r\n            {isExamActive && (\r\n              <div className=\"exam-progress\">\r\n                <p>{`${currentExamChallenge + 1} of ${\r\n                  examChallenges.length\r\n                }`}</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"right-group\">\r\n            {!isExamModeEnabled && (\r\n              <div className=\"task-digits\" onClick={() => setPopupOpen(true)}>\r\n                <p>{`N:o ${numberInputValue}`}</p>\r\n              </div>\r\n            )}\r\n            <div className=\"task-direction\">\r\n              {/* Az ikonhoz hozzáadjuk a megfelelő osztályt */}\r\n              <CgMailForward\r\n                className={`icon-normal ${\r\n                  isReverseOrder ? \"icon-reversed\" : \"\"\r\n                }`}\r\n              />\r\n            </div>\r\n            {isExamActive ? (\r\n              <FaXmark\r\n                className=\"examFinishButton\"\r\n                onClick={() => setActivePopup(\"finishMemoryExam\")}\r\n              />\r\n            ) : (\r\n              <BsGearFill\r\n                className=\"settingsOpenButton\"\r\n                onClick={() => setPopupOpen(true)}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n        {isPopupVisible && (\r\n          <ExamFinishPopup\r\n            onConfirm={handlePopupConfirm}\r\n            onCancel={handlePopupCancel}\r\n          />\r\n        )}\r\n        <SettingsPopup isOpen={isPopupOpen} onClose={() => setPopupOpen(false)}>\r\n          {settings.map((setting) =>\r\n            setting.id.startsWith(\"switch\") ? (\r\n              <Switch\r\n                key={setting.id}\r\n                id={setting.id}\r\n                description={setting.description}\r\n                isChecked={setting.value}\r\n                onChange={(newValue) =>\r\n                  handleSettingChange(setting.id, newValue)\r\n                }\r\n              />\r\n            ) : setting.id === \"playbackSpeed\" ? (\r\n              <RadioButtons\r\n                key={setting.id}\r\n                description={setting.description} // Átadjuk a description-t\r\n                values={[\"slow\", \"normal\", \"fast\"]} // Példa értékek\r\n                selectedValue={setting.value}\r\n                onChange={(newValue) =>\r\n                  handleSettingChange(setting.id, newValue)\r\n                }\r\n              />\r\n            ) : (\r\n              <Input\r\n                key={setting.id}\r\n                id={setting.id}\r\n                description={setting.description}\r\n                value={setting.value}\r\n                onChange={(e) =>\r\n                  handleSettingChange(setting.id, e.target.value)\r\n                }\r\n              />\r\n            )\r\n          )}\r\n        </SettingsPopup>\r\n        <div className=\"inputContainer\">\r\n          <AudioAnimation />\r\n\r\n          <input\r\n            className=\"answerInput\"\r\n            ref={inputRef}\r\n            type=\"text\"\r\n            value={userInput}\r\n            onChange={handleInputChange}\r\n            style={{\r\n              backgroundColor:\r\n                isCorrect === null ? \"\" : isCorrect ? \"#CDDA32\" : \"#E08A8A\",\r\n              borderWidth: \"2px\",\r\n              padding: \"10px\",\r\n              marginBottom: \"10px\",\r\n            }}\r\n          />\r\n          <div className={`correctAnswer ${isCorrect === false ? \"show\" : \"\"}`}>\r\n            {isCorrect === false && `Correct sequence: ${numbers.join(\"\")}`}\r\n          </div>\r\n        </div>\r\n        {settings.find((s) => s.id === \"switch2\").value && (\r\n          <NumericInputPad inputRef={inputRef} onInputChange={setUserInput} />\r\n        )}\r\n\r\n        {isExamModeEnabled ? (\r\n          <button\r\n            className=\"examButton\"\r\n            onClick={\r\n              !isExamActive\r\n                ? handleStartExam\r\n                : currentExamChallenge < examChallenges.length - 1\r\n                ? handleSaveAndNext\r\n                : handleFinishExam\r\n            }\r\n          >\r\n            {!isExamActive\r\n              ? \"Start Exam\"\r\n              : currentExamChallenge < examChallenges.length - 1\r\n              ? \"Save and Next\"\r\n              : \"Finish Exam\"}\r\n          </button>\r\n        ) : (\r\n          <button\r\n            className=\"checkStartButton\"\r\n            onClick={isChecking ? handleCheck : handleStart}\r\n          >\r\n            {isChecking ? \"Check\" : \"Start\"}\r\n          </button>\r\n        )}\r\n\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AcousticMemory;\r\n","import React from \"react\";\r\nimport \"./Switch.css\";\r\n\r\nconst Switch = ({ id, description, isChecked, onChange }) => {\r\n  return (\r\n    <div className=\"settings-row\">\r\n      <div className=\"description modified\">\r\n        <p>{description}</p>\r\n      </div>\r\n      <label className=\"switch\">\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={isChecked}\r\n          onChange={(e) => onChange(e.target.checked)} // Értesíti a szülőt a változásról\r\n          id={id}\r\n        />\r\n        <span className=\"slider round\"></span>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Switch;\r\n","import React, { useState } from \"react\";\r\nimport { AiOutlineExclamationCircle } from \"react-icons/ai\";\r\n\r\nimport \"./MessagePopup.css\";\r\n\r\nconst MessagePopup = () => {\r\n  const [messages, setMessages] = useState([]); // Az üzenetek tömbje\r\n\r\n  const showMessage = (\r\n    msg,\r\n    timeout,\r\n    color = \"#e83b51\",\r\n    textcolor = \"white\"\r\n  ) => {\r\n    // Szín hozzáadása, alapértelmezett értéke piros\r\n    const newMessage = {\r\n      id: Date.now(), // Egyedi azonosító a popupoknak\r\n      text: msg,\r\n      visible: true,\r\n      color: color, // Szín tárolása\r\n      textcolor: textcolor,\r\n    };\r\n\r\n    // Hozzáadjuk az új üzenetet\r\n    setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n\r\n    // Az üzenet eltűnését követő időzítő\r\n    setTimeout(() => {\r\n      setMessages((prevMessages) =>\r\n        prevMessages.map((message) =>\r\n          message.id === newMessage.id\r\n            ? { ...message, visible: false }\r\n            : message\r\n        )\r\n      );\r\n      // Az üzenet eltávolítása a kódból 1 másodperccel az eltűnés után (lehetővé téve az animáció futását)\r\n      setTimeout(() => {\r\n        setMessages((prevMessages) =>\r\n          prevMessages.filter((message) => message.id !== newMessage.id)\r\n        );\r\n      }, 400); // A második setTimeout a popup eltávolításához szükséges időt ad a kivonáshoz\r\n    }, timeout);\r\n  };\r\n\r\n  // Globálisan elérhető függvény, amit a szülő komponens hívhat\r\n  window.showPopupMessage = showMessage;\r\n\r\n  return (\r\n    <div>\r\n      {/* A popupok listája */}\r\n      <div className=\"popup-container\">\r\n        {messages.map((message) => (\r\n          <div\r\n            key={message.id}\r\n            className={`message-popup ${\r\n              message.visible ? \"popupVisible\" : \"popupHidden\"\r\n            }`}\r\n            style={{ backgroundColor: message.color, color: message.textcolor }} // Szín beállítása\r\n          >\r\n            <div className=\"message-popup-icon\">\r\n              <AiOutlineExclamationCircle />\r\n            </div>\r\n\r\n            <div>\r\n              <p className=\"popup-message\">{message.text}</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// használat: indow.showPopupMessage(\"Oho - Let's include at least 1 maybe :)\", 3000, \"#77DD77\", \"black\" );\r\n\r\nexport default MessagePopup;\r\n","import React from \"react\";\r\nimport { LuBadgePercent } from \"react-icons/lu\";\r\nimport {\r\n  IoMdCheckmarkCircleOutline,\r\n  IoMdCloseCircleOutline,\r\n} from \"react-icons/io\";\r\nimport { FaRegThumbsDown, FaRegThumbsUp } from \"react-icons/fa\";\r\nimport { IoHourglassOutline } from \"react-icons/io5\";\r\nimport \"./NumberPairConcentrationResultPopup.css\";\r\n\r\nfunction ResultPopup({\r\n  examResults,\r\n  examHistory,\r\n  totalTimeSpent,\r\n  onClose,\r\n  scorePercentage,\r\n  correctAnswers,\r\n  totalTasks,\r\n  incorrectAnswers,\r\n  unansweredQuestions,\r\n}) {\r\n  const totalScore = examHistory.reduce((acc, exam) => {\r\n    const score = (exam.correctAnswers / exam.totalTasks) * 100;\r\n    return acc + score;\r\n  }, 0);\r\n  const averageScore = Math.round(totalScore / examHistory.length);\r\n  const comparison = scorePercentage > averageScore ? \"better\" : \"worse\";\r\n  const comparisonIcon =\r\n    scorePercentage > averageScore ? <FaRegThumbsUp /> : <FaRegThumbsDown />;\r\n  const successfulExams = examHistory.filter(\r\n    (exam) => (exam.correctAnswers / exam.totalTasks) * 100 >= 80\r\n  ).length;\r\n  const unsuccessfulExams = examHistory.length - successfulExams;\r\n  const totalElapsedTime = examHistory.reduce(\r\n    (total, exam) => total + exam.totalTimeSpent,\r\n    0\r\n  );\r\n  const totalTimeInMinutes = totalElapsedTime / 60;\r\n  const hours = Math.floor(totalTimeInMinutes / 60);\r\n  const minutes = Math.floor(totalTimeInMinutes % 60);\r\n\r\n  return (\r\n    <div className=\"exam-results-popup\">\r\n      <div className=\"exam-result-popup-content\">\r\n        <div className=\"latest-exam-result\">\r\n          <div className=\"scoreTextWrapper\">\r\n            <div className=\"scoreText\">\r\n              {correctAnswers}/{totalTasks}\r\n            </div>\r\n          </div>\r\n          <div className=\"custom-container\">\r\n            <div className=\"custom-side-bar\"></div>\r\n            <div className=\"custom-content\">\r\n              <span className=\"custom-date\">2025-01-03</span>\r\n              <h2 className=\"custom-title\">Number concentration</h2>\r\n              <span className=\"custom-description\">Ez egy teszt volt</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"squre-container\">\r\n            <div className=\"result-square\">\r\n              <h3>{scorePercentage}%</h3>\r\n              <p>Exam Percentage</p>\r\n            </div>\r\n            <div className=\"result-square\">\r\n              <h3>{incorrectAnswers}</h3>\r\n              <p>Incorrect Answers</p>\r\n            </div>\r\n            <div className=\"result-square\">\r\n              <h3>{unansweredQuestions}</h3>\r\n              <p>Unfinished tasks</p>\r\n            </div>\r\n            <div className=\"result-square\">\r\n              <h3>{totalTimeSpent}</h3>\r\n              <p>Time</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"allExamsdata\">\r\n          <div className=\"ExamScoresContainer\">\r\n            <div className=\"summaryCard\">\r\n              <LuBadgePercent />\r\n              <p>Average score {averageScore} %</p>\r\n            </div>\r\n            <div className=\"summaryCard\">\r\n              <IoMdCheckmarkCircleOutline />\r\n              <p>{successfulExams} tests passed</p>\r\n            </div>\r\n            <div className=\"summaryCard\">\r\n              <IoMdCloseCircleOutline />\r\n              <p>{unsuccessfulExams} tests failed</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"timeContainer\">\r\n            <div className=\"comparisonContainer\">\r\n              <div className=\"iconWrapper\">{comparisonIcon}</div>\r\n              <div className=\"textWrapper\">\r\n                <p>Your result is: {comparison} than your average.</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"comparisonContainer\">\r\n              <div className=\"iconWrapper\">\r\n                <IoHourglassOutline />\r\n              </div>\r\n              <div className=\"textWrapper\">\r\n                <h3>\r\n                  {hours} h {minutes} m\r\n                </h3>\r\n                <p>Total time spent on exams</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <button onClick={onClose}>Close</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResultPopup;\r\n","var map = {\n\t\"./0.mp3\": 3373,\n\t\"./1.mp3\": 5243,\n\t\"./2.mp3\": 3871,\n\t\"./3.mp3\": 5370,\n\t\"./4.mp3\": 89,\n\t\"./5.mp3\": 9620,\n\t\"./6.mp3\": 4939,\n\t\"./7.mp3\": 518,\n\t\"./8.mp3\": 290,\n\t\"./9.mp3\": 7168\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 9743;"],"names":["_ref","onConfirm","onCancel","_jsx","className","children","_jsxs","onClick","FaFlagCheckered","FaXmark","isOpen","onClose","useEffect","handleEscape","event","key","window","addEventListener","removeEventListener","target","classList","contains","IoIosCloseCircleOutline","value","onChange","id","placeholder","description","type","required","show","onOverlayClick","question","buttons","e","stopPropagation","Icons","HiOutlineXMark","size","style","strokeWidth","map","button","index","icon","text","setting","isExamActive","onPopupRequest","resetInput","isActive","setIsActive","useState","handleToggle","newValue","backgroundColor","isClickable","numericInputPadClickable","state","inputRef","onInputChange","handleButtonClick","digit","current","Array","from","length","_","disabled","handleClearInput","slice","values","selectedValue","name","checked","animationInterval","audioAnimation","shouldAnimate","CustomEvent","detail","dispatchEvent","AudioAnimation","bars","setBars","fill","isAnimating","useRef","handleAnimationControl","startAnimation","stopAnimation","setInterval","Math","floor","random","clearInterval","height","generateExamNumbers","count","digits","challenges","i","challengeNumbers","join","push","setIsExamActive","currentExamChallenge","setCurrentExamChallenge","examResults","setExamResults","isResultPopupOpen","setIsResultPopupOpen","totalTimeSpent","setTotalTimeSpent","startTimeRef","totalTasks","setTotalTasks","correctAnswers","setCorrectAnswers","incorrectAnswers","setIncorrectAnswers","unansweredQuestions","setUnansweredQuestions","scorePercentage","setScorePercentage","activePopup","setActivePopup","popupsConfig","finishMemoryExam","handlePopupConfirm","handlePopupCancel","isPopupOpen","setPopupOpen","settings","setSettings","isReverseOrder","find","isPopupVisible","setIsPopupVisible","handleSettingChange","prevSettings","handleQuestionPopup","handleFinishExam","numberInputValue","item","focusInput","switch2","focus","setUserInput","setIsChecking","setIsCorrect","numbers","setNumbers","userInput","isChecking","isCorrect","audioFiles","loadAudioFiles","audioContext","require","keys","forEach","fileName","replace","Audio","isExamModeEnabled","getNumbersToRead","isReverse","reverse","playNumberAudio","async","delay","getPlaybackDelay","s","number","audio","toString","Promise","resolve","onended","play","setTimeout","examHistory","setExamHistory","date","testType","console","log","examChallenges","timeSpent","round","Date","now","inputNumbers","split","num","trim","isMatch","JSON","stringify","String","updatedResults","challengeIndex","filter","result","total","reduce","sum","challenge","examResult","toLocaleString","prevHistory","ActionConfirmationPopup","MessagePopup","ResultPopup","handleClosePopup","CustomSwitch","CgMailForward","BsGearFill","ExamFinishPopup","SettingsPopup","startsWith","Switch","isChecked","RadioButtons","Input","ref","borderWidth","padding","marginBottom","NumericInputPad","prevResults","nextIndex","nextChallenge","generatedNumbers","numbersToRead","firstChallenge","handleCheck","generateNumbers","max","min","parseInt","randomNumbers","messages","setMessages","showPopupMessage","msg","timeout","color","arguments","undefined","textcolor","newMessage","visible","prevMessages","message","AiOutlineExclamationCircle","totalScore","acc","exam","averageScore","comparison","comparisonIcon","FaRegThumbsUp","FaRegThumbsDown","successfulExams","unsuccessfulExams","totalTimeInMinutes","hours","minutes","LuBadgePercent","IoMdCheckmarkCircleOutline","IoMdCloseCircleOutline","IoHourglassOutline","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","Object","module","exports"],"sourceRoot":""}